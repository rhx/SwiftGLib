{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"StaticRWLock"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Take a look at the following example:"}]},{"type":"codeListing","syntax":null,"code":["  GStaticRWLock rwlock = G_STATIC_RW_LOCK_INIT;","  GPtrArray *array;","","  gpointer","  my_array_get (guint index)","  {","    gpointer retval = NULL;","","    if (!array)","      return NULL;","","    g_static_rw_lock_reader_lock (&rwlock);","    if (index < array->len)","      retval = g_ptr_array_index (array, index);","    g_static_rw_lock_reader_unlock (&rwlock);","","    return retval;","  }","","  void","  my_array_set (guint index, gpointer data)","  {","    g_static_rw_lock_writer_lock (&rwlock);","","    if (!array)","      array = g_ptr_array_new ();","","    if (index >= array->len)","      g_ptr_array_set_size (array, index + 1);","    g_ptr_array_index (array, index) = data;","","    g_static_rw_lock_writer_unlock (&rwlock);","  }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This example shows an array which can be accessed by many readers"},{"type":"text","text":" "},{"type":"text","text":"(the "},{"type":"codeVoice","code":"my_array_get()"},{"type":"text","text":" function) simultaneously, whereas the writers"},{"type":"text","text":" "},{"type":"text","text":"(the "},{"type":"codeVoice","code":"my_array_set()"},{"type":"text","text":" function) will only be allowed once at a time"},{"type":"text","text":" "},{"type":"text","text":"and only if no readers currently access the array. This is because"},{"type":"text","text":" "},{"type":"text","text":"of the potentially dangerous resizing of the array. Using these"},{"type":"text","text":" "},{"type":"text","text":"functions is fully multi-thread safe now."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Most of the time, writers should have precedence over readers. That"},{"type":"text","text":" "},{"type":"text","text":"means, for this implementation, that as soon as a writer wants to"},{"type":"text","text":" "},{"type":"text","text":"lock the data, no other reader is allowed to lock the data, whereas,"},{"type":"text","text":" "},{"type":"text","text":"of course, the readers that already have locked the data are allowed"},{"type":"text","text":" "},{"type":"text","text":"to finish their operation. As soon as the last reader unlocks the"},{"type":"text","text":" "},{"type":"text","text":"data, the writer will lock it."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Even though "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRWLock"},{"type":"text","text":" is not opaque, it should only be used"},{"type":"text","text":" "},{"type":"text","text":"with the following functions."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"All of the g_static_rw_lock_* functions can be used even if"},{"type":"text","text":" "},{"type":"codeVoice","code":"g_thread_init()"},{"type":"text","text":" has not been called. Then they do nothing, apart"},{"type":"text","text":" "},{"type":"text","text":"from g_static_rw_lock_*_trylock, which does nothing but returning "},{"type":"codeVoice","code":"true"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A read-write lock has a higher overhead than a mutex. For example, both"},{"type":"text","text":" "},{"type":"codeVoice","code":"g_static_rw_lock_reader_lock()"},{"type":"text","text":" and "},{"type":"codeVoice","code":"g_static_rw_lock_reader_unlock()"},{"type":"text","text":" have"},{"type":"text","text":" "},{"type":"text","text":"to lock and unlock a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticMutex"},{"type":"text","text":", so it takes at least twice the time"},{"type":"text","text":" "},{"type":"text","text":"to lock and unlock a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRWLock"},{"type":"text","text":" that it does to lock and unlock a"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticMutex"},{"type":"text","text":". So only data structures that are accessed by multiple"},{"type":"text","text":" "},{"type":"text","text":"readers, and which keep the lock for a considerable time justify a"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRWLock"},{"type":"text","text":". The above example most probably would fare better with a"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticMutex"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRWLock"},{"type":"text","text":" type acts as an owner of an underlying "},{"type":"codeVoice","code":"GStaticRWLock"},{"type":"text","text":" instance."},{"type":"text","text":" "},{"type":"text","text":"It provides the methods that can operate on this data type through "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRWLockProtocol"},{"type":"text","text":" conformance."},{"type":"text","text":" "},{"type":"text","text":"Use "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRWLock"},{"type":"text","text":" as a strong reference or owner of a "},{"type":"codeVoice","code":"GStaticRWLock"},{"type":"text","text":" instance."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRWLockRef"},{"type":"text","text":" (instead of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRWLock"},{"type":"text","text":") for a lightweight Swift reference to an underlying "},{"type":"codeVoice","code":"GStaticRWLock"},{"type":"text","text":" instance."}]}],"type":"aside","name":"Note"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/glib\/staticrwlock"],"traits":[{"interfaceLanguage":"swift"}]}],"relationshipsSections":[{"identifiers":["doc:\/\/GLib\/documentation\/GLib\/PointerWrapper","doc:\/\/GLib\/documentation\/GLib\/StaticRWLockProtocol"],"kind":"relationships","title":"Conforms To","type":"conformsTo"}],"identifier":{"url":"doc:\/\/GLib\/documentation\/GLib\/StaticRWLock","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRWLock"},{"type":"text","text":" struct represents a read-write lock. A read-write"},{"type":"text","text":" "},{"type":"text","text":"lock can be used for protecting data that some portions of code only"},{"type":"text","text":" "},{"type":"text","text":"read from, while others also write. In such situations it is"},{"type":"text","text":" "},{"type":"text","text":"desirable that several readers can read at once, whereas of course"},{"type":"text","text":" "},{"type":"text","text":"only one writer may write at a time."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"StaticRWLock"}],"title":"StaticRWLock","roleHeading":"Class","role":"symbol","symbolKind":"class","externalID":"s:4GLib12StaticRWLockC","modules":[{"name":"GLib"}],"navigatorTitle":[{"kind":"identifier","text":"StaticRWLock"}]},"hierarchy":{"paths":[["doc:\/\/GLib\/documentation\/GLib"]]},"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/GLib\/documentation\/GLib\/StaticRWLock\/init(_:)-33hto","doc:\/\/GLib\/documentation\/GLib\/StaticRWLock\/init(_:)-3kcsg","doc:\/\/GLib\/documentation\/GLib\/StaticRWLock\/init(_:)-3zz8s","doc:\/\/GLib\/documentation\/GLib\/StaticRWLock\/init(_:)-5u2m3","doc:\/\/GLib\/documentation\/GLib\/StaticRWLock\/init(_:)-8mhsi","doc:\/\/GLib\/documentation\/GLib\/StaticRWLock\/init(cPointer:)","doc:\/\/GLib\/documentation\/GLib\/StaticRWLock\/init(gconstpointer:)","doc:\/\/GLib\/documentation\/GLib\/StaticRWLock\/init(gpointer:)","doc:\/\/GLib\/documentation\/GLib\/StaticRWLock\/init(opaquePointer:)","doc:\/\/GLib\/documentation\/GLib\/StaticRWLock\/init(raw:)-3slj2","doc:\/\/GLib\/documentation\/GLib\/StaticRWLock\/init(raw:)-7ng5h","doc:\/\/GLib\/documentation\/GLib\/StaticRWLock\/init(retaining:)","doc:\/\/GLib\/documentation\/GLib\/StaticRWLock\/init(retainingCPointer:)","doc:\/\/GLib\/documentation\/GLib\/StaticRWLock\/init(retainingOpaquePointer:)","doc:\/\/GLib\/documentation\/GLib\/StaticRWLock\/init(retainingRaw:)-2wn2i","doc:\/\/GLib\/documentation\/GLib\/StaticRWLock\/init(retainingRaw:)-5j6wp"]},{"title":"Instance Properties","identifiers":["doc:\/\/GLib\/documentation\/GLib\/StaticRWLock\/ptr"]},{"title":"Default Implementations","identifiers":["doc:\/\/GLib\/documentation\/GLib\/StaticRWLock\/StaticRWLockProtocol-Implementations"],"generated":true}],"references":{"doc://GLib/documentation/GLib":{"role":"collection","title":"GLib","abstract":[],"identifier":"doc:\/\/GLib\/documentation\/GLib","kind":"symbol","type":"topic","url":"\/documentation\/glib"},"doc://GLib/documentation/GLib/StaticRWLock/init(cPointer:)":{"role":"symbol","title":"init(cPointer:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"externalParam","text":"cPointer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">)"}],"abstract":[{"type":"text","text":"Unsafe typed initialiser."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Do not use unless you know the underlying data type the pointer points to conforms to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRWLockProtocol"},{"type":"text","text":"."}]}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRWLock\/init(cPointer:)","kind":"symbol","type":"topic","url":"\/documentation\/glib\/staticrwlock\/init(cpointer:)"},"doc://GLib/documentation/GLib/StaticRWLock/init(gpointer:)":{"role":"symbol","title":"init(gpointer:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"!("},{"kind":"externalParam","text":"gpointer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"gpointer","preciseIdentifier":"c:@T@gpointer"},{"kind":"text","text":"?)"}],"abstract":[{"type":"text","text":"Optional initialiser from a non-mutating "},{"type":"codeVoice","code":"gpointer"},{"type":"text","text":" to"},{"type":"text","text":" "},{"type":"text","text":"the underlying "},{"type":"codeVoice","code":"C"},{"type":"text","text":" data type."},{"type":"text","text":" "},{"type":"text","text":"This creates an instance without performing an unbalanced retain"},{"type":"text","text":" "},{"type":"text","text":"i.e., ownership is transferred to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRWLock"},{"type":"text","text":" instance."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRWLock\/init(gpointer:)","kind":"symbol","type":"topic","url":"\/documentation\/glib\/staticrwlock\/init(gpointer:)"},"doc://GLib/documentation/GLib/StaticRWLockRef":{"role":"symbol","title":"StaticRWLockRef","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"StaticRWLockRef"}],"abstract":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRWLock"},{"type":"text","text":" struct represents a read-write lock. A read-write"},{"type":"text","text":" "},{"type":"text","text":"lock can be used for protecting data that some portions of code only"},{"type":"text","text":" "},{"type":"text","text":"read from, while others also write. In such situations it is"},{"type":"text","text":" "},{"type":"text","text":"desirable that several readers can read at once, whereas of course"},{"type":"text","text":" "},{"type":"text","text":"only one writer may write at a time."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRWLockRef","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"StaticRWLockRef"}],"url":"\/documentation\/glib\/staticrwlockref"},"doc://GLib/documentation/GLib/StaticRWLock/ptr":{"role":"symbol","title":"ptr","fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"ptr"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutableRawPointer","preciseIdentifier":"s:Sv"},{"kind":"text","text":"!"}],"abstract":[{"type":"text","text":"Untyped pointer to the underlying "},{"type":"codeVoice","code":"GStaticRWLock"},{"type":"text","text":" instance."},{"type":"text","text":" "},{"type":"text","text":"For type-safe access, use the generated, typed pointer "},{"type":"codeVoice","code":"StaticRWLockProtocol\/_ptr"},{"type":"text","text":" property instead."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRWLock\/ptr","kind":"symbol","type":"topic","url":"\/documentation\/glib\/staticrwlock\/ptr"},"doc://GLib/documentation/GLib/StaticRWLock/init(retainingOpaquePointer:)":{"role":"symbol","title":"init(retainingOpaquePointer:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"retainingOpaquePointer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"OpaquePointer","preciseIdentifier":"s:s13OpaquePointerV"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Unsafe untyped, retaining initialiser."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Do not use unless you know the underlying data type the pointer points to conforms to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRWLockProtocol"},{"type":"text","text":"."}]}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRWLock\/init(retainingOpaquePointer:)","kind":"symbol","type":"topic","url":"\/documentation\/glib\/staticrwlock\/init(retainingopaquepointer:)"},"doc://GLib/documentation/GLib/PointerWrapper":{"role":"symbol","title":"PointerWrapper","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"PointerWrapper"}],"abstract":[{"type":"text","text":"Protocol for GLib types that wrap pointers."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/PointerWrapper","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"PointerWrapper"}],"url":"\/documentation\/glib\/pointerwrapper"},"doc://GLib/documentation/GLib/StaticRWLock/init(retainingRaw:)-5j6wp":{"role":"symbol","title":"init(retainingRaw:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"retainingRaw"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutableRawPointer","preciseIdentifier":"s:Sv"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Unsafe untyped, retaining initialiser."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Do not use unless you know the underlying data type the pointer points to conforms to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRWLockProtocol"},{"type":"text","text":"."}]}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRWLock\/init(retainingRaw:)-5j6wp","kind":"symbol","type":"topic","url":"\/documentation\/glib\/staticrwlock\/init(retainingraw:)-5j6wp"},"doc://GLib/documentation/GLib/Mutex":{"role":"symbol","title":"Mutex","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Mutex"}],"abstract":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Mutex"},{"type":"text","text":" struct is an opaque data structure to represent a mutex"},{"type":"text","text":" "},{"type":"text","text":"(mutual exclusion). It can be used to protect data against shared"},{"type":"text","text":" "},{"type":"text","text":"access."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/Mutex","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Mutex"}],"url":"\/documentation\/glib\/mutex"},"doc://GLib/documentation/GLib/StaticRWLock/init(gconstpointer:)":{"role":"symbol","title":"init(gconstpointer:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"!("},{"kind":"externalParam","text":"gconstpointer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"gconstpointer","preciseIdentifier":"c:@T@gconstpointer"},{"kind":"text","text":"?)"}],"abstract":[{"type":"text","text":"Optional initialiser from a non-mutating "},{"type":"codeVoice","code":"gconstpointer"},{"type":"text","text":" to"},{"type":"text","text":" "},{"type":"text","text":"the underlying "},{"type":"codeVoice","code":"C"},{"type":"text","text":" data type."},{"type":"text","text":" "},{"type":"text","text":"This creates an instance without performing an unbalanced retain"},{"type":"text","text":" "},{"type":"text","text":"i.e., ownership is transferred to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRWLock"},{"type":"text","text":" instance."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRWLock\/init(gconstpointer:)","kind":"symbol","type":"topic","url":"\/documentation\/glib\/staticrwlock\/init(gconstpointer:)"},"doc://GLib/documentation/GLib/StaticRWLock/init(retaining:)":{"role":"symbol","title":"init(retaining:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"retaining"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GStaticRWLock"},{"kind":"text","text":">)"}],"abstract":[{"type":"text","text":"Designated initialiser from the underlying "},{"type":"codeVoice","code":"C"},{"type":"text","text":" data type."},{"type":"text","text":" "},{"type":"codeVoice","code":"GStaticRWLock"},{"type":"text","text":" does not allow reference counting, so despite the name no actual retaining will occur."},{"type":"text","text":" "},{"type":"text","text":"i.e., ownership is transferred to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRWLock"},{"type":"text","text":" instance."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRWLock\/init(retaining:)","kind":"symbol","type":"topic","url":"\/documentation\/glib\/staticrwlock\/init(retaining:)"},"doc://GLib/documentation/GLib/StaticRWLock/init(_:)-8mhsi":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"!("},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GStaticRWLock"},{"kind":"text","text":">?)"}],"abstract":[{"type":"text","text":"Optional initialiser from a constant pointer to the underlying "},{"type":"codeVoice","code":"C"},{"type":"text","text":" data type."},{"type":"text","text":" "},{"type":"text","text":"This creates an instance without performing an unbalanced retain"},{"type":"text","text":" "},{"type":"text","text":"i.e., ownership is transferred to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRWLock"},{"type":"text","text":" instance."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRWLock\/init(_:)-8mhsi","kind":"symbol","type":"topic","url":"\/documentation\/glib\/staticrwlock\/init(_:)-8mhsi"},"doc://GLib/documentation/GLib/StaticRWLock/init(_:)-5u2m3":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GStaticRWLock"},{"kind":"text","text":">)"}],"abstract":[{"type":"text","text":"Designated initialiser from a constant pointer to the underlying "},{"type":"codeVoice","code":"C"},{"type":"text","text":" data type."},{"type":"text","text":" "},{"type":"text","text":"This creates an instance without performing an unbalanced retain"},{"type":"text","text":" "},{"type":"text","text":"i.e., ownership is transferred to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRWLock"},{"type":"text","text":" instance."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRWLock\/init(_:)-5u2m3","kind":"symbol","type":"topic","url":"\/documentation\/glib\/staticrwlock\/init(_:)-5u2m3"},"doc://GLib/documentation/GLib/StaticRWLockProtocol":{"role":"symbol","title":"StaticRWLockProtocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"StaticRWLockProtocol"}],"abstract":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRWLock"},{"type":"text","text":" struct represents a read-write lock. A read-write"},{"type":"text","text":" "},{"type":"text","text":"lock can be used for protecting data that some portions of code only"},{"type":"text","text":" "},{"type":"text","text":"read from, while others also write. In such situations it is"},{"type":"text","text":" "},{"type":"text","text":"desirable that several readers can read at once, whereas of course"},{"type":"text","text":" "},{"type":"text","text":"only one writer may write at a time."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRWLockProtocol","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"StaticRWLockProtocol"}],"url":"\/documentation\/glib\/staticrwlockprotocol"},"doc://GLib/documentation/GLib/StaticRWLock/init(raw:)-3slj2":{"role":"symbol","title":"init(raw:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"raw"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutableRawPointer","preciseIdentifier":"s:Sv"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Unsafe untyped initialiser."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Do not use unless you know the underlying data type the pointer points to conforms to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRWLockProtocol"},{"type":"text","text":"."}]}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRWLock\/init(raw:)-3slj2","kind":"symbol","type":"topic","url":"\/documentation\/glib\/staticrwlock\/init(raw:)-3slj2"},"doc://GLib/documentation/GLib/StaticRWLock/init(retainingCPointer:)":{"role":"symbol","title":"init(retainingCPointer:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"externalParam","text":"retainingCPointer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">)"}],"abstract":[{"type":"text","text":"Unsafe typed, retaining initialiser."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Do not use unless you know the underlying data type the pointer points to conforms to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRWLockProtocol"},{"type":"text","text":"."}]}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRWLock\/init(retainingCPointer:)","kind":"symbol","type":"topic","url":"\/documentation\/glib\/staticrwlock\/init(retainingcpointer:)"},"doc://GLib/documentation/GLib/StaticRWLock/init(_:)-3kcsg":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GStaticRWLock"},{"kind":"text","text":">)"}],"abstract":[{"type":"text","text":"Designated initialiser from the underlying "},{"type":"codeVoice","code":"C"},{"type":"text","text":" data type."},{"type":"text","text":" "},{"type":"text","text":"This creates an instance without performing an unbalanced retain"},{"type":"text","text":" "},{"type":"text","text":"i.e., ownership is transferred to the "},{"type":"codeVoice","code":"StaticRWLock"},{"type":"text","text":" instance."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRWLock\/init(_:)-3kcsg","kind":"symbol","type":"topic","url":"\/documentation\/glib\/staticrwlock\/init(_:)-3kcsg"},"doc://GLib/documentation/GLib/StaticRWLock/init(raw:)-7ng5h":{"role":"symbol","title":"init(raw:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"raw"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeRawPointer","preciseIdentifier":"s:SV"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Unsafe untyped initialiser."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Do not use unless you know the underlying data type the pointer points to conforms to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRWLockProtocol"},{"type":"text","text":"."}]}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRWLock\/init(raw:)-7ng5h","kind":"symbol","type":"topic","url":"\/documentation\/glib\/staticrwlock\/init(raw:)-7ng5h"},"doc://GLib/documentation/GLib/StaticRWLock":{"role":"symbol","title":"StaticRWLock","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"StaticRWLock"}],"abstract":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRWLock"},{"type":"text","text":" struct represents a read-write lock. A read-write"},{"type":"text","text":" "},{"type":"text","text":"lock can be used for protecting data that some portions of code only"},{"type":"text","text":" "},{"type":"text","text":"read from, while others also write. In such situations it is"},{"type":"text","text":" "},{"type":"text","text":"desirable that several readers can read at once, whereas of course"},{"type":"text","text":" "},{"type":"text","text":"only one writer may write at a time."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRWLock","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"StaticRWLock"}],"url":"\/documentation\/glib\/staticrwlock"},"doc://GLib/documentation/GLib/StaticRWLock/init(opaquePointer:)":{"role":"symbol","title":"init(opaquePointer:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"opaquePointer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"OpaquePointer","preciseIdentifier":"s:s13OpaquePointerV"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Unsafe untyped initialiser."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Do not use unless you know the underlying data type the pointer points to conforms to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRWLockProtocol"},{"type":"text","text":"."}]}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRWLock\/init(opaquePointer:)","kind":"symbol","type":"topic","url":"\/documentation\/glib\/staticrwlock\/init(opaquepointer:)"},"doc://GLib/documentation/GLib/StaticRWLock/StaticRWLockProtocol-Implementations":{"role":"collectionGroup","title":"StaticRWLockProtocol Implementations","abstract":[],"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRWLock\/StaticRWLockProtocol-Implementations","kind":"article","type":"topic","url":"\/documentation\/glib\/staticrwlock\/staticrwlockprotocol-implementations"},"doc://GLib/documentation/GLib/StaticMutex":{"role":"symbol","title":"StaticMutex","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"StaticMutex"}],"abstract":[{"type":"text","text":"A "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticMutex"},{"type":"text","text":" works like a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Mutex"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticMutex","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"StaticMutex"}],"url":"\/documentation\/glib\/staticmutex"},"doc://GLib/documentation/GLib/StaticRWLock/init(retainingRaw:)-2wn2i":{"role":"symbol","title":"init(retainingRaw:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"retainingRaw"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeRawPointer","preciseIdentifier":"s:SV"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Unsafe untyped, retaining initialiser."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Do not use unless you know the underlying data type the pointer points to conforms to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRWLockProtocol"},{"type":"text","text":"."}]}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRWLock\/init(retainingRaw:)-2wn2i","kind":"symbol","type":"topic","url":"\/documentation\/glib\/staticrwlock\/init(retainingraw:)-2wn2i"},"doc://GLib/documentation/GLib/StaticRWLock/init(_:)-33hto":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"!("},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GStaticRWLock"},{"kind":"text","text":">?)"}],"abstract":[{"type":"text","text":"Optional initialiser from the underlying "},{"type":"codeVoice","code":"C"},{"type":"text","text":" data type."},{"type":"text","text":" "},{"type":"text","text":"This creates an instance without performing an unbalanced retain"},{"type":"text","text":" "},{"type":"text","text":"i.e., ownership is transferred to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRWLock"},{"type":"text","text":" instance."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRWLock\/init(_:)-33hto","kind":"symbol","type":"topic","url":"\/documentation\/glib\/staticrwlock\/init(_:)-33hto"},"doc://GLib/documentation/GLib/StaticRWLock/init(_:)-3zz8s":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Reference intialiser for a related type that implements "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRWLockProtocol"},{"type":"text","text":" "},{"type":"codeVoice","code":"GStaticRWLock"},{"type":"text","text":" does not allow reference counting."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRWLock\/init(_:)-3zz8s","kind":"symbol","type":"topic","url":"\/documentation\/glib\/staticrwlock\/init(_:)-3zz8s"}}}