{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"asciiStringToUnsigned"},{"kind":"text","text":"("},{"kind":"externalParam","text":"str"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"gchar","preciseIdentifier":"c:@T@gchar"},{"kind":"text","text":">!, "},{"kind":"externalParam","text":"base"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":", "},{"kind":"externalParam","text":"min"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"guint64","preciseIdentifier":"c:@T@guint64"},{"kind":"text","text":", "},{"kind":"externalParam","text":"max"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"guint64","preciseIdentifier":"c:@T@guint64"},{"kind":"text","text":", "},{"kind":"externalParam","text":"outNum"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"guint64","preciseIdentifier":"c:@T@guint64"},{"kind":"text","text":">! = nil) "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function assumes that "},{"type":"codeVoice","code":"str"},{"type":"text","text":" contains only a number of the given"},{"type":"text","text":" "},{"type":"codeVoice","code":"base"},{"type":"text","text":" that is within inclusive bounds limited by "},{"type":"codeVoice","code":"min"},{"type":"text","text":" and "},{"type":"codeVoice","code":"max"},{"type":"text","text":". If"},{"type":"text","text":" "},{"type":"text","text":"this is true, then the converted number is stored in "},{"type":"codeVoice","code":"outNum"},{"type":"text","text":". An"},{"type":"text","text":" "},{"type":"text","text":"empty string is not a valid input. A string with leading or"},{"type":"text","text":" "},{"type":"text","text":"trailing whitespace is also an invalid input. A string with a leading sign"},{"type":"text","text":" "},{"type":"text","text":"("},{"type":"codeVoice","code":"-"},{"type":"text","text":" or "},{"type":"codeVoice","code":"+"},{"type":"text","text":") is not a valid input for the unsigned parser."}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"base"},{"type":"text","text":" can be between 2 and 36 inclusive. Hexadecimal numbers must"},{"type":"text","text":" "},{"type":"text","text":"not be prefixed with “0x” or “0X”. Such a problem does not exist"},{"type":"text","text":" "},{"type":"text","text":"for octal numbers, since they were usually prefixed with a zero"},{"type":"text","text":" "},{"type":"text","text":"which does not change the value of the parsed number."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Parsing failures result in an error with the "},{"type":"codeVoice","code":"G_NUMBER_PARSER_ERROR"},{"type":"text","text":" "},{"type":"text","text":"domain. If the input is invalid, the error code will be"},{"type":"text","text":" "},{"type":"text","text":"[error"},{"type":"codeVoice","code":"GLib.NumberParserError.INVALID"},{"type":"text","text":"]. If the parsed number is out of"},{"type":"text","text":" "},{"type":"text","text":"bounds - [error"},{"type":"codeVoice","code":"GLib.NumberParserError.OUT_OF_BOUNDS"},{"type":"text","text":"]."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"See [func"},{"type":"codeVoice","code":"GLib.ascii_strtoull"},{"type":"text","text":"] if you have more complex needs such as"},{"type":"text","text":" "},{"type":"text","text":"parsing a string which starts with a number, but then has other"},{"type":"text","text":" "},{"type":"text","text":"characters."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/glib\/asciistringtounsigned(str:base:min:max:outnum:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/GLib\/documentation\/GLib\/asciiStringToUnsigned(str:base:min:max:outNum:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"A convenience function for converting a string to an unsigned number."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"asciiStringToUnsigned"},{"kind":"text","text":"("},{"kind":"externalParam","text":"str"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"gchar","preciseIdentifier":"c:@T@gchar"},{"kind":"text","text":">!, "},{"kind":"externalParam","text":"base"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":", "},{"kind":"externalParam","text":"min"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"guint64","preciseIdentifier":"c:@T@guint64"},{"kind":"text","text":", "},{"kind":"externalParam","text":"max"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"guint64","preciseIdentifier":"c:@T@guint64"},{"kind":"text","text":", "},{"kind":"externalParam","text":"outNum"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"guint64","preciseIdentifier":"c:@T@guint64"},{"kind":"text","text":">!) "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"title":"asciiStringToUnsigned(str:base:min:max:outNum:)","roleHeading":"Function","role":"symbol","symbolKind":"func","externalID":"s:4GLib21asciiStringToUnsigned3str4base3min3max6outNumSbSPys4Int8VGSg_Sis6UInt64VAMSpyAMGSgtKF","modules":[{"name":"GLib"}]},"hierarchy":{"paths":[["doc:\/\/GLib\/documentation\/GLib"]]},"references":{"doc://GLib/documentation/GLib/asciiStringToUnsigned(str:base:min:max:outNum:)":{"role":"symbol","title":"asciiStringToUnsigned(str:base:min:max:outNum:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"asciiStringToUnsigned"},{"kind":"text","text":"("},{"kind":"externalParam","text":"str"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"gchar","preciseIdentifier":"c:@T@gchar"},{"kind":"text","text":">!, "},{"kind":"externalParam","text":"base"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":", "},{"kind":"externalParam","text":"min"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"guint64","preciseIdentifier":"c:@T@guint64"},{"kind":"text","text":", "},{"kind":"externalParam","text":"max"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"guint64","preciseIdentifier":"c:@T@guint64"},{"kind":"text","text":", "},{"kind":"externalParam","text":"outNum"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"guint64","preciseIdentifier":"c:@T@guint64"},{"kind":"text","text":">!) "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"abstract":[{"type":"text","text":"A convenience function for converting a string to an unsigned number."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/asciiStringToUnsigned(str:base:min:max:outNum:)","kind":"symbol","type":"topic","url":"\/documentation\/glib\/asciistringtounsigned(str:base:min:max:outnum:)"},"doc://GLib/documentation/GLib":{"role":"collection","title":"GLib","abstract":[],"identifier":"doc:\/\/GLib\/documentation\/GLib","kind":"symbol","type":"topic","url":"\/documentation\/glib"}}}