{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"pushThreadDefault"},{"kind":"text","text":"()"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Normally you would call this function shortly after creating a new"},{"type":"text","text":" "},{"type":"text","text":"thread, passing it a [struct"},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/MainContext"},{"type":"text","text":"] which will be run by a"},{"type":"text","text":" "},{"type":"text","text":"[struct"},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/MainLoop"},{"type":"text","text":"] in that thread, to set a new default context for all"},{"type":"text","text":" "},{"type":"text","text":"async operations in that thread. In this case you may not need to"},{"type":"text","text":" "},{"type":"text","text":"ever call [method"},{"type":"codeVoice","code":"GLib.MainContext.pop_thread_default"},{"type":"text","text":"], assuming you want"},{"type":"text","text":" "},{"type":"text","text":"the new [struct"},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/MainContext"},{"type":"text","text":"] to be the default for the whole lifecycle"},{"type":"text","text":" "},{"type":"text","text":"of the thread."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you don’t have control over how the new thread was created (e.g."},{"type":"text","text":" "},{"type":"text","text":"in the new thread isn’t newly created, or if the thread life"},{"type":"text","text":" "},{"type":"text","text":"cycle is managed by a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/ThreadPool"},{"type":"text","text":"), it is always suggested to wrap"},{"type":"text","text":" "},{"type":"text","text":"the logic that needs to use the new [struct"},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/MainContext"},{"type":"text","text":"] inside a"},{"type":"text","text":" "},{"type":"text","text":"[method"},{"type":"codeVoice","code":"GLib.MainContext.push_thread_default"},{"type":"text","text":"] \/"},{"type":"text","text":" "},{"type":"text","text":"[method"},{"type":"codeVoice","code":"GLib.MainContext.pop_thread_default"},{"type":"text","text":"] pair, otherwise threads that"},{"type":"text","text":" "},{"type":"text","text":"are re-used will end up never explicitly releasing the"},{"type":"text","text":" "},{"type":"text","text":"[struct"},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/MainContext"},{"type":"text","text":"] reference they hold."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In some cases you may want to schedule a single operation in a"},{"type":"text","text":" "},{"type":"text","text":"non-default context, or temporarily use a non-default context in"},{"type":"text","text":" "},{"type":"text","text":"the main thread. In that case, you can wrap the call to the"},{"type":"text","text":" "},{"type":"text","text":"asynchronous operation inside a"},{"type":"text","text":" "},{"type":"text","text":"[method"},{"type":"codeVoice","code":"GLib.MainContext.push_thread_default"},{"type":"text","text":"] \/"},{"type":"text","text":" "},{"type":"text","text":"[method"},{"type":"codeVoice","code":"GLib.MainContext.pop_thread_default"},{"type":"text","text":"] pair, but it is up to you to"},{"type":"text","text":" "},{"type":"text","text":"ensure that no other asynchronous operations accidentally get"},{"type":"text","text":" "},{"type":"text","text":"started while the non-default context is active."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Beware that libraries that predate this function may not correctly"},{"type":"text","text":" "},{"type":"text","text":"handle being used from a thread with a thread-default context. Eg,"},{"type":"text","text":" "},{"type":"text","text":"see "},{"type":"codeVoice","code":"g_file_supports_thread_contexts()"},{"type":"text","text":"."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/glib\/maincontext\/pushthreaddefault()"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/GLib\/documentation\/GLib\/MainContext\/pushThreadDefault()","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Acquires "},{"type":"codeVoice","code":"context"},{"type":"text","text":" and sets it as the thread-default context for the"},{"type":"text","text":" "},{"type":"text","text":"current thread. This will cause certain asynchronous operations"},{"type":"text","text":" "},{"type":"text","text":"(such as most "},{"type":"reference","isActive":true,"identifier":"#gio"},{"type":"text","text":"-based I\/O) which are"},{"type":"text","text":" "},{"type":"text","text":"started in this thread to run under "},{"type":"codeVoice","code":"context"},{"type":"text","text":" and deliver their"},{"type":"text","text":" "},{"type":"text","text":"results to its main loop, rather than running under the global"},{"type":"text","text":" "},{"type":"text","text":"default main context in the main thread. Note that calling this function"},{"type":"text","text":" "},{"type":"text","text":"changes the context returned by [func"},{"type":"codeVoice","code":"GLib.MainContext.get_thread_default"},{"type":"text","text":"],"},{"type":"text","text":" "},{"type":"text","text":"not the one returned by [func"},{"type":"codeVoice","code":"GLib.MainContext.default"},{"type":"text","text":"], so it does not"},{"type":"text","text":" "},{"type":"text","text":"affect the context used by functions like [func"},{"type":"codeVoice","code":"GLib.idle_add"},{"type":"text","text":"]."}],"kind":"symbol","metadata":{"role":"symbol","title":"pushThreadDefault()","roleHeading":"Instance Method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"pushThreadDefault"},{"kind":"text","text":"()"}],"symbolKind":"method","externalID":"s:4GLib19MainContextProtocolPAAE17pushThreadDefaultyyF::SYNTHESIZED::s:4GLib11MainContextC","extendedModule":"GLib","modules":[{"name":"GLib"}]},"hierarchy":{"paths":[["doc:\/\/GLib\/documentation\/GLib","doc:\/\/GLib\/documentation\/GLib\/MainContext","doc:\/\/GLib\/documentation\/GLib\/MainContext\/MainContextProtocol-Implementations"]]},"references":{"doc://GLib/documentation/GLib/MainContext/MainContextProtocol-Implementations":{"role":"collectionGroup","title":"MainContextProtocol Implementations","abstract":[],"identifier":"doc:\/\/GLib\/documentation\/GLib\/MainContext\/MainContextProtocol-Implementations","kind":"article","type":"topic","url":"\/documentation\/glib\/maincontext\/maincontextprotocol-implementations"},"doc://GLib/documentation/GLib/MainContext/pushThreadDefault()":{"role":"symbol","title":"pushThreadDefault()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"pushThreadDefault"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Acquires "},{"type":"codeVoice","code":"context"},{"type":"text","text":" and sets it as the thread-default context for the"},{"type":"text","text":" "},{"type":"text","text":"current thread. This will cause certain asynchronous operations"},{"type":"text","text":" "},{"type":"text","text":"(such as most "},{"type":"reference","isActive":true,"identifier":"#gio"},{"type":"text","text":"-based I\/O) which are"},{"type":"text","text":" "},{"type":"text","text":"started in this thread to run under "},{"type":"codeVoice","code":"context"},{"type":"text","text":" and deliver their"},{"type":"text","text":" "},{"type":"text","text":"results to its main loop, rather than running under the global"},{"type":"text","text":" "},{"type":"text","text":"default main context in the main thread. Note that calling this function"},{"type":"text","text":" "},{"type":"text","text":"changes the context returned by [func"},{"type":"codeVoice","code":"GLib.MainContext.get_thread_default"},{"type":"text","text":"],"},{"type":"text","text":" "},{"type":"text","text":"not the one returned by [func"},{"type":"codeVoice","code":"GLib.MainContext.default"},{"type":"text","text":"], so it does not"},{"type":"text","text":" "},{"type":"text","text":"affect the context used by functions like [func"},{"type":"codeVoice","code":"GLib.idle_add"},{"type":"text","text":"]."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/MainContext\/pushThreadDefault()","kind":"symbol","type":"topic","url":"\/documentation\/glib\/maincontext\/pushthreaddefault()"},"doc://GLib/documentation/GLib/MainLoop":{"role":"symbol","title":"MainLoop","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"MainLoop"}],"abstract":[{"type":"text","text":"The "},{"type":"codeVoice","code":"GMainLoop"},{"type":"text","text":" struct is an opaque data type"},{"type":"text","text":" "},{"type":"text","text":"representing the main event loop of a GLib or GTK application."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/MainLoop","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"MainLoop"}],"url":"\/documentation\/glib\/mainloop"},"#gio":{"title":"gio","titleInlineContent":[{"type":"text","text":"gio"}],"type":"link","identifier":"#gio","url":"#gio"},"doc://GLib/documentation/GLib/ThreadPool":{"role":"symbol","title":"ThreadPool","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ThreadPool"}],"abstract":[{"type":"text","text":"The "},{"type":"codeVoice","code":"GThreadPool"},{"type":"text","text":" struct represents a thread pool."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/ThreadPool","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ThreadPool"}],"url":"\/documentation\/glib\/threadpool"},"doc://GLib/documentation/GLib/MainContext":{"role":"symbol","title":"MainContext","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"MainContext"}],"abstract":[{"type":"text","text":"The "},{"type":"codeVoice","code":"GMainContext"},{"type":"text","text":" struct is an opaque data"},{"type":"text","text":" "},{"type":"text","text":"type representing a set of sources to be handled in a main loop."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/MainContext","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"MainContext"}],"url":"\/documentation\/glib\/maincontext"},"doc://GLib/documentation/GLib":{"role":"collection","title":"GLib","abstract":[],"identifier":"doc:\/\/GLib\/documentation\/GLib","kind":"symbol","type":"topic","url":"\/documentation\/glib"}}}