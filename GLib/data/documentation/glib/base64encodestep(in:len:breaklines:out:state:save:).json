{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"base64EncodeStep"},{"kind":"text","text":"("},{"kind":"externalParam","text":"in"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"guchar","preciseIdentifier":"c:@T@guchar"},{"kind":"text","text":">!, "},{"kind":"externalParam","text":"len"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":", "},{"kind":"externalParam","text":"breakLines"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":", "},{"kind":"externalParam","text":"out"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"gchar","preciseIdentifier":"c:@T@gchar"},{"kind":"text","text":">!, "},{"kind":"externalParam","text":"state"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"gint","preciseIdentifier":"c:@T@gint"},{"kind":"text","text":">!, "},{"kind":"externalParam","text":"save"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"gint","preciseIdentifier":"c:@T@gint"},{"kind":"text","text":">!) -> "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When all of the data has been converted you must call"},{"type":"text","text":" "},{"type":"codeVoice","code":"g_base64_encode_close()"},{"type":"text","text":" to flush the saved state."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The output buffer must be large enough to fit all the data that will"},{"type":"text","text":" "},{"type":"text","text":"be written to it. Due to the way base64 encodes you will need"},{"type":"text","text":" "},{"type":"text","text":"at least: ("},{"type":"codeVoice","code":"len"},{"type":"text","text":" \/ 3 + 1) * 4 + 4 bytes (+ 4 may be needed in case of"},{"type":"text","text":" "},{"type":"text","text":"non-zero state). If you enable line-breaking you will need at least:"},{"type":"text","text":" "},{"type":"text","text":"(("},{"type":"codeVoice","code":"len"},{"type":"text","text":" \/ 3 + 1) * 4 + 4) \/ 76 + 1 bytes of extra space."}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"breakLines"},{"type":"text","text":" is typically used when putting base64-encoded data in emails."},{"type":"text","text":" "},{"type":"text","text":"It breaks the lines at 76 columns instead of putting all of the text on"},{"type":"text","text":" "},{"type":"text","text":"the same line. This avoids problems with long lines in the email system."},{"type":"text","text":" "},{"type":"text","text":"Note however that it breaks the lines with "},{"type":"codeVoice","code":"LF"},{"type":"text","text":" characters, not"},{"type":"text","text":" "},{"type":"codeVoice","code":"CR LF"},{"type":"text","text":" sequences, so the result cannot be passed directly to SMTP"},{"type":"text","text":" "},{"type":"text","text":"or certain other protocols."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/glib\/base64encodestep(in:len:breaklines:out:state:save:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/GLib\/documentation\/GLib\/base64EncodeStep(in:len:breakLines:out:state:save:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Incrementally encode a sequence of binary data into its Base-64 stringified"},{"type":"text","text":" "},{"type":"text","text":"representation. By calling this function multiple times you can convert"},{"type":"text","text":" "},{"type":"text","text":"data in chunks to avoid having to have the full encoded data in memory."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"base64EncodeStep"},{"kind":"text","text":"("},{"kind":"externalParam","text":"in"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"guchar","preciseIdentifier":"c:@T@guchar"},{"kind":"text","text":">!, "},{"kind":"externalParam","text":"len"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":", "},{"kind":"externalParam","text":"breakLines"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":", "},{"kind":"externalParam","text":"out"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"gchar","preciseIdentifier":"c:@T@gchar"},{"kind":"text","text":">!, "},{"kind":"externalParam","text":"state"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"gint","preciseIdentifier":"c:@T@gint"},{"kind":"text","text":">!, "},{"kind":"externalParam","text":"save"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"gint","preciseIdentifier":"c:@T@gint"},{"kind":"text","text":">!) -> "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"}],"title":"base64EncodeStep(in:len:breakLines:out:state:save:)","roleHeading":"Function","role":"symbol","symbolKind":"func","externalID":"s:4GLib16base64EncodeStep2in3len10breakLines3out5state4saveSiSPys5UInt8VGSg_SiSbSpys4Int8VGSgSpys5Int32VGSgATtF","modules":[{"name":"GLib"}]},"hierarchy":{"paths":[["doc:\/\/GLib\/documentation\/GLib"]]},"references":{"doc://GLib/documentation/GLib/base64EncodeStep(in:len:breakLines:out:state:save:)":{"role":"symbol","title":"base64EncodeStep(in:len:breakLines:out:state:save:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"base64EncodeStep"},{"kind":"text","text":"("},{"kind":"externalParam","text":"in"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"guchar","preciseIdentifier":"c:@T@guchar"},{"kind":"text","text":">!, "},{"kind":"externalParam","text":"len"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":", "},{"kind":"externalParam","text":"breakLines"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":", "},{"kind":"externalParam","text":"out"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"gchar","preciseIdentifier":"c:@T@gchar"},{"kind":"text","text":">!, "},{"kind":"externalParam","text":"state"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"gint","preciseIdentifier":"c:@T@gint"},{"kind":"text","text":">!, "},{"kind":"externalParam","text":"save"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"gint","preciseIdentifier":"c:@T@gint"},{"kind":"text","text":">!) -> "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"}],"abstract":[{"type":"text","text":"Incrementally encode a sequence of binary data into its Base-64 stringified"},{"type":"text","text":" "},{"type":"text","text":"representation. By calling this function multiple times you can convert"},{"type":"text","text":" "},{"type":"text","text":"data in chunks to avoid having to have the full encoded data in memory."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/base64EncodeStep(in:len:breakLines:out:state:save:)","kind":"symbol","type":"topic","url":"\/documentation\/glib\/base64encodestep(in:len:breaklines:out:state:save:)"},"doc://GLib/documentation/GLib":{"role":"collection","title":"GLib","abstract":[],"identifier":"doc:\/\/GLib\/documentation\/GLib","kind":"symbol","type":"topic","url":"\/documentation\/glib"}}}