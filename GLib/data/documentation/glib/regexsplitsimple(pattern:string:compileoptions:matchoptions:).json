{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"regexSplitSimple"},{"kind":"text","text":"("},{"kind":"externalParam","text":"pattern"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"gchar","preciseIdentifier":"c:@T@gchar"},{"kind":"text","text":">!, "},{"kind":"externalParam","text":"string"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"gchar","preciseIdentifier":"c:@T@gchar"},{"kind":"text","text":">!, "},{"kind":"externalParam","text":"compileOptions"},{"kind":"text","text":": "},{"kind":"typeIdentifier","identifier":"doc:\/\/GLib\/documentation\/GLib\/RegexCompileFlags","preciseIdentifier":"s:4GLib17RegexCompileFlagsV","text":"RegexCompileFlags"},{"kind":"text","text":", "},{"kind":"externalParam","text":"matchOptions"},{"kind":"text","text":": "},{"kind":"typeIdentifier","identifier":"doc:\/\/GLib\/documentation\/GLib\/RegexMatchFlags","preciseIdentifier":"s:4GLib15RegexMatchFlagsV","text":"RegexMatchFlags"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"gchar","preciseIdentifier":"c:@T@gchar"},{"kind":"text","text":">?>!"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function is equivalent to "},{"type":"codeVoice","code":"g_regex_split()"},{"type":"text","text":" but it does"},{"type":"text","text":" "},{"type":"text","text":"not require to compile the pattern with "},{"type":"codeVoice","code":"g_regex_new()"},{"type":"text","text":", avoiding"},{"type":"text","text":" "},{"type":"text","text":"some lines of code when you need just to do a split without"},{"type":"text","text":" "},{"type":"text","text":"extracting substrings, capture counts, and so on."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If this function is to be called on the same "},{"type":"codeVoice","code":"pattern"},{"type":"text","text":" more than"},{"type":"text","text":" "},{"type":"text","text":"once, it’s more efficient to compile the pattern once with"},{"type":"text","text":" "},{"type":"codeVoice","code":"g_regex_new()"},{"type":"text","text":" and then use "},{"type":"codeVoice","code":"g_regex_split()"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"As a special case, the result of splitting the empty string “”"},{"type":"text","text":" "},{"type":"text","text":"is an empty vector, not a vector containing a single string."},{"type":"text","text":" "},{"type":"text","text":"The reason for this special case is that being able to represent"},{"type":"text","text":" "},{"type":"text","text":"an empty vector is typically more useful than consistent handling"},{"type":"text","text":" "},{"type":"text","text":"of empty elements. If you do need to represent empty elements,"},{"type":"text","text":" "},{"type":"text","text":"you’ll need to check for the empty string before calling this"},{"type":"text","text":" "},{"type":"text","text":"function."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A pattern that can match empty strings splits "},{"type":"codeVoice","code":"string"},{"type":"text","text":" into"},{"type":"text","text":" "},{"type":"text","text":"separate characters wherever it matches the empty string between"},{"type":"text","text":" "},{"type":"text","text":"characters. For example splitting “ab c” using as a separator"},{"type":"text","text":" "},{"type":"text","text":"“\\s*”, you will get “a”, “b” and “c”."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/glib\/regexsplitsimple(pattern:string:compileoptions:matchoptions:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/GLib\/documentation\/GLib\/regexSplitSimple(pattern:string:compileOptions:matchOptions:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Breaks the string on the pattern, and returns an array of"},{"type":"text","text":" "},{"type":"text","text":"the tokens. If the pattern contains capturing parentheses,"},{"type":"text","text":" "},{"type":"text","text":"then the text for each of the substrings will also be returned."},{"type":"text","text":" "},{"type":"text","text":"If the pattern does not match anywhere in the string, then the"},{"type":"text","text":" "},{"type":"text","text":"whole string is returned as the first token."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"regexSplitSimple"},{"kind":"text","text":"("},{"kind":"externalParam","text":"pattern"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"gchar","preciseIdentifier":"c:@T@gchar"},{"kind":"text","text":">!, "},{"kind":"externalParam","text":"string"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"gchar","preciseIdentifier":"c:@T@gchar"},{"kind":"text","text":">!, "},{"kind":"externalParam","text":"compileOptions"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"RegexCompileFlags","preciseIdentifier":"s:4GLib17RegexCompileFlagsV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"matchOptions"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"RegexMatchFlags","preciseIdentifier":"s:4GLib15RegexMatchFlagsV"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"gchar","preciseIdentifier":"c:@T@gchar"},{"kind":"text","text":">?>!"}],"title":"regexSplitSimple(pattern:string:compileOptions:matchOptions:)","roleHeading":"Function","role":"symbol","symbolKind":"func","externalID":"s:4GLib16regexSplitSimple7pattern6string14compileOptions05matchH0SpySpys4Int8VGSgGSgSPyAHGSg_AnA17RegexCompileFlagsVAA0k5MatchM0VtF","modules":[{"name":"GLib"}]},"hierarchy":{"paths":[["doc:\/\/GLib\/documentation\/GLib"]]},"references":{"doc://GLib/documentation/GLib":{"role":"collection","title":"GLib","abstract":[],"identifier":"doc:\/\/GLib\/documentation\/GLib","kind":"symbol","type":"topic","url":"\/documentation\/glib"},"doc://GLib/documentation/GLib/RegexCompileFlags":{"role":"symbol","title":"RegexCompileFlags","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"RegexCompileFlags"}],"abstract":[{"type":"text","text":"Flags specifying compile-time options."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RegexCompileFlags","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"RegexCompileFlags"}],"url":"\/documentation\/glib\/regexcompileflags"},"doc://GLib/documentation/GLib/regexSplitSimple(pattern:string:compileOptions:matchOptions:)":{"role":"symbol","title":"regexSplitSimple(pattern:string:compileOptions:matchOptions:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"regexSplitSimple"},{"kind":"text","text":"("},{"kind":"externalParam","text":"pattern"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"gchar","preciseIdentifier":"c:@T@gchar"},{"kind":"text","text":">!, "},{"kind":"externalParam","text":"string"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"gchar","preciseIdentifier":"c:@T@gchar"},{"kind":"text","text":">!, "},{"kind":"externalParam","text":"compileOptions"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"RegexCompileFlags","preciseIdentifier":"s:4GLib17RegexCompileFlagsV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"matchOptions"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"RegexMatchFlags","preciseIdentifier":"s:4GLib15RegexMatchFlagsV"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"gchar","preciseIdentifier":"c:@T@gchar"},{"kind":"text","text":">?>!"}],"abstract":[{"type":"text","text":"Breaks the string on the pattern, and returns an array of"},{"type":"text","text":" "},{"type":"text","text":"the tokens. If the pattern contains capturing parentheses,"},{"type":"text","text":" "},{"type":"text","text":"then the text for each of the substrings will also be returned."},{"type":"text","text":" "},{"type":"text","text":"If the pattern does not match anywhere in the string, then the"},{"type":"text","text":" "},{"type":"text","text":"whole string is returned as the first token."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/regexSplitSimple(pattern:string:compileOptions:matchOptions:)","kind":"symbol","type":"topic","url":"\/documentation\/glib\/regexsplitsimple(pattern:string:compileoptions:matchoptions:)"},"doc://GLib/documentation/GLib/RegexMatchFlags":{"role":"symbol","title":"RegexMatchFlags","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"RegexMatchFlags"}],"abstract":[{"type":"text","text":"Flags specifying match-time options."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RegexMatchFlags","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"RegexMatchFlags"}],"url":"\/documentation\/glib\/regexmatchflags"}}}