{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"push"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"MarkupParserT"},{"kind":"text","text":">("},{"kind":"externalParam","text":"parser"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"MarkupParserT"},{"kind":"text","text":", "},{"kind":"externalParam","text":"userData"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"gpointer","preciseIdentifier":"c:@T@gpointer"},{"kind":"text","text":"? = nil) "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"MarkupParserT"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","identifier":"doc:\/\/GLib\/documentation\/GLib\/MarkupParserProtocol","preciseIdentifier":"s:4GLib20MarkupParserProtocolP","text":"MarkupParserProtocol"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function may only be called from the start_element handler of"},{"type":"text","text":" "},{"type":"text","text":"a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/MarkupParser"},{"type":"text","text":". It must be matched with a corresponding call to"},{"type":"text","text":" "},{"type":"codeVoice","code":"g_markup_parse_context_pop()"},{"type":"text","text":" in the matching end_element handler"},{"type":"text","text":" "},{"type":"text","text":"(except in the case that the parser aborts due to an error)."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"All tags, text and other data between the matching tags is"},{"type":"text","text":" "},{"type":"text","text":"redirected to the subparser given by "},{"type":"codeVoice","code":"parser"},{"type":"text","text":". "},{"type":"codeVoice","code":"userData"},{"type":"text","text":" is used"},{"type":"text","text":" "},{"type":"text","text":"as the user_data for that parser. "},{"type":"codeVoice","code":"userData"},{"type":"text","text":" is also passed to the"},{"type":"text","text":" "},{"type":"text","text":"error callback in the event that an error occurs. This includes"},{"type":"text","text":" "},{"type":"text","text":"errors that occur in subparsers of the subparser."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The end tag matching the start tag for which this call was made is"},{"type":"text","text":" "},{"type":"text","text":"handled by the previous parser (which is given its own user_data)"},{"type":"text","text":" "},{"type":"text","text":"which is why "},{"type":"codeVoice","code":"g_markup_parse_context_pop()"},{"type":"text","text":" is provided to allow “one"},{"type":"text","text":" "},{"type":"text","text":"last access” to the "},{"type":"codeVoice","code":"userData"},{"type":"text","text":" provided to this function. In the"},{"type":"text","text":" "},{"type":"text","text":"case of error, the "},{"type":"codeVoice","code":"userData"},{"type":"text","text":" provided here is passed directly to"},{"type":"text","text":" "},{"type":"text","text":"the error callback of the subparser and "},{"type":"codeVoice","code":"g_markup_parse_context_pop()"},{"type":"text","text":" "},{"type":"text","text":"should not be called. In either case, if "},{"type":"codeVoice","code":"userData"},{"type":"text","text":" was allocated"},{"type":"text","text":" "},{"type":"text","text":"then it ought to be freed from both of these locations."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function is not intended to be directly called by users"},{"type":"text","text":" "},{"type":"text","text":"interested in invoking subparsers. Instead, it is intended to be"},{"type":"text","text":" "},{"type":"text","text":"used by the subparsers themselves to implement a higher-level"},{"type":"text","text":" "},{"type":"text","text":"interface."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"As an example, see the following implementation of a simple"},{"type":"text","text":" "},{"type":"text","text":"parser that counts the number of tags encountered."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"(C Language Example):"}]},{"type":"codeListing","syntax":"C","code":["typedef struct","{","  gint tag_count;","} CounterData;","","static void","counter_start_element (GMarkupParseContext  *context,","                       const gchar          *element_name,","                       const gchar         **attribute_names,","                       const gchar         **attribute_values,","                       gpointer              user_data,","                       GError              **error)","{","  CounterData *data = user_data;","","  data->tag_count++;","}","","static void","counter_error (GMarkupParseContext *context,","               GError              *error,","               gpointer             user_data)","{","  CounterData *data = user_data;","","  g_slice_free (CounterData, data);","}","","static GMarkupParser counter_subparser =","{","  counter_start_element,","  NULL,","  NULL,","  NULL,","  counter_error","};"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In order to allow this parser to be easily used as a subparser, the"},{"type":"text","text":" "},{"type":"text","text":"following interface is provided:"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"(C Language Example):"}]},{"type":"codeListing","syntax":"C","code":["void","start_counting (GMarkupParseContext *context)","{","  CounterData *data = g_slice_new (CounterData);","","  data->tag_count = 0;","  g_markup_parse_context_push (context, &counter_subparser, data);","}","","gint","end_counting (GMarkupParseContext *context)","{","  CounterData *data = g_markup_parse_context_pop (context);","  int result;","","  result = data->tag_count;","  g_slice_free (CounterData, data);","","  return result;","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The subparser would then be used as follows:"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"(C Language Example):"}]},{"type":"codeListing","syntax":"C","code":["static void start_element (context, element_name, ...)","{","  if (strcmp (element_name, \"count-these\") == 0)","    start_counting (context);","","  \/\/ else, handle other tags...","}","","static void end_element (context, element_name, ...)","{","  if (strcmp (element_name, \"count-these\") == 0)","    g_print (\"Counted %d tags\\n\", end_counting (context));","","  \/\/ else, handle other tags...","}"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/glib\/markupparsecontextref\/push(parser:userdata:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/GLib\/documentation\/GLib\/MarkupParseContextRef\/push(parser:userData:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Temporarily redirects markup data to a sub-parser."}],"kind":"symbol","metadata":{"role":"symbol","title":"push(parser:userData:)","roleHeading":"Instance Method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"push"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"MarkupParserT"},{"kind":"text","text":">("},{"kind":"externalParam","text":"parser"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"MarkupParserT"},{"kind":"text","text":", "},{"kind":"externalParam","text":"userData"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"gpointer","preciseIdentifier":"c:@T@gpointer"},{"kind":"text","text":"?)"}],"symbolKind":"method","externalID":"s:4GLib26MarkupParseContextProtocolPAAE4push6parser8userDatayqd___SvSgtAA0b6ParserE0Rd__lF::SYNTHESIZED::s:4GLib21MarkupParseContextRefV","extendedModule":"GLib","modules":[{"name":"GLib"}]},"hierarchy":{"paths":[["doc:\/\/GLib\/documentation\/GLib","doc:\/\/GLib\/documentation\/GLib\/MarkupParseContextRef","doc:\/\/GLib\/documentation\/GLib\/MarkupParseContextRef\/MarkupParseContextProtocol-Implementations"]]},"references":{"doc://GLib/documentation/GLib/MarkupParseContextRef":{"role":"symbol","title":"MarkupParseContextRef","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"MarkupParseContextRef"}],"abstract":[{"type":"text","text":"A parse context is used to parse a stream of bytes that"},{"type":"text","text":" "},{"type":"text","text":"you expect to contain marked-up text."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/MarkupParseContextRef","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"MarkupParseContextRef"}],"url":"\/documentation\/glib\/markupparsecontextref"},"doc://GLib/documentation/GLib/MarkupParseContextRef/push(parser:userData:)":{"role":"symbol","title":"push(parser:userData:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"push"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"MarkupParserT"},{"kind":"text","text":">("},{"kind":"externalParam","text":"parser"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"MarkupParserT"},{"kind":"text","text":", "},{"kind":"externalParam","text":"userData"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"gpointer","preciseIdentifier":"c:@T@gpointer"},{"kind":"text","text":"?)"}],"abstract":[{"type":"text","text":"Temporarily redirects markup data to a sub-parser."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/MarkupParseContextRef\/push(parser:userData:)","kind":"symbol","type":"topic","url":"\/documentation\/glib\/markupparsecontextref\/push(parser:userdata:)"},"doc://GLib/documentation/GLib/MarkupParseContextRef/MarkupParseContextProtocol-Implementations":{"role":"collectionGroup","title":"MarkupParseContextProtocol Implementations","abstract":[],"identifier":"doc:\/\/GLib\/documentation\/GLib\/MarkupParseContextRef\/MarkupParseContextProtocol-Implementations","kind":"article","type":"topic","url":"\/documentation\/glib\/markupparsecontextref\/markupparsecontextprotocol-implementations"},"doc://GLib/documentation/GLib/MarkupParserProtocol":{"role":"symbol","title":"MarkupParserProtocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"MarkupParserProtocol"}],"abstract":[{"type":"text","text":"Any of the fields in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/MarkupParser"},{"type":"text","text":" can be "},{"type":"codeVoice","code":"nil"},{"type":"text","text":", in which case they"},{"type":"text","text":" "},{"type":"text","text":"will be ignored. Except for the "},{"type":"codeVoice","code":"error"},{"type":"text","text":" function, any of these callbacks"},{"type":"text","text":" "},{"type":"text","text":"can set an error; in particular the "},{"type":"codeVoice","code":"unknownElement"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"unknownAttribute"},{"type":"text","text":", and "},{"type":"codeVoice","code":"invalidContent"},{"type":"text","text":" "},{"type":"text","text":"errors are intended to be set from these callbacks. If you set an error"},{"type":"text","text":" "},{"type":"text","text":"from a callback, "},{"type":"codeVoice","code":"g_markup_parse_context_parse()"},{"type":"text","text":" will report that error"},{"type":"text","text":" "},{"type":"text","text":"back to its caller."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/MarkupParserProtocol","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"MarkupParserProtocol"}],"url":"\/documentation\/glib\/markupparserprotocol"},"doc://GLib/documentation/GLib":{"role":"collection","title":"GLib","abstract":[],"identifier":"doc:\/\/GLib\/documentation\/GLib","kind":"symbol","type":"topic","url":"\/documentation\/glib"},"doc://GLib/documentation/GLib/MarkupParser":{"role":"symbol","title":"MarkupParser","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"MarkupParser"}],"abstract":[{"type":"text","text":"Any of the fields in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/MarkupParser"},{"type":"text","text":" can be "},{"type":"codeVoice","code":"nil"},{"type":"text","text":", in which case they"},{"type":"text","text":" "},{"type":"text","text":"will be ignored. Except for the "},{"type":"codeVoice","code":"error"},{"type":"text","text":" function, any of these callbacks"},{"type":"text","text":" "},{"type":"text","text":"can set an error; in particular the "},{"type":"codeVoice","code":"unknownElement"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"unknownAttribute"},{"type":"text","text":", and "},{"type":"codeVoice","code":"invalidContent"},{"type":"text","text":" "},{"type":"text","text":"errors are intended to be set from these callbacks. If you set an error"},{"type":"text","text":" "},{"type":"text","text":"from a callback, "},{"type":"codeVoice","code":"g_markup_parse_context_parse()"},{"type":"text","text":" will report that error"},{"type":"text","text":" "},{"type":"text","text":"back to its caller."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/MarkupParser","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"MarkupParser"}],"url":"\/documentation\/glib\/markupparser"}}}