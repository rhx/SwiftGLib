{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"MutexProtocol"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","identifier":"doc:\/\/GLib\/documentation\/GLib\/PointerWrapper","preciseIdentifier":"s:4GLib14PointerWrapperP","text":"PointerWrapper"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Take for example the following function:"},{"type":"text","text":" "},{"type":"text","text":"(C Language Example):"}]},{"type":"codeListing","syntax":"C","code":["  int","  give_me_next_number (void)","  {","    static int current_number = 0;","","    \/\/ now do a very complicated calculation to calculate the new","    \/\/ number, this might for example be a random number generator","    current_number = calc_next_number (current_number);","","    return current_number;","  }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It is easy to see that this wonâ€™t work in a multi-threaded"},{"type":"text","text":" "},{"type":"text","text":"application. There current_number must be protected against shared"},{"type":"text","text":" "},{"type":"text","text":"access. A "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Mutex"},{"type":"text","text":" can be used as a solution to this problem:"},{"type":"text","text":" "},{"type":"text","text":"(C Language Example):"}]},{"type":"codeListing","syntax":"C","code":["  int","  give_me_next_number (void)","  {","    static GMutex mutex;","    static int current_number = 0;","    int ret_val;","","    g_mutex_lock (&mutex);","    ret_val = current_number = calc_next_number (current_number);","    g_mutex_unlock (&mutex);","","    return ret_val;","  }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Notice that the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Mutex"},{"type":"text","text":" is not initialised to any particular value."},{"type":"text","text":" "},{"type":"text","text":"Its placement in static storage ensures that it will be initialised"},{"type":"text","text":" "},{"type":"text","text":"to all-zeros, which is appropriate."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Mutex"},{"type":"text","text":" is placed in other contexts (eg: embedded in a struct)"},{"type":"text","text":" "},{"type":"text","text":"then it must be explicitly initialised using "},{"type":"codeVoice","code":"g_mutex_init()"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Mutex"},{"type":"text","text":" should only be accessed via g_mutex_ functions."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/MutexProtocol"},{"type":"text","text":" protocol exposes the methods and properties of an underlying "},{"type":"codeVoice","code":"GMutex"},{"type":"text","text":" instance."},{"type":"text","text":" "},{"type":"text","text":"The default implementation of these can be found in the protocol extension below."},{"type":"text","text":" "},{"type":"text","text":"For a concrete class that implements these methods and properties, see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Mutex"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Alternatively, use "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/MutexRef"},{"type":"text","text":" as a lighweight, "},{"type":"codeVoice","code":"unowned"},{"type":"text","text":" reference if you already have an instance you just want to use."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/glib\/mutexprotocol"],"traits":[{"interfaceLanguage":"swift"}]}],"relationshipsSections":[{"identifiers":["doc:\/\/GLib\/documentation\/GLib\/PointerWrapper"],"kind":"relationships","title":"Inherits From","type":"inheritsFrom"},{"identifiers":["doc:\/\/GLib\/documentation\/GLib\/Mutex","doc:\/\/GLib\/documentation\/GLib\/MutexRef"],"kind":"relationships","title":"Conforming Types","type":"conformingTypes"}],"identifier":{"url":"doc:\/\/GLib\/documentation\/GLib\/MutexProtocol","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Mutex"},{"type":"text","text":" struct is an opaque data structure to represent a mutex"},{"type":"text","text":" "},{"type":"text","text":"(mutual exclusion). It can be used to protect data against shared"},{"type":"text","text":" "},{"type":"text","text":"access."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"MutexProtocol"}],"title":"MutexProtocol","roleHeading":"Protocol","role":"symbol","symbolKind":"protocol","externalID":"s:4GLib13MutexProtocolP","modules":[{"name":"GLib"}],"navigatorTitle":[{"kind":"identifier","text":"MutexProtocol"}]},"hierarchy":{"paths":[["doc:\/\/GLib\/documentation\/GLib"]]},"topicSections":[{"title":"Instance Methods","identifiers":["doc:\/\/GLib\/documentation\/GLib\/MutexProtocol\/clear()","doc:\/\/GLib\/documentation\/GLib\/MutexProtocol\/free()","doc:\/\/GLib\/documentation\/GLib\/MutexProtocol\/init_()","doc:\/\/GLib\/documentation\/GLib\/MutexProtocol\/lock()","doc:\/\/GLib\/documentation\/GLib\/MutexProtocol\/trylock()","doc:\/\/GLib\/documentation\/GLib\/MutexProtocol\/unlock()"]}],"references":{"doc://GLib/documentation/GLib/MutexRef":{"role":"symbol","title":"MutexRef","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"MutexRef"}],"abstract":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Mutex"},{"type":"text","text":" struct is an opaque data structure to represent a mutex"},{"type":"text","text":" "},{"type":"text","text":"(mutual exclusion). It can be used to protect data against shared"},{"type":"text","text":" "},{"type":"text","text":"access."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/MutexRef","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"MutexRef"}],"url":"\/documentation\/glib\/mutexref"},"doc://GLib/documentation/GLib/MutexProtocol/unlock()":{"role":"symbol","title":"unlock()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"unlock"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Unlocks "},{"type":"codeVoice","code":"mutex"},{"type":"text","text":". If another thread is blocked in a "},{"type":"codeVoice","code":"g_mutex_lock()"},{"type":"text","text":" "},{"type":"text","text":"call for "},{"type":"codeVoice","code":"mutex"},{"type":"text","text":", it will become unblocked and can lock "},{"type":"codeVoice","code":"mutex"},{"type":"text","text":" itself."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/MutexProtocol\/unlock()","kind":"symbol","type":"topic","url":"\/documentation\/glib\/mutexprotocol\/unlock()"},"doc://GLib/documentation/GLib/MutexProtocol/clear()":{"role":"symbol","title":"clear()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"clear"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Frees the resources allocated to a mutex with "},{"type":"codeVoice","code":"g_mutex_init()"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/MutexProtocol\/clear()","kind":"symbol","type":"topic","url":"\/documentation\/glib\/mutexprotocol\/clear()"},"doc://GLib/documentation/GLib/MutexProtocol/free()":{"role":"symbol","title":"free()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"free"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Destroys a "},{"type":"codeVoice","code":"mutex"},{"type":"text","text":" that has been created with "},{"type":"codeVoice","code":"g_mutex_new()"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/MutexProtocol\/free()","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/glib\/mutexprotocol\/free()"},"doc://GLib/documentation/GLib/MutexProtocol/trylock()":{"role":"symbol","title":"trylock()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"trylock"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"abstract":[{"type":"text","text":"Tries to lock "},{"type":"codeVoice","code":"mutex"},{"type":"text","text":". If "},{"type":"codeVoice","code":"mutex"},{"type":"text","text":" is already locked by another thread,"},{"type":"text","text":" "},{"type":"text","text":"it immediately returns "},{"type":"codeVoice","code":"false"},{"type":"text","text":". Otherwise it locks "},{"type":"codeVoice","code":"mutex"},{"type":"text","text":" and returns"},{"type":"text","text":" "},{"type":"codeVoice","code":"true"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/MutexProtocol\/trylock()","kind":"symbol","type":"topic","url":"\/documentation\/glib\/mutexprotocol\/trylock()"},"doc://GLib/documentation/GLib/MutexProtocol/init_()":{"role":"symbol","title":"init_()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"init_"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Initializes a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Mutex"},{"type":"text","text":" so that it can be used."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/MutexProtocol\/init_()","kind":"symbol","type":"topic","url":"\/documentation\/glib\/mutexprotocol\/init_()"},"doc://GLib/documentation/GLib/MutexProtocol":{"role":"symbol","title":"MutexProtocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"MutexProtocol"}],"abstract":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Mutex"},{"type":"text","text":" struct is an opaque data structure to represent a mutex"},{"type":"text","text":" "},{"type":"text","text":"(mutual exclusion). It can be used to protect data against shared"},{"type":"text","text":" "},{"type":"text","text":"access."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/MutexProtocol","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"MutexProtocol"}],"url":"\/documentation\/glib\/mutexprotocol"},"doc://GLib/documentation/GLib/MutexProtocol/lock()":{"role":"symbol","title":"lock()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"lock"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Locks "},{"type":"codeVoice","code":"mutex"},{"type":"text","text":". If "},{"type":"codeVoice","code":"mutex"},{"type":"text","text":" is already locked by another thread, the"},{"type":"text","text":" "},{"type":"text","text":"current thread will block until "},{"type":"codeVoice","code":"mutex"},{"type":"text","text":" is unlocked by the other"},{"type":"text","text":" "},{"type":"text","text":"thread."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/MutexProtocol\/lock()","kind":"symbol","type":"topic","url":"\/documentation\/glib\/mutexprotocol\/lock()"},"doc://GLib/documentation/GLib/Mutex":{"role":"symbol","title":"Mutex","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Mutex"}],"abstract":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Mutex"},{"type":"text","text":" struct is an opaque data structure to represent a mutex"},{"type":"text","text":" "},{"type":"text","text":"(mutual exclusion). It can be used to protect data against shared"},{"type":"text","text":" "},{"type":"text","text":"access."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/Mutex","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Mutex"}],"url":"\/documentation\/glib\/mutex"},"doc://GLib/documentation/GLib":{"role":"collection","title":"GLib","abstract":[],"identifier":"doc:\/\/GLib\/documentation\/GLib","kind":"symbol","type":"topic","url":"\/documentation\/glib"},"doc://GLib/documentation/GLib/PointerWrapper":{"role":"symbol","title":"PointerWrapper","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"PointerWrapper"}],"abstract":[{"type":"text","text":"Protocol for GLib types that wrap pointers."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/PointerWrapper","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"PointerWrapper"}],"url":"\/documentation\/glib\/pointerwrapper"}}}