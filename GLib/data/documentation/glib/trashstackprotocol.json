{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"TrashStackProtocol"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","identifier":"doc:\/\/GLib\/documentation\/GLib\/PointerWrapper","preciseIdentifier":"s:4GLib14PointerWrapperP","text":"PointerWrapper"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"There is no function to create a "},{"type":"codeVoice","code":"GTrashStack"},{"type":"text","text":". A "},{"type":"codeVoice","code":"NULL"},{"type":"text","text":" "},{"type":"codeVoice","code":"GTrashStack*"},{"type":"text","text":" "},{"type":"text","text":"is a perfectly valid empty stack."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Each piece of memory that is pushed onto the stack is cast to a"},{"type":"text","text":" "},{"type":"codeVoice","code":"GTrashStack*"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"There is no longer any good reason to use "},{"type":"codeVoice","code":"GTrashStack"},{"type":"text","text":".  If you have"},{"type":"text","text":" "},{"type":"text","text":"extra pieces of memory, "},{"type":"codeVoice","code":"free()"},{"type":"text","text":" them and allocate them again later."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/TrashStackProtocol"},{"type":"text","text":" protocol exposes the methods and properties of an underlying "},{"type":"codeVoice","code":"GTrashStack"},{"type":"text","text":" instance."},{"type":"text","text":" "},{"type":"text","text":"The default implementation of these can be found in the protocol extension below."},{"type":"text","text":" "},{"type":"text","text":"For a concrete class that implements these methods and properties, see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/TrashStack"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Alternatively, use "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/TrashStackRef"},{"type":"text","text":" as a lighweight, "},{"type":"codeVoice","code":"unowned"},{"type":"text","text":" reference if you already have an instance you just want to use."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/glib\/trashstackprotocol"],"traits":[{"interfaceLanguage":"swift"}]}],"relationshipsSections":[{"identifiers":["doc:\/\/GLib\/documentation\/GLib\/PointerWrapper"],"kind":"relationships","title":"Inherits From","type":"inheritsFrom"},{"identifiers":["doc:\/\/GLib\/documentation\/GLib\/TrashStack","doc:\/\/GLib\/documentation\/GLib\/TrashStackRef"],"kind":"relationships","title":"Conforming Types","type":"conformingTypes"}],"identifier":{"url":"doc:\/\/GLib\/documentation\/GLib\/TrashStackProtocol","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"GTrashStack"},{"type":"text","text":" is an efficient way to keep a stack of unused allocated"},{"type":"text","text":" "},{"type":"text","text":"memory chunks. Each memory chunk is required to be large enough to hold"},{"type":"text","text":" "},{"type":"text","text":"a "},{"type":"codeVoice","code":"gpointer"},{"type":"text","text":". This allows the stack to be maintained without any space"},{"type":"text","text":" "},{"type":"text","text":"overhead, since the stack pointers can be stored inside the memory chunks."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"TrashStackProtocol"}],"title":"TrashStackProtocol","roleHeading":"Protocol","role":"symbol","symbolKind":"protocol","externalID":"s:4GLib18TrashStackProtocolP","modules":[{"name":"GLib"}],"navigatorTitle":[{"kind":"identifier","text":"TrashStackProtocol"}]},"hierarchy":{"paths":[["doc:\/\/GLib\/documentation\/GLib"]]},"topicSections":[{"title":"Instance Properties","identifiers":["doc:\/\/GLib\/documentation\/GLib\/TrashStackProtocol\/next"]}],"references":{"doc://GLib/documentation/GLib/TrashStackProtocol":{"role":"symbol","title":"TrashStackProtocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"TrashStackProtocol"}],"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"GTrashStack"},{"type":"text","text":" is an efficient way to keep a stack of unused allocated"},{"type":"text","text":" "},{"type":"text","text":"memory chunks. Each memory chunk is required to be large enough to hold"},{"type":"text","text":" "},{"type":"text","text":"a "},{"type":"codeVoice","code":"gpointer"},{"type":"text","text":". This allows the stack to be maintained without any space"},{"type":"text","text":" "},{"type":"text","text":"overhead, since the stack pointers can be stored inside the memory chunks."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/TrashStackProtocol","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"TrashStackProtocol"}],"url":"\/documentation\/glib\/trashstackprotocol"},"doc://GLib/documentation/GLib/TrashStack":{"role":"symbol","title":"TrashStack","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"TrashStack"}],"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"GTrashStack"},{"type":"text","text":" is an efficient way to keep a stack of unused allocated"},{"type":"text","text":" "},{"type":"text","text":"memory chunks. Each memory chunk is required to be large enough to hold"},{"type":"text","text":" "},{"type":"text","text":"a "},{"type":"codeVoice","code":"gpointer"},{"type":"text","text":". This allows the stack to be maintained without any space"},{"type":"text","text":" "},{"type":"text","text":"overhead, since the stack pointers can be stored inside the memory chunks."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/TrashStack","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"TrashStack"}],"url":"\/documentation\/glib\/trashstack"},"doc://GLib/documentation/GLib":{"role":"collection","title":"GLib","abstract":[],"identifier":"doc:\/\/GLib\/documentation\/GLib","kind":"symbol","type":"topic","url":"\/documentation\/glib"},"doc://GLib/documentation/GLib/PointerWrapper":{"role":"symbol","title":"PointerWrapper","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"PointerWrapper"}],"abstract":[{"type":"text","text":"Protocol for GLib types that wrap pointers."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/PointerWrapper","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"PointerWrapper"}],"url":"\/documentation\/glib\/pointerwrapper"},"doc://GLib/documentation/GLib/TrashStackRef":{"role":"symbol","title":"TrashStackRef","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"TrashStackRef"}],"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"GTrashStack"},{"type":"text","text":" is an efficient way to keep a stack of unused allocated"},{"type":"text","text":" "},{"type":"text","text":"memory chunks. Each memory chunk is required to be large enough to hold"},{"type":"text","text":" "},{"type":"text","text":"a "},{"type":"codeVoice","code":"gpointer"},{"type":"text","text":". This allows the stack to be maintained without any space"},{"type":"text","text":" "},{"type":"text","text":"overhead, since the stack pointers can be stored inside the memory chunks."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/TrashStackRef","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"TrashStackRef"}],"url":"\/documentation\/glib\/trashstackref"},"doc://GLib/documentation/GLib/TrashStackProtocol/next":{"role":"symbol","title":"next","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"next"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"TrashStackRef","preciseIdentifier":"s:4GLib13TrashStackRefV"},{"kind":"text","text":"!"}],"abstract":[{"type":"text","text":"pointer to the previous element of the stack,"},{"type":"text","text":" "},{"type":"text","text":"gets stored in the first "},{"type":"codeVoice","code":"sizeof (gpointer)"},{"type":"text","text":" "},{"type":"text","text":"bytes of the element"}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/TrashStackProtocol\/next","kind":"symbol","type":"topic","url":"\/documentation\/glib\/trashstackprotocol\/next"}}}