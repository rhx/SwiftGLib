{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"fileTest"},{"kind":"text","text":"("},{"kind":"externalParam","text":"filename"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"gchar","preciseIdentifier":"c:@T@gchar"},{"kind":"text","text":">!, "},{"kind":"externalParam","text":"test"},{"kind":"text","text":": "},{"kind":"typeIdentifier","identifier":"doc:\/\/GLib\/documentation\/GLib\/FileTest","preciseIdentifier":"s:4GLib8FileTestV","text":"FileTest"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Apart from "},{"type":"codeVoice","code":"isSymlink"},{"type":"text","text":" all tests follow symbolic links,"},{"type":"text","text":" "},{"type":"text","text":"so for a symbolic link to a regular file "},{"type":"codeVoice","code":"g_file_test()"},{"type":"text","text":" will return"},{"type":"text","text":" "},{"type":"codeVoice","code":"true"},{"type":"text","text":" for both "},{"type":"codeVoice","code":"isSymlink"},{"type":"text","text":" and "},{"type":"codeVoice","code":"isRegular"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note, that for a dangling symbolic link "},{"type":"codeVoice","code":"g_file_test()"},{"type":"text","text":" will return"},{"type":"text","text":" "},{"type":"codeVoice","code":"true"},{"type":"text","text":" for "},{"type":"codeVoice","code":"isSymlink"},{"type":"text","text":" and "},{"type":"codeVoice","code":"false"},{"type":"text","text":" for all other flags."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You should never use "},{"type":"codeVoice","code":"g_file_test()"},{"type":"text","text":" to test whether it is safe"},{"type":"text","text":" "},{"type":"text","text":"to perform an operation, because there is always the possibility"},{"type":"text","text":" "},{"type":"text","text":"of the condition changing before you actually perform the operation,"},{"type":"text","text":" "},{"type":"text","text":"see "},{"type":"reference","isActive":true,"identifier":"https:\/\/en.wikipedia.org\/wiki\/Time-of-check_to_time-of-use"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, you might think you could use "},{"type":"codeVoice","code":"isSymlink"},{"type":"text","text":" "},{"type":"text","text":"to know whether it is safe to write to a file without being"},{"type":"text","text":" "},{"type":"text","text":"tricked into writing into a different location. It doesn’t work!"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"(C Language Example):"}]},{"type":"codeListing","syntax":"C","code":[" \/\/ DON'T DO THIS"," if (!g_file_test (filename, G_FILE_TEST_IS_SYMLINK))","   {","     fd = g_open (filename, O_WRONLY);","     \/\/ write to fd","   }",""," \/\/ DO THIS INSTEAD"," fd = g_open (filename, O_WRONLY | O_NOFOLLOW | O_CLOEXEC);"," if (fd == -1)","   {","     \/\/ check error","     if (errno == ELOOP)","       \/\/ file is a symlink and can be ignored","     else","       \/\/ handle errors as before","   }"," else","   {","     \/\/ write to fd","   }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Another thing to note is that "},{"type":"codeVoice","code":"exists"},{"type":"text","text":" and"},{"type":"text","text":" "},{"type":"codeVoice","code":"isExecutable"},{"type":"text","text":" are implemented using the "},{"type":"codeVoice","code":"access()"},{"type":"text","text":" "},{"type":"text","text":"system call. This usually doesn’t matter, but if your program"},{"type":"text","text":" "},{"type":"text","text":"is setuid or setgid it means that these tests will give you"},{"type":"text","text":" "},{"type":"text","text":"the answer for the real user ID and group ID, rather than the"},{"type":"text","text":" "},{"type":"text","text":"effective user ID and group ID."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"On Windows, there are no symlinks, so testing for"},{"type":"text","text":" "},{"type":"codeVoice","code":"isSymlink"},{"type":"text","text":" will always return "},{"type":"codeVoice","code":"false"},{"type":"text","text":". Testing for"},{"type":"text","text":" "},{"type":"codeVoice","code":"isExecutable"},{"type":"text","text":" will just check that the file exists and"},{"type":"text","text":" "},{"type":"text","text":"its name indicates that it is executable, checking for well-known"},{"type":"text","text":" "},{"type":"text","text":"extensions and those listed in the "},{"type":"codeVoice","code":"PATHEXT"},{"type":"text","text":" environment variable."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/glib\/filetest(filename:test:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/GLib\/documentation\/GLib\/fileTest(filename:test:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Returns "},{"type":"codeVoice","code":"true"},{"type":"text","text":" if any of the tests in the bitfield "},{"type":"codeVoice","code":"test"},{"type":"text","text":" are"},{"type":"text","text":" "},{"type":"codeVoice","code":"true"},{"type":"text","text":". For example, "},{"type":"codeVoice","code":"(G_FILE_TEST_EXISTS | G_FILE_TEST_IS_DIR)"},{"type":"text","text":" "},{"type":"text","text":"will return "},{"type":"codeVoice","code":"true"},{"type":"text","text":" if the file exists; the check whether it’s a"},{"type":"text","text":" "},{"type":"text","text":"directory doesn’t matter since the existence test is "},{"type":"codeVoice","code":"true"},{"type":"text","text":". With"},{"type":"text","text":" "},{"type":"text","text":"the current set of available tests, there’s no point passing in"},{"type":"text","text":" "},{"type":"text","text":"more than one test at a time."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"fileTest"},{"kind":"text","text":"("},{"kind":"externalParam","text":"filename"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"gchar","preciseIdentifier":"c:@T@gchar"},{"kind":"text","text":">!, "},{"kind":"externalParam","text":"test"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"FileTest","preciseIdentifier":"s:4GLib8FileTestV"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"title":"fileTest(filename:test:)","roleHeading":"Function","role":"symbol","symbolKind":"func","externalID":"s:4GLib8fileTest8filename4testSbSPys4Int8VGSg_AA04FileC0VtF","modules":[{"name":"GLib"}]},"hierarchy":{"paths":[["doc:\/\/GLib\/documentation\/GLib"]]},"references":{"doc://GLib/documentation/GLib":{"role":"collection","title":"GLib","abstract":[],"identifier":"doc:\/\/GLib\/documentation\/GLib","kind":"symbol","type":"topic","url":"\/documentation\/glib"},"https://en.wikipedia.org/wiki/Time-of-check_to_time-of-use":{"title":"TOCTOU","titleInlineContent":[{"type":"text","text":"TOCTOU"}],"type":"link","identifier":"https:\/\/en.wikipedia.org\/wiki\/Time-of-check_to_time-of-use","url":"https:\/\/en.wikipedia.org\/wiki\/Time-of-check_to_time-of-use"},"doc://GLib/documentation/GLib/fileTest(filename:test:)":{"role":"symbol","title":"fileTest(filename:test:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"fileTest"},{"kind":"text","text":"("},{"kind":"externalParam","text":"filename"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"gchar","preciseIdentifier":"c:@T@gchar"},{"kind":"text","text":">!, "},{"kind":"externalParam","text":"test"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"FileTest","preciseIdentifier":"s:4GLib8FileTestV"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"abstract":[{"type":"text","text":"Returns "},{"type":"codeVoice","code":"true"},{"type":"text","text":" if any of the tests in the bitfield "},{"type":"codeVoice","code":"test"},{"type":"text","text":" are"},{"type":"text","text":" "},{"type":"codeVoice","code":"true"},{"type":"text","text":". For example, "},{"type":"codeVoice","code":"(G_FILE_TEST_EXISTS | G_FILE_TEST_IS_DIR)"},{"type":"text","text":" "},{"type":"text","text":"will return "},{"type":"codeVoice","code":"true"},{"type":"text","text":" if the file exists; the check whether it’s a"},{"type":"text","text":" "},{"type":"text","text":"directory doesn’t matter since the existence test is "},{"type":"codeVoice","code":"true"},{"type":"text","text":". With"},{"type":"text","text":" "},{"type":"text","text":"the current set of available tests, there’s no point passing in"},{"type":"text","text":" "},{"type":"text","text":"more than one test at a time."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/fileTest(filename:test:)","kind":"symbol","type":"topic","url":"\/documentation\/glib\/filetest(filename:test:)"},"doc://GLib/documentation/GLib/FileTest":{"role":"symbol","title":"FileTest","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"FileTest"}],"abstract":[{"type":"text","text":"A test to perform on a file using "},{"type":"codeVoice","code":"g_file_test()"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/FileTest","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"FileTest"}],"url":"\/documentation\/glib\/filetest"}}}