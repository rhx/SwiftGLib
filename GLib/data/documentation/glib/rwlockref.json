{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"RWLockRef"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The difference to a mutex is that a reader-writer lock discriminates"},{"type":"text","text":" "},{"type":"text","text":"between read-only (‘reader’) and full (‘writer’) access. While only"},{"type":"text","text":" "},{"type":"text","text":"one thread at a time is allowed write access (by holding the ‘writer’"},{"type":"text","text":" "},{"type":"text","text":"lock via "},{"type":"codeVoice","code":"g_rw_lock_writer_lock()"},{"type":"text","text":"), multiple threads can gain"},{"type":"text","text":" "},{"type":"text","text":"simultaneous read-only access (by holding the ‘reader’ lock via"},{"type":"text","text":" "},{"type":"codeVoice","code":"g_rw_lock_reader_lock()"},{"type":"text","text":")."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It is unspecified whether readers or writers have priority in acquiring the"},{"type":"text","text":" "},{"type":"text","text":"lock when a reader already holds the lock and a writer is queued to acquire"},{"type":"text","text":" "},{"type":"text","text":"it."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here is an example for an array with access functions:"},{"type":"text","text":" "},{"type":"text","text":"(C Language Example):"}]},{"type":"codeListing","syntax":"C","code":["  GRWLock lock;","  GPtrArray *array;","","  gpointer","  my_array_get (guint index)","  {","    gpointer retval = NULL;","","    if (!array)","      return NULL;","","    g_rw_lock_reader_lock (&lock);","    if (index < array->len)","      retval = g_ptr_array_index (array, index);","    g_rw_lock_reader_unlock (&lock);","","    return retval;","  }","","  void","  my_array_set (guint index, gpointer data)","  {","    g_rw_lock_writer_lock (&lock);","","    if (!array)","      array = g_ptr_array_new ();","","    if (index >= array->len)","      g_ptr_array_set_size (array, index+1);","    g_ptr_array_index (array, index) = data;","","    g_rw_lock_writer_unlock (&lock);","  }"," "]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This example shows an array which can be accessed by many readers"},{"type":"text","text":" "},{"type":"text","text":"(the "},{"type":"codeVoice","code":"my_array_get()"},{"type":"text","text":" function) simultaneously, whereas the writers"},{"type":"text","text":" "},{"type":"text","text":"(the "},{"type":"codeVoice","code":"my_array_set()"},{"type":"text","text":" function) will only be allowed one at a time"},{"type":"text","text":" "},{"type":"text","text":"and only if no readers currently access the array. This is because"},{"type":"text","text":" "},{"type":"text","text":"of the potentially dangerous resizing of the array. Using these"},{"type":"text","text":" "},{"type":"text","text":"functions is fully multi-thread safe now."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLock"},{"type":"text","text":" is allocated in static storage then it can be used"},{"type":"text","text":" "},{"type":"text","text":"without initialisation.  Otherwise, you should call"},{"type":"text","text":" "},{"type":"codeVoice","code":"g_rw_lock_init()"},{"type":"text","text":" on it and "},{"type":"codeVoice","code":"g_rw_lock_clear()"},{"type":"text","text":" when done."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A GRWLock should only be accessed with the g_rw_lock_ functions."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLockRef"},{"type":"text","text":" type acts as a lightweight Swift reference to an underlying "},{"type":"codeVoice","code":"GRWLock"},{"type":"text","text":" instance."},{"type":"text","text":" "},{"type":"text","text":"It exposes methods that can operate on this data type through "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLockProtocol"},{"type":"text","text":" conformance."},{"type":"text","text":" "},{"type":"text","text":"Use "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLockRef"},{"type":"text","text":" only as an "},{"type":"codeVoice","code":"unowned"},{"type":"text","text":" reference to an existing "},{"type":"codeVoice","code":"GRWLock"},{"type":"text","text":" instance."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLock"},{"type":"text","text":" (instead of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLockRef"},{"type":"text","text":") if you want to use Automatic Reference Counting for memory management of the underlying "},{"type":"codeVoice","code":"GRWLock"},{"type":"text","text":" instance."}]}],"type":"aside","name":"Note"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/glib\/rwlockref"],"traits":[{"interfaceLanguage":"swift"}]}],"relationshipsSections":[{"identifiers":["doc:\/\/GLib\/documentation\/GLib\/PointerWrapper","doc:\/\/GLib\/documentation\/GLib\/RWLockProtocol"],"kind":"relationships","title":"Conforms To","type":"conformsTo"}],"identifier":{"url":"doc:\/\/GLib\/documentation\/GLib\/RWLockRef","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"The GRWLock struct is an opaque data structure to represent a"},{"type":"text","text":" "},{"type":"text","text":"reader-writer lock. It is similar to a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Mutex"},{"type":"text","text":" in that it allows"},{"type":"text","text":" "},{"type":"text","text":"multiple threads to coordinate access to a shared resource."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"RWLockRef"}],"title":"RWLockRef","roleHeading":"Structure","role":"symbol","symbolKind":"struct","externalID":"s:4GLib9RWLockRefV","modules":[{"name":"GLib"}],"navigatorTitle":[{"kind":"identifier","text":"RWLockRef"}]},"hierarchy":{"paths":[["doc:\/\/GLib\/documentation\/GLib"]]},"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/GLib\/documentation\/GLib\/RWLockRef\/init(_:)-3kjfl","doc:\/\/GLib\/documentation\/GLib\/RWLockRef\/init(_:)-4ny6y","doc:\/\/GLib\/documentation\/GLib\/RWLockRef\/init(_:)-6up5f","doc:\/\/GLib\/documentation\/GLib\/RWLockRef\/init(_:)-8ofb","doc:\/\/GLib\/documentation\/GLib\/RWLockRef\/init(_:)-8tf2d","doc:\/\/GLib\/documentation\/GLib\/RWLockRef\/init(cPointer:)","doc:\/\/GLib\/documentation\/GLib\/RWLockRef\/init(constPointer:)","doc:\/\/GLib\/documentation\/GLib\/RWLockRef\/init(gconstpointer:)","doc:\/\/GLib\/documentation\/GLib\/RWLockRef\/init(gpointer:)","doc:\/\/GLib\/documentation\/GLib\/RWLockRef\/init(mutating:)","doc:\/\/GLib\/documentation\/GLib\/RWLockRef\/init(opaquePointer:)"]},{"title":"Instance Properties","identifiers":["doc:\/\/GLib\/documentation\/GLib\/RWLockRef\/ptr"]},{"title":"Default Implementations","identifiers":["doc:\/\/GLib\/documentation\/GLib\/RWLockRef\/PointerWrapper-Implementations","doc:\/\/GLib\/documentation\/GLib\/RWLockRef\/RWLockProtocol-Implementations"],"generated":true}],"references":{"doc://GLib/documentation/GLib/RWLock":{"role":"symbol","title":"RWLock","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"RWLock"}],"abstract":[{"type":"text","text":"The GRWLock struct is an opaque data structure to represent a"},{"type":"text","text":" "},{"type":"text","text":"reader-writer lock. It is similar to a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Mutex"},{"type":"text","text":" in that it allows"},{"type":"text","text":" "},{"type":"text","text":"multiple threads to coordinate access to a shared resource."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLock","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"RWLock"}],"url":"\/documentation\/glib\/rwlock"},"doc://GLib/documentation/GLib/RWLockRef/init(mutating:)":{"role":"symbol","title":"init(mutating:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"mutating"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeRawPointer","preciseIdentifier":"s:SV"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Unsafe untyped initialiser."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Do not use unless you know the underlying data type the pointer points to conforms to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLockProtocol"},{"type":"text","text":"."}]}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLockRef\/init(mutating:)","kind":"symbol","type":"topic","url":"\/documentation\/glib\/rwlockref\/init(mutating:)"},"doc://GLib/documentation/GLib/RWLockRef/init(cPointer:)":{"role":"symbol","title":"init(cPointer:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"externalParam","text":"cPointer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">)"}],"abstract":[{"type":"text","text":"Unsafe typed initialiser."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Do not use unless you know the underlying data type the pointer points to conforms to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLockProtocol"},{"type":"text","text":"."}]}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLockRef\/init(cPointer:)","kind":"symbol","type":"topic","url":"\/documentation\/glib\/rwlockref\/init(cpointer:)"},"doc://GLib/documentation/GLib/PointerWrapper":{"role":"symbol","title":"PointerWrapper","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"PointerWrapper"}],"abstract":[{"type":"text","text":"Protocol for GLib types that wrap pointers."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/PointerWrapper","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"PointerWrapper"}],"url":"\/documentation\/glib\/pointerwrapper"},"doc://GLib/documentation/GLib/RWLockRef/RWLockProtocol-Implementations":{"role":"collectionGroup","title":"RWLockProtocol Implementations","abstract":[],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLockRef\/RWLockProtocol-Implementations","kind":"article","type":"topic","url":"\/documentation\/glib\/rwlockref\/rwlockprotocol-implementations"},"doc://GLib/documentation/GLib/RWLockRef/init(_:)-8tf2d":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Reference intialiser for a related type that implements "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLockProtocol"}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLockRef\/init(_:)-8tf2d","kind":"symbol","type":"topic","url":"\/documentation\/glib\/rwlockref\/init(_:)-8tf2d"},"doc://GLib/documentation/GLib/RWLockRef/init(gpointer:)":{"role":"symbol","title":"init(gpointer:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"!("},{"kind":"externalParam","text":"gpointer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"gpointer","preciseIdentifier":"c:@T@gpointer"},{"kind":"text","text":"?)"}],"abstract":[{"type":"text","text":"Conditional initialiser from an optional "},{"type":"codeVoice","code":"gpointer"}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLockRef\/init(gpointer:)","kind":"symbol","type":"topic","url":"\/documentation\/glib\/rwlockref\/init(gpointer:)"},"doc://GLib/documentation/GLib/RWLockProtocol":{"role":"symbol","title":"RWLockProtocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"RWLockProtocol"}],"abstract":[{"type":"text","text":"The GRWLock struct is an opaque data structure to represent a"},{"type":"text","text":" "},{"type":"text","text":"reader-writer lock. It is similar to a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Mutex"},{"type":"text","text":" in that it allows"},{"type":"text","text":" "},{"type":"text","text":"multiple threads to coordinate access to a shared resource."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLockProtocol","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"RWLockProtocol"}],"url":"\/documentation\/glib\/rwlockprotocol"},"doc://GLib/documentation/GLib/RWLockRef/init(_:)-8ofb":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GRWLock"},{"kind":"text","text":">)"}],"abstract":[{"type":"text","text":"Designated initialiser from a constant pointer to the underlying "},{"type":"codeVoice","code":"C"},{"type":"text","text":" data type"}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLockRef\/init(_:)-8ofb","kind":"symbol","type":"topic","url":"\/documentation\/glib\/rwlockref\/init(_:)-8ofb"},"doc://GLib/documentation/GLib":{"role":"collection","title":"GLib","abstract":[],"identifier":"doc:\/\/GLib\/documentation\/GLib","kind":"symbol","type":"topic","url":"\/documentation\/glib"},"doc://GLib/documentation/GLib/RWLockRef/init(constPointer:)":{"role":"symbol","title":"init(constPointer:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"externalParam","text":"constPointer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">)"}],"abstract":[{"type":"text","text":"Unsafe typed initialiser."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Do not use unless you know the underlying data type the pointer points to conforms to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLockProtocol"},{"type":"text","text":"."}]}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLockRef\/init(constPointer:)","kind":"symbol","type":"topic","url":"\/documentation\/glib\/rwlockref\/init(constpointer:)"},"doc://GLib/documentation/GLib/RWLockRef/init(opaquePointer:)":{"role":"symbol","title":"init(opaquePointer:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"opaquePointer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"OpaquePointer","preciseIdentifier":"s:s13OpaquePointerV"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Unsafe untyped initialiser."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Do not use unless you know the underlying data type the pointer points to conforms to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLockProtocol"},{"type":"text","text":"."}]}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLockRef\/init(opaquePointer:)","kind":"symbol","type":"topic","url":"\/documentation\/glib\/rwlockref\/init(opaquepointer:)"},"doc://GLib/documentation/GLib/RWLockRef/ptr":{"role":"symbol","title":"ptr","fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"ptr"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutableRawPointer","preciseIdentifier":"s:Sv"},{"kind":"text","text":"!"}],"abstract":[{"type":"text","text":"Untyped pointer to the underlying "},{"type":"codeVoice","code":"GRWLock"},{"type":"text","text":" instance."},{"type":"text","text":" "},{"type":"text","text":"For type-safe access, use the generated, typed pointer "},{"type":"codeVoice","code":"RWLockProtocol\/_ptr"},{"type":"text","text":" property instead."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLockRef\/ptr","kind":"symbol","type":"topic","url":"\/documentation\/glib\/rwlockref\/ptr"},"doc://GLib/documentation/GLib/RWLockRef/init(_:)-4ny6y":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GRWLock"},{"kind":"text","text":">)"}],"abstract":[{"type":"text","text":"Designated initialiser from the underlying "},{"type":"codeVoice","code":"C"},{"type":"text","text":" data type"}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLockRef\/init(_:)-4ny6y","kind":"symbol","type":"topic","url":"\/documentation\/glib\/rwlockref\/init(_:)-4ny6y"},"doc://GLib/documentation/GLib/Mutex":{"role":"symbol","title":"Mutex","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Mutex"}],"abstract":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Mutex"},{"type":"text","text":" struct is an opaque data structure to represent a mutex"},{"type":"text","text":" "},{"type":"text","text":"(mutual exclusion). It can be used to protect data against shared"},{"type":"text","text":" "},{"type":"text","text":"access."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/Mutex","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Mutex"}],"url":"\/documentation\/glib\/mutex"},"doc://GLib/documentation/GLib/RWLockRef/PointerWrapper-Implementations":{"role":"collectionGroup","title":"PointerWrapper Implementations","abstract":[],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLockRef\/PointerWrapper-Implementations","kind":"article","type":"topic","url":"\/documentation\/glib\/rwlockref\/pointerwrapper-implementations"},"doc://GLib/documentation/GLib/RWLockRef":{"role":"symbol","title":"RWLockRef","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"RWLockRef"}],"abstract":[{"type":"text","text":"The GRWLock struct is an opaque data structure to represent a"},{"type":"text","text":" "},{"type":"text","text":"reader-writer lock. It is similar to a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Mutex"},{"type":"text","text":" in that it allows"},{"type":"text","text":" "},{"type":"text","text":"multiple threads to coordinate access to a shared resource."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLockRef","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"RWLockRef"}],"url":"\/documentation\/glib\/rwlockref"},"doc://GLib/documentation/GLib/RWLockRef/init(_:)-3kjfl":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"!("},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GRWLock"},{"kind":"text","text":">?)"}],"abstract":[{"type":"text","text":"Conditional initialiser from an optional pointer to the underlying "},{"type":"codeVoice","code":"C"},{"type":"text","text":" data type"}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLockRef\/init(_:)-3kjfl","kind":"symbol","type":"topic","url":"\/documentation\/glib\/rwlockref\/init(_:)-3kjfl"},"doc://GLib/documentation/GLib/RWLockRef/init(_:)-6up5f":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"!("},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GRWLock"},{"kind":"text","text":">?)"}],"abstract":[{"type":"text","text":"Conditional initialiser from an optional, non-mutable pointer to the underlying "},{"type":"codeVoice","code":"C"},{"type":"text","text":" data type"}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLockRef\/init(_:)-6up5f","kind":"symbol","type":"topic","url":"\/documentation\/glib\/rwlockref\/init(_:)-6up5f"},"doc://GLib/documentation/GLib/RWLockRef/init(gconstpointer:)":{"role":"symbol","title":"init(gconstpointer:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"!("},{"kind":"externalParam","text":"gconstpointer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"gconstpointer","preciseIdentifier":"c:@T@gconstpointer"},{"kind":"text","text":"?)"}],"abstract":[{"type":"text","text":"Conditional initialiser from an optional, non-mutable "},{"type":"codeVoice","code":"gconstpointer"}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLockRef\/init(gconstpointer:)","kind":"symbol","type":"topic","url":"\/documentation\/glib\/rwlockref\/init(gconstpointer:)"}}}