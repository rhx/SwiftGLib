{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"MarkupCollectType"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"It is likely that this enum will be extended in the future to"},{"type":"text","text":" "},{"type":"text","text":"support other types."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/glib\/markupcollecttype"],"traits":[{"interfaceLanguage":"swift"}]}],"relationshipsSections":[{"identifiers":["doc:\/\/GLib\/SQ","doc:\/\/GLib\/s25ExpressibleByArrayLiteralP","doc:\/\/GLib\/s9OptionSetP","doc:\/\/GLib\/SY","doc:\/\/GLib\/s10SetAlgebraP"],"kind":"relationships","title":"Conforms To","type":"conformsTo"}],"identifier":{"url":"doc:\/\/GLib\/documentation\/GLib\/MarkupCollectType","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"A mixed enumerated type and flags field. You must specify one type"},{"type":"text","text":" "},{"type":"text","text":"(string, strdup, boolean, tristate).  Additionally, you may  optionally"},{"type":"text","text":" "},{"type":"text","text":"bitwise OR the type with the flag "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/MarkupCollectType\/optional"},{"type":"text","text":"."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"MarkupCollectType"}],"title":"MarkupCollectType","roleHeading":"Structure","role":"symbol","symbolKind":"struct","externalID":"s:4GLib17MarkupCollectTypeV","modules":[{"name":"GLib"}],"navigatorTitle":[{"kind":"identifier","text":"MarkupCollectType"}]},"hierarchy":{"paths":[["doc:\/\/GLib\/documentation\/GLib"]]},"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/GLib\/documentation\/GLib\/MarkupCollectType\/init(_:)-4b3se","doc:\/\/GLib\/documentation\/GLib\/MarkupCollectType\/init(_:)-742g5","doc:\/\/GLib\/documentation\/GLib\/MarkupCollectType\/init(rawValue:)"]},{"title":"Instance Properties","identifiers":["doc:\/\/GLib\/documentation\/GLib\/MarkupCollectType\/int","doc:\/\/GLib\/documentation\/GLib\/MarkupCollectType\/intValue","doc:\/\/GLib\/documentation\/GLib\/MarkupCollectType\/rawValue","doc:\/\/GLib\/documentation\/GLib\/MarkupCollectType\/value"]},{"title":"Type Properties","identifiers":["doc:\/\/GLib\/documentation\/GLib\/MarkupCollectType\/boolean","doc:\/\/GLib\/documentation\/GLib\/MarkupCollectType\/invalid","doc:\/\/GLib\/documentation\/GLib\/MarkupCollectType\/optional","doc:\/\/GLib\/documentation\/GLib\/MarkupCollectType\/strdup","doc:\/\/GLib\/documentation\/GLib\/MarkupCollectType\/string","doc:\/\/GLib\/documentation\/GLib\/MarkupCollectType\/tristate"]},{"title":"Default Implementations","identifiers":["doc:\/\/GLib\/documentation\/GLib\/MarkupCollectType\/Equatable-Implementations","doc:\/\/GLib\/documentation\/GLib\/MarkupCollectType\/OptionSet-Implementations","doc:\/\/GLib\/documentation\/GLib\/MarkupCollectType\/SetAlgebra-Implementations"],"generated":true}],"references":{"doc://GLib/documentation/GLib/MarkupCollectType/value":{"role":"symbol","title":"value","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"value"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"GMarkupCollectType","preciseIdentifier":"c:@EA@GMarkupCollectType"}],"abstract":[{"type":"text","text":"The equivalent underlying "},{"type":"codeVoice","code":"GMarkupCollectType"},{"type":"text","text":" enum value"}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/MarkupCollectType\/value","kind":"symbol","type":"topic","url":"\/documentation\/glib\/markupcollecttype\/value"},"doc://GLib/s25ExpressibleByArrayLiteralP":{"type":"unresolvable","title":"Swift.ExpressibleByArrayLiteral","identifier":"doc:\/\/GLib\/s25ExpressibleByArrayLiteralP"},"doc://GLib/documentation/GLib/MarkupCollectType/boolean":{"role":"symbol","title":"boolean","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"boolean"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"MarkupCollectType","preciseIdentifier":"s:4GLib17MarkupCollectTypeV"}],"abstract":[{"type":"text","text":"expects a parameter of type (gboolean *)"},{"type":"text","text":" "},{"type":"text","text":"and parses the attribute value as a boolean. Sets "},{"type":"codeVoice","code":"false"},{"type":"text","text":" if the"},{"type":"text","text":" "},{"type":"text","text":"attribute isn’t present. Valid boolean values consist of"},{"type":"text","text":" "},{"type":"text","text":"(case-insensitive) “false”, “f”, “no”, “n”, “0” and “true”, “t”,"},{"type":"text","text":" "},{"type":"text","text":"“yes”, “y”, “1”"}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/MarkupCollectType\/boolean","kind":"symbol","type":"topic","url":"\/documentation\/glib\/markupcollecttype\/boolean"},"doc://GLib/documentation/GLib/MarkupCollectType/string":{"role":"symbol","title":"string","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"string"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"MarkupCollectType","preciseIdentifier":"s:4GLib17MarkupCollectTypeV"}],"abstract":[{"type":"text","text":"collect the string pointer directly from"},{"type":"text","text":" "},{"type":"text","text":"the attribute_values[] array. Expects a parameter of type (const"},{"type":"text","text":" "},{"type":"text","text":"char **). If "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/MarkupCollectType\/optional"},{"type":"text","text":" is specified and the"},{"type":"text","text":" "},{"type":"text","text":"attribute isn’t present then the pointer will be set to "},{"type":"codeVoice","code":"nil"}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/MarkupCollectType\/string","kind":"symbol","type":"topic","url":"\/documentation\/glib\/markupcollecttype\/string"},"doc://GLib/documentation/GLib/MarkupCollectType/Equatable-Implementations":{"role":"collectionGroup","title":"Equatable Implementations","abstract":[],"identifier":"doc:\/\/GLib\/documentation\/GLib\/MarkupCollectType\/Equatable-Implementations","kind":"article","type":"topic","url":"\/documentation\/glib\/markupcollecttype\/equatable-implementations"},"doc://GLib/SY":{"type":"unresolvable","title":"Swift.RawRepresentable","identifier":"doc:\/\/GLib\/SY"},"doc://GLib/documentation/GLib/MarkupCollectType/OptionSet-Implementations":{"role":"collectionGroup","title":"OptionSet Implementations","abstract":[],"identifier":"doc:\/\/GLib\/documentation\/GLib\/MarkupCollectType\/OptionSet-Implementations","kind":"article","type":"topic","url":"\/documentation\/glib\/markupcollecttype\/optionset-implementations"},"doc://GLib/documentation/GLib/MarkupCollectType/SetAlgebra-Implementations":{"role":"collectionGroup","title":"SetAlgebra Implementations","abstract":[],"identifier":"doc:\/\/GLib\/documentation\/GLib\/MarkupCollectType\/SetAlgebra-Implementations","kind":"article","type":"topic","url":"\/documentation\/glib\/markupcollecttype\/setalgebra-implementations"},"doc://GLib/s10SetAlgebraP":{"type":"unresolvable","title":"Swift.SetAlgebra","identifier":"doc:\/\/GLib\/s10SetAlgebraP"},"doc://GLib/documentation/GLib/MarkupCollectType/strdup":{"role":"symbol","title":"strdup","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"strdup"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"MarkupCollectType","preciseIdentifier":"s:4GLib17MarkupCollectTypeV"}],"abstract":[{"type":"text","text":"as with "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/MarkupCollectType\/string"},{"type":"text","text":", but"},{"type":"text","text":" "},{"type":"text","text":"expects a parameter of type (char **) and "},{"type":"codeVoice","code":"g_strdup()"},{"type":"text","text":"s the"},{"type":"text","text":" "},{"type":"text","text":"returned pointer. The pointer must be freed with "},{"type":"codeVoice","code":"g_free()"}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/MarkupCollectType\/strdup","kind":"symbol","type":"topic","url":"\/documentation\/glib\/markupcollecttype\/strdup"},"doc://GLib/s9OptionSetP":{"type":"unresolvable","title":"Swift.OptionSet","identifier":"doc:\/\/GLib\/s9OptionSetP"},"doc://GLib/documentation/GLib/MarkupCollectType":{"role":"symbol","title":"MarkupCollectType","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"MarkupCollectType"}],"abstract":[{"type":"text","text":"A mixed enumerated type and flags field. You must specify one type"},{"type":"text","text":" "},{"type":"text","text":"(string, strdup, boolean, tristate).  Additionally, you may  optionally"},{"type":"text","text":" "},{"type":"text","text":"bitwise OR the type with the flag "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/MarkupCollectType\/optional"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/MarkupCollectType","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"MarkupCollectType"}],"url":"\/documentation\/glib\/markupcollecttype"},"doc://GLib/documentation/GLib/MarkupCollectType/rawValue":{"role":"symbol","title":"rawValue","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"rawValue"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt32","preciseIdentifier":"s:s6UInt32V"}],"abstract":[{"type":"text","text":"The corresponding value of the raw type"}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/MarkupCollectType\/rawValue","kind":"symbol","type":"topic","url":"\/documentation\/glib\/markupcollecttype\/rawvalue"},"doc://GLib/documentation/GLib/MarkupCollectType/intValue":{"role":"symbol","title":"intValue","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"intValue"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"}],"abstract":[{"type":"text","text":"The equivalent raw Int value"}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/MarkupCollectType\/intValue","kind":"symbol","type":"topic","url":"\/documentation\/glib\/markupcollecttype\/intvalue"},"doc://GLib/documentation/GLib/MarkupCollectType/init(_:)-4b3se":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"GMarkupCollectType","preciseIdentifier":"c:@EA@GMarkupCollectType"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Creates a new instance with the specified "},{"type":"codeVoice","code":"GMarkupCollectType"},{"type":"text","text":" enum value"}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/MarkupCollectType\/init(_:)-4b3se","kind":"symbol","type":"topic","url":"\/documentation\/glib\/markupcollecttype\/init(_:)-4b3se"},"doc://GLib/documentation/GLib/MarkupCollectType/init(_:)-742g5":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"I"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"I"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Creates a new instance with the specified Int value"}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/MarkupCollectType\/init(_:)-742g5","kind":"symbol","type":"topic","url":"\/documentation\/glib\/markupcollecttype\/init(_:)-742g5"},"doc://GLib/documentation/GLib":{"role":"collection","title":"GLib","abstract":[],"identifier":"doc:\/\/GLib\/documentation\/GLib","kind":"symbol","type":"topic","url":"\/documentation\/glib"},"doc://GLib/documentation/GLib/MarkupCollectType/tristate":{"role":"symbol","title":"tristate","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"tristate"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"MarkupCollectType","preciseIdentifier":"s:4GLib17MarkupCollectTypeV"}],"abstract":[{"type":"text","text":"as with "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/MarkupCollectType\/boolean"},{"type":"text","text":", but"},{"type":"text","text":" "},{"type":"text","text":"in the case of a missing attribute a value is set that compares"},{"type":"text","text":" "},{"type":"text","text":"equal to neither "},{"type":"codeVoice","code":"false"},{"type":"text","text":" nor "},{"type":"codeVoice","code":"true"},{"type":"text","text":" G_MARKUP_COLLECT_OPTIONAL is"},{"type":"text","text":" "},{"type":"text","text":"implied"}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/MarkupCollectType\/tristate","kind":"symbol","type":"topic","url":"\/documentation\/glib\/markupcollecttype\/tristate"},"doc://GLib/documentation/GLib/MarkupCollectType/invalid":{"role":"symbol","title":"invalid","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"invalid"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"MarkupCollectType","preciseIdentifier":"s:4GLib17MarkupCollectTypeV"}],"abstract":[{"type":"text","text":"used to terminate the list of attributes"},{"type":"text","text":" "},{"type":"text","text":"to collect"}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/MarkupCollectType\/invalid","kind":"symbol","type":"topic","url":"\/documentation\/glib\/markupcollecttype\/invalid"},"doc://GLib/documentation/GLib/MarkupCollectType/int":{"role":"symbol","title":"int","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"int"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"gint","preciseIdentifier":"c:@T@gint"}],"abstract":[{"type":"text","text":"The equivalent raw "},{"type":"codeVoice","code":"gint"},{"type":"text","text":" value"}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/MarkupCollectType\/int","kind":"symbol","type":"topic","url":"\/documentation\/glib\/markupcollecttype\/int"},"doc://GLib/SQ":{"type":"unresolvable","title":"Swift.Equatable","identifier":"doc:\/\/GLib\/SQ"},"doc://GLib/documentation/GLib/MarkupCollectType/optional":{"role":"symbol","title":"optional","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"optional"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"MarkupCollectType","preciseIdentifier":"s:4GLib17MarkupCollectTypeV"}],"abstract":[{"type":"text","text":"can be bitwise ORed with the other fields."},{"type":"text","text":" "},{"type":"text","text":"If present, allows the attribute not to appear. A default value"},{"type":"text","text":" "},{"type":"text","text":"is set depending on what value type is used"}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/MarkupCollectType\/optional","kind":"symbol","type":"topic","url":"\/documentation\/glib\/markupcollecttype\/optional"},"doc://GLib/documentation/GLib/MarkupCollectType/init(rawValue:)":{"role":"symbol","title":"init(rawValue:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"rawValue"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt32","preciseIdentifier":"s:s6UInt32V"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Creates a new instance with the specified raw value"}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/MarkupCollectType\/init(rawValue:)","kind":"symbol","type":"topic","url":"\/documentation\/glib\/markupcollecttype\/init(rawvalue:)"}}}