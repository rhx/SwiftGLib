{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Cond"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Consider the following example of a shared variable.  One or more"},{"type":"text","text":" "},{"type":"text","text":"threads can wait for data to be published to the variable and when"},{"type":"text","text":" "},{"type":"text","text":"another thread publishes the data, it can signal one of the waiting"},{"type":"text","text":" "},{"type":"text","text":"threads to wake up to collect the data."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here is an example for using GCond to block a thread until a condition"},{"type":"text","text":" "},{"type":"text","text":"is satisfied:"},{"type":"text","text":" "},{"type":"text","text":"(C Language Example):"}]},{"type":"codeListing","syntax":"C","code":["  gpointer current_data = NULL;","  GMutex data_mutex;","  GCond data_cond;","","  void","  push_data (gpointer data)","  {","    g_mutex_lock (&data_mutex);","    current_data = data;","    g_cond_signal (&data_cond);","    g_mutex_unlock (&data_mutex);","  }","","  gpointer","  pop_data (void)","  {","    gpointer data;","","    g_mutex_lock (&data_mutex);","    while (!current_data)","      g_cond_wait (&data_cond, &data_mutex);","    data = current_data;","    current_data = NULL;","    g_mutex_unlock (&data_mutex);","","    return data;","  }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Whenever a thread calls "},{"type":"codeVoice","code":"pop_data()"},{"type":"text","text":" now, it will wait until"},{"type":"text","text":" "},{"type":"text","text":"current_data is non-"},{"type":"codeVoice","code":"nil"},{"type":"text","text":", i.e. until some other thread"},{"type":"text","text":" "},{"type":"text","text":"has called "},{"type":"codeVoice","code":"push_data()"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example shows that use of a condition variable must always be"},{"type":"text","text":" "},{"type":"text","text":"paired with a mutex.  Without the use of a mutex, there would be a"},{"type":"text","text":" "},{"type":"text","text":"race between the check of "},{"type":"codeVoice","code":"current_data"},{"type":"text","text":" by the while loop in"},{"type":"text","text":" "},{"type":"codeVoice","code":"pop_data()"},{"type":"text","text":" and waiting. Specifically, another thread could set"},{"type":"text","text":" "},{"type":"codeVoice","code":"current_data"},{"type":"text","text":" after the check, and signal the cond (with nobody"},{"type":"text","text":" "},{"type":"text","text":"waiting on it) before the first thread goes to sleep. "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Cond"},{"type":"text","text":" is"},{"type":"text","text":" "},{"type":"text","text":"specifically useful for its ability to release the mutex and go"},{"type":"text","text":" "},{"type":"text","text":"to sleep atomically."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It is also important to use the "},{"type":"codeVoice","code":"g_cond_wait()"},{"type":"text","text":" and "},{"type":"codeVoice","code":"g_cond_wait_until()"},{"type":"text","text":" "},{"type":"text","text":"functions only inside a loop which checks for the condition to be"},{"type":"text","text":" "},{"type":"text","text":"true.  See "},{"type":"codeVoice","code":"g_cond_wait()"},{"type":"text","text":" for an explanation of why the condition may"},{"type":"text","text":" "},{"type":"text","text":"not be true even after it returns."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Cond"},{"type":"text","text":" is allocated in static storage then it can be used"},{"type":"text","text":" "},{"type":"text","text":"without initialisation.  Otherwise, you should call "},{"type":"codeVoice","code":"g_cond_init()"},{"type":"text","text":" "},{"type":"text","text":"on it and "},{"type":"codeVoice","code":"g_cond_clear()"},{"type":"text","text":" when done."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Cond"},{"type":"text","text":" should only be accessed via the g_cond_ functions."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Cond"},{"type":"text","text":" type acts as an owner of an underlying "},{"type":"codeVoice","code":"GCond"},{"type":"text","text":" instance."},{"type":"text","text":" "},{"type":"text","text":"It provides the methods that can operate on this data type through "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/CondProtocol"},{"type":"text","text":" conformance."},{"type":"text","text":" "},{"type":"text","text":"Use "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Cond"},{"type":"text","text":" as a strong reference or owner of a "},{"type":"codeVoice","code":"GCond"},{"type":"text","text":" instance."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/CondRef"},{"type":"text","text":" (instead of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Cond"},{"type":"text","text":") for a lightweight Swift reference to an underlying "},{"type":"codeVoice","code":"GCond"},{"type":"text","text":" instance."}]}],"type":"aside","name":"Note"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/glib\/cond"],"traits":[{"interfaceLanguage":"swift"}]}],"relationshipsSections":[{"identifiers":["doc:\/\/GLib\/documentation\/GLib\/CondProtocol","doc:\/\/GLib\/documentation\/GLib\/PointerWrapper"],"kind":"relationships","title":"Conforms To","type":"conformsTo"}],"identifier":{"url":"doc:\/\/GLib\/documentation\/GLib\/Cond","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Cond"},{"type":"text","text":" struct is an opaque data structure that represents a"},{"type":"text","text":" "},{"type":"text","text":"condition. Threads can block on a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Cond"},{"type":"text","text":" if they find a certain"},{"type":"text","text":" "},{"type":"text","text":"condition to be false. If other threads change the state of this"},{"type":"text","text":" "},{"type":"text","text":"condition they signal the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Cond"},{"type":"text","text":", and that causes the waiting"},{"type":"text","text":" "},{"type":"text","text":"threads to be woken up."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Cond"}],"title":"Cond","roleHeading":"Class","role":"symbol","symbolKind":"class","externalID":"s:4GLib4CondC","modules":[{"name":"GLib"}],"navigatorTitle":[{"kind":"identifier","text":"Cond"}]},"hierarchy":{"paths":[["doc:\/\/GLib\/documentation\/GLib"]]},"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/GLib\/documentation\/GLib\/Cond\/init(_:)-3cuz9","doc:\/\/GLib\/documentation\/GLib\/Cond\/init(_:)-3wkhq","doc:\/\/GLib\/documentation\/GLib\/Cond\/init(_:)-46zzs","doc:\/\/GLib\/documentation\/GLib\/Cond\/init(_:)-8cx4a","doc:\/\/GLib\/documentation\/GLib\/Cond\/init(_:)-ewbk","doc:\/\/GLib\/documentation\/GLib\/Cond\/init(cPointer:)","doc:\/\/GLib\/documentation\/GLib\/Cond\/init(gconstpointer:)","doc:\/\/GLib\/documentation\/GLib\/Cond\/init(gpointer:)","doc:\/\/GLib\/documentation\/GLib\/Cond\/init(opaquePointer:)","doc:\/\/GLib\/documentation\/GLib\/Cond\/init(raw:)-6h5wo","doc:\/\/GLib\/documentation\/GLib\/Cond\/init(raw:)-91iij","doc:\/\/GLib\/documentation\/GLib\/Cond\/init(retaining:)","doc:\/\/GLib\/documentation\/GLib\/Cond\/init(retainingCPointer:)","doc:\/\/GLib\/documentation\/GLib\/Cond\/init(retainingOpaquePointer:)","doc:\/\/GLib\/documentation\/GLib\/Cond\/init(retainingRaw:)-2zlm8","doc:\/\/GLib\/documentation\/GLib\/Cond\/init(retainingRaw:)-9u70y"]},{"title":"Instance Properties","identifiers":["doc:\/\/GLib\/documentation\/GLib\/Cond\/ptr"]},{"title":"Default Implementations","identifiers":["doc:\/\/GLib\/documentation\/GLib\/Cond\/CondProtocol-Implementations"],"generated":true}],"references":{"doc://GLib/documentation/GLib/Cond/init(_:)-3cuz9":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Reference intialiser for a related type that implements "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/CondProtocol"},{"type":"text","text":" "},{"type":"codeVoice","code":"GCond"},{"type":"text","text":" does not allow reference counting."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/Cond\/init(_:)-3cuz9","kind":"symbol","type":"topic","url":"\/documentation\/glib\/cond\/init(_:)-3cuz9"},"doc://GLib/documentation/GLib/Cond/CondProtocol-Implementations":{"role":"collectionGroup","title":"CondProtocol Implementations","abstract":[],"identifier":"doc:\/\/GLib\/documentation\/GLib\/Cond\/CondProtocol-Implementations","kind":"article","type":"topic","url":"\/documentation\/glib\/cond\/condprotocol-implementations"},"doc://GLib/documentation/GLib/Cond/init(opaquePointer:)":{"role":"symbol","title":"init(opaquePointer:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"opaquePointer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"OpaquePointer","preciseIdentifier":"s:s13OpaquePointerV"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Unsafe untyped initialiser."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Do not use unless you know the underlying data type the pointer points to conforms to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/CondProtocol"},{"type":"text","text":"."}]}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/Cond\/init(opaquePointer:)","kind":"symbol","type":"topic","url":"\/documentation\/glib\/cond\/init(opaquepointer:)"},"doc://GLib/documentation/GLib/Cond/init(_:)-46zzs":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GCond"},{"kind":"text","text":">)"}],"abstract":[{"type":"text","text":"Designated initialiser from the underlying "},{"type":"codeVoice","code":"C"},{"type":"text","text":" data type."},{"type":"text","text":" "},{"type":"text","text":"This creates an instance without performing an unbalanced retain"},{"type":"text","text":" "},{"type":"text","text":"i.e., ownership is transferred to the "},{"type":"codeVoice","code":"Cond"},{"type":"text","text":" instance."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/Cond\/init(_:)-46zzs","kind":"symbol","type":"topic","url":"\/documentation\/glib\/cond\/init(_:)-46zzs"},"doc://GLib/documentation/GLib/Cond/init(raw:)-6h5wo":{"role":"symbol","title":"init(raw:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"raw"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutableRawPointer","preciseIdentifier":"s:Sv"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Unsafe untyped initialiser."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Do not use unless you know the underlying data type the pointer points to conforms to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/CondProtocol"},{"type":"text","text":"."}]}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/Cond\/init(raw:)-6h5wo","kind":"symbol","type":"topic","url":"\/documentation\/glib\/cond\/init(raw:)-6h5wo"},"doc://GLib/documentation/GLib/Cond/init(_:)-3wkhq":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"!("},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GCond"},{"kind":"text","text":">?)"}],"abstract":[{"type":"text","text":"Optional initialiser from a constant pointer to the underlying "},{"type":"codeVoice","code":"C"},{"type":"text","text":" data type."},{"type":"text","text":" "},{"type":"text","text":"This creates an instance without performing an unbalanced retain"},{"type":"text","text":" "},{"type":"text","text":"i.e., ownership is transferred to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Cond"},{"type":"text","text":" instance."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/Cond\/init(_:)-3wkhq","kind":"symbol","type":"topic","url":"\/documentation\/glib\/cond\/init(_:)-3wkhq"},"doc://GLib/documentation/GLib/Cond/ptr":{"role":"symbol","title":"ptr","fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"ptr"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutableRawPointer","preciseIdentifier":"s:Sv"},{"kind":"text","text":"!"}],"abstract":[{"type":"text","text":"Untyped pointer to the underlying "},{"type":"codeVoice","code":"GCond"},{"type":"text","text":" instance."},{"type":"text","text":" "},{"type":"text","text":"For type-safe access, use the generated, typed pointer "},{"type":"codeVoice","code":"CondProtocol\/_ptr"},{"type":"text","text":" property instead."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/Cond\/ptr","kind":"symbol","type":"topic","url":"\/documentation\/glib\/cond\/ptr"},"doc://GLib/documentation/GLib/Cond":{"role":"symbol","title":"Cond","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Cond"}],"abstract":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Cond"},{"type":"text","text":" struct is an opaque data structure that represents a"},{"type":"text","text":" "},{"type":"text","text":"condition. Threads can block on a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Cond"},{"type":"text","text":" if they find a certain"},{"type":"text","text":" "},{"type":"text","text":"condition to be false. If other threads change the state of this"},{"type":"text","text":" "},{"type":"text","text":"condition they signal the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Cond"},{"type":"text","text":", and that causes the waiting"},{"type":"text","text":" "},{"type":"text","text":"threads to be woken up."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/Cond","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Cond"}],"url":"\/documentation\/glib\/cond"},"doc://GLib/documentation/GLib/Cond/init(gpointer:)":{"role":"symbol","title":"init(gpointer:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"!("},{"kind":"externalParam","text":"gpointer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"gpointer","preciseIdentifier":"c:@T@gpointer"},{"kind":"text","text":"?)"}],"abstract":[{"type":"text","text":"Optional initialiser from a non-mutating "},{"type":"codeVoice","code":"gpointer"},{"type":"text","text":" to"},{"type":"text","text":" "},{"type":"text","text":"the underlying "},{"type":"codeVoice","code":"C"},{"type":"text","text":" data type."},{"type":"text","text":" "},{"type":"text","text":"This creates an instance without performing an unbalanced retain"},{"type":"text","text":" "},{"type":"text","text":"i.e., ownership is transferred to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Cond"},{"type":"text","text":" instance."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/Cond\/init(gpointer:)","kind":"symbol","type":"topic","url":"\/documentation\/glib\/cond\/init(gpointer:)"},"doc://GLib/documentation/GLib":{"role":"collection","title":"GLib","abstract":[],"identifier":"doc:\/\/GLib\/documentation\/GLib","kind":"symbol","type":"topic","url":"\/documentation\/glib"},"doc://GLib/documentation/GLib/Cond/init(raw:)-91iij":{"role":"symbol","title":"init(raw:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"raw"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeRawPointer","preciseIdentifier":"s:SV"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Unsafe untyped initialiser."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Do not use unless you know the underlying data type the pointer points to conforms to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/CondProtocol"},{"type":"text","text":"."}]}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/Cond\/init(raw:)-91iij","kind":"symbol","type":"topic","url":"\/documentation\/glib\/cond\/init(raw:)-91iij"},"doc://GLib/documentation/GLib/Cond/init(retainingRaw:)-9u70y":{"role":"symbol","title":"init(retainingRaw:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"retainingRaw"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutableRawPointer","preciseIdentifier":"s:Sv"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Unsafe untyped, retaining initialiser."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Do not use unless you know the underlying data type the pointer points to conforms to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/CondProtocol"},{"type":"text","text":"."}]}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/Cond\/init(retainingRaw:)-9u70y","kind":"symbol","type":"topic","url":"\/documentation\/glib\/cond\/init(retainingraw:)-9u70y"},"doc://GLib/documentation/GLib/Cond/init(_:)-ewbk":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"!("},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GCond"},{"kind":"text","text":">?)"}],"abstract":[{"type":"text","text":"Optional initialiser from the underlying "},{"type":"codeVoice","code":"C"},{"type":"text","text":" data type."},{"type":"text","text":" "},{"type":"text","text":"This creates an instance without performing an unbalanced retain"},{"type":"text","text":" "},{"type":"text","text":"i.e., ownership is transferred to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Cond"},{"type":"text","text":" instance."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/Cond\/init(_:)-ewbk","kind":"symbol","type":"topic","url":"\/documentation\/glib\/cond\/init(_:)-ewbk"},"doc://GLib/documentation/GLib/CondProtocol":{"role":"symbol","title":"CondProtocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"CondProtocol"}],"abstract":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Cond"},{"type":"text","text":" struct is an opaque data structure that represents a"},{"type":"text","text":" "},{"type":"text","text":"condition. Threads can block on a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Cond"},{"type":"text","text":" if they find a certain"},{"type":"text","text":" "},{"type":"text","text":"condition to be false. If other threads change the state of this"},{"type":"text","text":" "},{"type":"text","text":"condition they signal the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Cond"},{"type":"text","text":", and that causes the waiting"},{"type":"text","text":" "},{"type":"text","text":"threads to be woken up."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/CondProtocol","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"CondProtocol"}],"url":"\/documentation\/glib\/condprotocol"},"doc://GLib/documentation/GLib/Cond/init(retaining:)":{"role":"symbol","title":"init(retaining:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"retaining"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GCond"},{"kind":"text","text":">)"}],"abstract":[{"type":"text","text":"Designated initialiser from the underlying "},{"type":"codeVoice","code":"C"},{"type":"text","text":" data type."},{"type":"text","text":" "},{"type":"codeVoice","code":"GCond"},{"type":"text","text":" does not allow reference counting, so despite the name no actual retaining will occur."},{"type":"text","text":" "},{"type":"text","text":"i.e., ownership is transferred to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Cond"},{"type":"text","text":" instance."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/Cond\/init(retaining:)","kind":"symbol","type":"topic","url":"\/documentation\/glib\/cond\/init(retaining:)"},"doc://GLib/documentation/GLib/CondRef":{"role":"symbol","title":"CondRef","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"CondRef"}],"abstract":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Cond"},{"type":"text","text":" struct is an opaque data structure that represents a"},{"type":"text","text":" "},{"type":"text","text":"condition. Threads can block on a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Cond"},{"type":"text","text":" if they find a certain"},{"type":"text","text":" "},{"type":"text","text":"condition to be false. If other threads change the state of this"},{"type":"text","text":" "},{"type":"text","text":"condition they signal the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Cond"},{"type":"text","text":", and that causes the waiting"},{"type":"text","text":" "},{"type":"text","text":"threads to be woken up."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/CondRef","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"CondRef"}],"url":"\/documentation\/glib\/condref"},"doc://GLib/documentation/GLib/Cond/init(retainingCPointer:)":{"role":"symbol","title":"init(retainingCPointer:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"externalParam","text":"retainingCPointer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">)"}],"abstract":[{"type":"text","text":"Unsafe typed, retaining initialiser."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Do not use unless you know the underlying data type the pointer points to conforms to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/CondProtocol"},{"type":"text","text":"."}]}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/Cond\/init(retainingCPointer:)","kind":"symbol","type":"topic","url":"\/documentation\/glib\/cond\/init(retainingcpointer:)"},"doc://GLib/documentation/GLib/Cond/init(gconstpointer:)":{"role":"symbol","title":"init(gconstpointer:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"!("},{"kind":"externalParam","text":"gconstpointer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"gconstpointer","preciseIdentifier":"c:@T@gconstpointer"},{"kind":"text","text":"?)"}],"abstract":[{"type":"text","text":"Optional initialiser from a non-mutating "},{"type":"codeVoice","code":"gconstpointer"},{"type":"text","text":" to"},{"type":"text","text":" "},{"type":"text","text":"the underlying "},{"type":"codeVoice","code":"C"},{"type":"text","text":" data type."},{"type":"text","text":" "},{"type":"text","text":"This creates an instance without performing an unbalanced retain"},{"type":"text","text":" "},{"type":"text","text":"i.e., ownership is transferred to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Cond"},{"type":"text","text":" instance."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/Cond\/init(gconstpointer:)","kind":"symbol","type":"topic","url":"\/documentation\/glib\/cond\/init(gconstpointer:)"},"doc://GLib/documentation/GLib/Cond/init(cPointer:)":{"role":"symbol","title":"init(cPointer:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"externalParam","text":"cPointer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">)"}],"abstract":[{"type":"text","text":"Unsafe typed initialiser."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Do not use unless you know the underlying data type the pointer points to conforms to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/CondProtocol"},{"type":"text","text":"."}]}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/Cond\/init(cPointer:)","kind":"symbol","type":"topic","url":"\/documentation\/glib\/cond\/init(cpointer:)"},"doc://GLib/documentation/GLib/Cond/init(retainingRaw:)-2zlm8":{"role":"symbol","title":"init(retainingRaw:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"retainingRaw"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeRawPointer","preciseIdentifier":"s:SV"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Unsafe untyped, retaining initialiser."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Do not use unless you know the underlying data type the pointer points to conforms to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/CondProtocol"},{"type":"text","text":"."}]}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/Cond\/init(retainingRaw:)-2zlm8","kind":"symbol","type":"topic","url":"\/documentation\/glib\/cond\/init(retainingraw:)-2zlm8"},"doc://GLib/documentation/GLib/Cond/init(retainingOpaquePointer:)":{"role":"symbol","title":"init(retainingOpaquePointer:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"retainingOpaquePointer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"OpaquePointer","preciseIdentifier":"s:s13OpaquePointerV"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Unsafe untyped, retaining initialiser."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Do not use unless you know the underlying data type the pointer points to conforms to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/CondProtocol"},{"type":"text","text":"."}]}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/Cond\/init(retainingOpaquePointer:)","kind":"symbol","type":"topic","url":"\/documentation\/glib\/cond\/init(retainingopaquepointer:)"},"doc://GLib/documentation/GLib/PointerWrapper":{"role":"symbol","title":"PointerWrapper","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"PointerWrapper"}],"abstract":[{"type":"text","text":"Protocol for GLib types that wrap pointers."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/PointerWrapper","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"PointerWrapper"}],"url":"\/documentation\/glib\/pointerwrapper"},"doc://GLib/documentation/GLib/Cond/init(_:)-8cx4a":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GCond"},{"kind":"text","text":">)"}],"abstract":[{"type":"text","text":"Designated initialiser from a constant pointer to the underlying "},{"type":"codeVoice","code":"C"},{"type":"text","text":" data type."},{"type":"text","text":" "},{"type":"text","text":"This creates an instance without performing an unbalanced retain"},{"type":"text","text":" "},{"type":"text","text":"i.e., ownership is transferred to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Cond"},{"type":"text","text":" instance."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/Cond\/init(_:)-8cx4a","kind":"symbol","type":"topic","url":"\/documentation\/glib\/cond\/init(_:)-8cx4a"}}}