{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"RWLock"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The difference to a mutex is that a reader-writer lock discriminates"},{"type":"text","text":" "},{"type":"text","text":"between read-only (‘reader’) and full (‘writer’) access. While only"},{"type":"text","text":" "},{"type":"text","text":"one thread at a time is allowed write access (by holding the ‘writer’"},{"type":"text","text":" "},{"type":"text","text":"lock via "},{"type":"codeVoice","code":"g_rw_lock_writer_lock()"},{"type":"text","text":"), multiple threads can gain"},{"type":"text","text":" "},{"type":"text","text":"simultaneous read-only access (by holding the ‘reader’ lock via"},{"type":"text","text":" "},{"type":"codeVoice","code":"g_rw_lock_reader_lock()"},{"type":"text","text":")."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It is unspecified whether readers or writers have priority in acquiring the"},{"type":"text","text":" "},{"type":"text","text":"lock when a reader already holds the lock and a writer is queued to acquire"},{"type":"text","text":" "},{"type":"text","text":"it."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here is an example for an array with access functions:"},{"type":"text","text":" "},{"type":"text","text":"(C Language Example):"}]},{"type":"codeListing","syntax":"C","code":["  GRWLock lock;","  GPtrArray *array;","","  gpointer","  my_array_get (guint index)","  {","    gpointer retval = NULL;","","    if (!array)","      return NULL;","","    g_rw_lock_reader_lock (&lock);","    if (index < array->len)","      retval = g_ptr_array_index (array, index);","    g_rw_lock_reader_unlock (&lock);","","    return retval;","  }","","  void","  my_array_set (guint index, gpointer data)","  {","    g_rw_lock_writer_lock (&lock);","","    if (!array)","      array = g_ptr_array_new ();","","    if (index >= array->len)","      g_ptr_array_set_size (array, index+1);","    g_ptr_array_index (array, index) = data;","","    g_rw_lock_writer_unlock (&lock);","  }"," "]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This example shows an array which can be accessed by many readers"},{"type":"text","text":" "},{"type":"text","text":"(the "},{"type":"codeVoice","code":"my_array_get()"},{"type":"text","text":" function) simultaneously, whereas the writers"},{"type":"text","text":" "},{"type":"text","text":"(the "},{"type":"codeVoice","code":"my_array_set()"},{"type":"text","text":" function) will only be allowed one at a time"},{"type":"text","text":" "},{"type":"text","text":"and only if no readers currently access the array. This is because"},{"type":"text","text":" "},{"type":"text","text":"of the potentially dangerous resizing of the array. Using these"},{"type":"text","text":" "},{"type":"text","text":"functions is fully multi-thread safe now."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLock"},{"type":"text","text":" is allocated in static storage then it can be used"},{"type":"text","text":" "},{"type":"text","text":"without initialisation.  Otherwise, you should call"},{"type":"text","text":" "},{"type":"codeVoice","code":"g_rw_lock_init()"},{"type":"text","text":" on it and "},{"type":"codeVoice","code":"g_rw_lock_clear()"},{"type":"text","text":" when done."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A GRWLock should only be accessed with the g_rw_lock_ functions."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLock"},{"type":"text","text":" type acts as an owner of an underlying "},{"type":"codeVoice","code":"GRWLock"},{"type":"text","text":" instance."},{"type":"text","text":" "},{"type":"text","text":"It provides the methods that can operate on this data type through "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLockProtocol"},{"type":"text","text":" conformance."},{"type":"text","text":" "},{"type":"text","text":"Use "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLock"},{"type":"text","text":" as a strong reference or owner of a "},{"type":"codeVoice","code":"GRWLock"},{"type":"text","text":" instance."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLockRef"},{"type":"text","text":" (instead of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLock"},{"type":"text","text":") for a lightweight Swift reference to an underlying "},{"type":"codeVoice","code":"GRWLock"},{"type":"text","text":" instance."}]}],"type":"aside","name":"Note"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/glib\/rwlock"],"traits":[{"interfaceLanguage":"swift"}]}],"relationshipsSections":[{"identifiers":["doc:\/\/GLib\/documentation\/GLib\/PointerWrapper","doc:\/\/GLib\/documentation\/GLib\/RWLockProtocol"],"kind":"relationships","title":"Conforms To","type":"conformsTo"}],"identifier":{"url":"doc:\/\/GLib\/documentation\/GLib\/RWLock","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"The GRWLock struct is an opaque data structure to represent a"},{"type":"text","text":" "},{"type":"text","text":"reader-writer lock. It is similar to a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Mutex"},{"type":"text","text":" in that it allows"},{"type":"text","text":" "},{"type":"text","text":"multiple threads to coordinate access to a shared resource."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"RWLock"}],"title":"RWLock","roleHeading":"Class","role":"symbol","symbolKind":"class","externalID":"s:4GLib6RWLockC","modules":[{"name":"GLib"}],"navigatorTitle":[{"kind":"identifier","text":"RWLock"}]},"hierarchy":{"paths":[["doc:\/\/GLib\/documentation\/GLib"]]},"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/GLib\/documentation\/GLib\/RWLock\/init(_:)-187l8","doc:\/\/GLib\/documentation\/GLib\/RWLock\/init(_:)-21sx0","doc:\/\/GLib\/documentation\/GLib\/RWLock\/init(_:)-643cj","doc:\/\/GLib\/documentation\/GLib\/RWLock\/init(_:)-69bry","doc:\/\/GLib\/documentation\/GLib\/RWLock\/init(_:)-9jfa5","doc:\/\/GLib\/documentation\/GLib\/RWLock\/init(cPointer:)","doc:\/\/GLib\/documentation\/GLib\/RWLock\/init(gconstpointer:)","doc:\/\/GLib\/documentation\/GLib\/RWLock\/init(gpointer:)","doc:\/\/GLib\/documentation\/GLib\/RWLock\/init(opaquePointer:)","doc:\/\/GLib\/documentation\/GLib\/RWLock\/init(raw:)-7cuhr","doc:\/\/GLib\/documentation\/GLib\/RWLock\/init(raw:)-9zeby","doc:\/\/GLib\/documentation\/GLib\/RWLock\/init(retaining:)","doc:\/\/GLib\/documentation\/GLib\/RWLock\/init(retainingCPointer:)","doc:\/\/GLib\/documentation\/GLib\/RWLock\/init(retainingOpaquePointer:)","doc:\/\/GLib\/documentation\/GLib\/RWLock\/init(retainingRaw:)-46ai7","doc:\/\/GLib\/documentation\/GLib\/RWLock\/init(retainingRaw:)-4hhp2"]},{"title":"Instance Properties","identifiers":["doc:\/\/GLib\/documentation\/GLib\/RWLock\/ptr"]},{"title":"Default Implementations","identifiers":["doc:\/\/GLib\/documentation\/GLib\/RWLock\/RWLockProtocol-Implementations"],"generated":true}],"references":{"doc://GLib/documentation/GLib/RWLock/init(raw:)-7cuhr":{"role":"symbol","title":"init(raw:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"raw"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeRawPointer","preciseIdentifier":"s:SV"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Unsafe untyped initialiser."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Do not use unless you know the underlying data type the pointer points to conforms to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLockProtocol"},{"type":"text","text":"."}]}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLock\/init(raw:)-7cuhr","kind":"symbol","type":"topic","url":"\/documentation\/glib\/rwlock\/init(raw:)-7cuhr"},"doc://GLib/documentation/GLib/RWLockRef":{"role":"symbol","title":"RWLockRef","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"RWLockRef"}],"abstract":[{"type":"text","text":"The GRWLock struct is an opaque data structure to represent a"},{"type":"text","text":" "},{"type":"text","text":"reader-writer lock. It is similar to a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Mutex"},{"type":"text","text":" in that it allows"},{"type":"text","text":" "},{"type":"text","text":"multiple threads to coordinate access to a shared resource."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLockRef","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"RWLockRef"}],"url":"\/documentation\/glib\/rwlockref"},"doc://GLib/documentation/GLib/RWLock/init(retainingOpaquePointer:)":{"role":"symbol","title":"init(retainingOpaquePointer:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"retainingOpaquePointer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"OpaquePointer","preciseIdentifier":"s:s13OpaquePointerV"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Unsafe untyped, retaining initialiser."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Do not use unless you know the underlying data type the pointer points to conforms to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLockProtocol"},{"type":"text","text":"."}]}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLock\/init(retainingOpaquePointer:)","kind":"symbol","type":"topic","url":"\/documentation\/glib\/rwlock\/init(retainingopaquepointer:)"},"doc://GLib/documentation/GLib/RWLock/init(retainingCPointer:)":{"role":"symbol","title":"init(retainingCPointer:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"externalParam","text":"retainingCPointer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">)"}],"abstract":[{"type":"text","text":"Unsafe typed, retaining initialiser."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Do not use unless you know the underlying data type the pointer points to conforms to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLockProtocol"},{"type":"text","text":"."}]}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLock\/init(retainingCPointer:)","kind":"symbol","type":"topic","url":"\/documentation\/glib\/rwlock\/init(retainingcpointer:)"},"doc://GLib/documentation/GLib/RWLock/init(cPointer:)":{"role":"symbol","title":"init(cPointer:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"externalParam","text":"cPointer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">)"}],"abstract":[{"type":"text","text":"Unsafe typed initialiser."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Do not use unless you know the underlying data type the pointer points to conforms to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLockProtocol"},{"type":"text","text":"."}]}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLock\/init(cPointer:)","kind":"symbol","type":"topic","url":"\/documentation\/glib\/rwlock\/init(cpointer:)"},"doc://GLib/documentation/GLib/RWLock/init(opaquePointer:)":{"role":"symbol","title":"init(opaquePointer:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"opaquePointer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"OpaquePointer","preciseIdentifier":"s:s13OpaquePointerV"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Unsafe untyped initialiser."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Do not use unless you know the underlying data type the pointer points to conforms to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLockProtocol"},{"type":"text","text":"."}]}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLock\/init(opaquePointer:)","kind":"symbol","type":"topic","url":"\/documentation\/glib\/rwlock\/init(opaquepointer:)"},"doc://GLib/documentation/GLib/RWLock/init(_:)-643cj":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GRWLock"},{"kind":"text","text":">)"}],"abstract":[{"type":"text","text":"Designated initialiser from the underlying "},{"type":"codeVoice","code":"C"},{"type":"text","text":" data type."},{"type":"text","text":" "},{"type":"text","text":"This creates an instance without performing an unbalanced retain"},{"type":"text","text":" "},{"type":"text","text":"i.e., ownership is transferred to the "},{"type":"codeVoice","code":"RWLock"},{"type":"text","text":" instance."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLock\/init(_:)-643cj","kind":"symbol","type":"topic","url":"\/documentation\/glib\/rwlock\/init(_:)-643cj"},"doc://GLib/documentation/GLib/RWLockProtocol":{"role":"symbol","title":"RWLockProtocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"RWLockProtocol"}],"abstract":[{"type":"text","text":"The GRWLock struct is an opaque data structure to represent a"},{"type":"text","text":" "},{"type":"text","text":"reader-writer lock. It is similar to a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Mutex"},{"type":"text","text":" in that it allows"},{"type":"text","text":" "},{"type":"text","text":"multiple threads to coordinate access to a shared resource."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLockProtocol","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"RWLockProtocol"}],"url":"\/documentation\/glib\/rwlockprotocol"},"doc://GLib/documentation/GLib/RWLock/RWLockProtocol-Implementations":{"role":"collectionGroup","title":"RWLockProtocol Implementations","abstract":[],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLock\/RWLockProtocol-Implementations","kind":"article","type":"topic","url":"\/documentation\/glib\/rwlock\/rwlockprotocol-implementations"},"doc://GLib/documentation/GLib":{"role":"collection","title":"GLib","abstract":[],"identifier":"doc:\/\/GLib\/documentation\/GLib","kind":"symbol","type":"topic","url":"\/documentation\/glib"},"doc://GLib/documentation/GLib/RWLock/init(raw:)-9zeby":{"role":"symbol","title":"init(raw:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"raw"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutableRawPointer","preciseIdentifier":"s:Sv"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Unsafe untyped initialiser."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Do not use unless you know the underlying data type the pointer points to conforms to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLockProtocol"},{"type":"text","text":"."}]}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLock\/init(raw:)-9zeby","kind":"symbol","type":"topic","url":"\/documentation\/glib\/rwlock\/init(raw:)-9zeby"},"doc://GLib/documentation/GLib/RWLock/init(gconstpointer:)":{"role":"symbol","title":"init(gconstpointer:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"!("},{"kind":"externalParam","text":"gconstpointer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"gconstpointer","preciseIdentifier":"c:@T@gconstpointer"},{"kind":"text","text":"?)"}],"abstract":[{"type":"text","text":"Optional initialiser from a non-mutating "},{"type":"codeVoice","code":"gconstpointer"},{"type":"text","text":" to"},{"type":"text","text":" "},{"type":"text","text":"the underlying "},{"type":"codeVoice","code":"C"},{"type":"text","text":" data type."},{"type":"text","text":" "},{"type":"text","text":"This creates an instance without performing an unbalanced retain"},{"type":"text","text":" "},{"type":"text","text":"i.e., ownership is transferred to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLock"},{"type":"text","text":" instance."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLock\/init(gconstpointer:)","kind":"symbol","type":"topic","url":"\/documentation\/glib\/rwlock\/init(gconstpointer:)"},"doc://GLib/documentation/GLib/RWLock/init(retainingRaw:)-46ai7":{"role":"symbol","title":"init(retainingRaw:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"retainingRaw"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutableRawPointer","preciseIdentifier":"s:Sv"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Unsafe untyped, retaining initialiser."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Do not use unless you know the underlying data type the pointer points to conforms to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLockProtocol"},{"type":"text","text":"."}]}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLock\/init(retainingRaw:)-46ai7","kind":"symbol","type":"topic","url":"\/documentation\/glib\/rwlock\/init(retainingraw:)-46ai7"},"doc://GLib/documentation/GLib/RWLock/init(retainingRaw:)-4hhp2":{"role":"symbol","title":"init(retainingRaw:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"retainingRaw"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeRawPointer","preciseIdentifier":"s:SV"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Unsafe untyped, retaining initialiser."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Do not use unless you know the underlying data type the pointer points to conforms to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLockProtocol"},{"type":"text","text":"."}]}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLock\/init(retainingRaw:)-4hhp2","kind":"symbol","type":"topic","url":"\/documentation\/glib\/rwlock\/init(retainingraw:)-4hhp2"},"doc://GLib/documentation/GLib/Mutex":{"role":"symbol","title":"Mutex","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Mutex"}],"abstract":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Mutex"},{"type":"text","text":" struct is an opaque data structure to represent a mutex"},{"type":"text","text":" "},{"type":"text","text":"(mutual exclusion). It can be used to protect data against shared"},{"type":"text","text":" "},{"type":"text","text":"access."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/Mutex","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Mutex"}],"url":"\/documentation\/glib\/mutex"},"doc://GLib/documentation/GLib/RWLock/init(_:)-69bry":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"!("},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GRWLock"},{"kind":"text","text":">?)"}],"abstract":[{"type":"text","text":"Optional initialiser from the underlying "},{"type":"codeVoice","code":"C"},{"type":"text","text":" data type."},{"type":"text","text":" "},{"type":"text","text":"This creates an instance without performing an unbalanced retain"},{"type":"text","text":" "},{"type":"text","text":"i.e., ownership is transferred to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLock"},{"type":"text","text":" instance."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLock\/init(_:)-69bry","kind":"symbol","type":"topic","url":"\/documentation\/glib\/rwlock\/init(_:)-69bry"},"doc://GLib/documentation/GLib/RWLock/init(_:)-21sx0":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GRWLock"},{"kind":"text","text":">)"}],"abstract":[{"type":"text","text":"Designated initialiser from a constant pointer to the underlying "},{"type":"codeVoice","code":"C"},{"type":"text","text":" data type."},{"type":"text","text":" "},{"type":"text","text":"This creates an instance without performing an unbalanced retain"},{"type":"text","text":" "},{"type":"text","text":"i.e., ownership is transferred to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLock"},{"type":"text","text":" instance."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLock\/init(_:)-21sx0","kind":"symbol","type":"topic","url":"\/documentation\/glib\/rwlock\/init(_:)-21sx0"},"doc://GLib/documentation/GLib/RWLock/init(retaining:)":{"role":"symbol","title":"init(retaining:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"retaining"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GRWLock"},{"kind":"text","text":">)"}],"abstract":[{"type":"text","text":"Designated initialiser from the underlying "},{"type":"codeVoice","code":"C"},{"type":"text","text":" data type."},{"type":"text","text":" "},{"type":"codeVoice","code":"GRWLock"},{"type":"text","text":" does not allow reference counting, so despite the name no actual retaining will occur."},{"type":"text","text":" "},{"type":"text","text":"i.e., ownership is transferred to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLock"},{"type":"text","text":" instance."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLock\/init(retaining:)","kind":"symbol","type":"topic","url":"\/documentation\/glib\/rwlock\/init(retaining:)"},"doc://GLib/documentation/GLib/PointerWrapper":{"role":"symbol","title":"PointerWrapper","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"PointerWrapper"}],"abstract":[{"type":"text","text":"Protocol for GLib types that wrap pointers."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/PointerWrapper","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"PointerWrapper"}],"url":"\/documentation\/glib\/pointerwrapper"},"doc://GLib/documentation/GLib/RWLock/ptr":{"role":"symbol","title":"ptr","fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"ptr"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutableRawPointer","preciseIdentifier":"s:Sv"},{"kind":"text","text":"!"}],"abstract":[{"type":"text","text":"Untyped pointer to the underlying "},{"type":"codeVoice","code":"GRWLock"},{"type":"text","text":" instance."},{"type":"text","text":" "},{"type":"text","text":"For type-safe access, use the generated, typed pointer "},{"type":"codeVoice","code":"RWLockProtocol\/_ptr"},{"type":"text","text":" property instead."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLock\/ptr","kind":"symbol","type":"topic","url":"\/documentation\/glib\/rwlock\/ptr"},"doc://GLib/documentation/GLib/RWLock/init(_:)-187l8":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"!("},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GRWLock"},{"kind":"text","text":">?)"}],"abstract":[{"type":"text","text":"Optional initialiser from a constant pointer to the underlying "},{"type":"codeVoice","code":"C"},{"type":"text","text":" data type."},{"type":"text","text":" "},{"type":"text","text":"This creates an instance without performing an unbalanced retain"},{"type":"text","text":" "},{"type":"text","text":"i.e., ownership is transferred to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLock"},{"type":"text","text":" instance."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLock\/init(_:)-187l8","kind":"symbol","type":"topic","url":"\/documentation\/glib\/rwlock\/init(_:)-187l8"},"doc://GLib/documentation/GLib/RWLock":{"role":"symbol","title":"RWLock","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"RWLock"}],"abstract":[{"type":"text","text":"The GRWLock struct is an opaque data structure to represent a"},{"type":"text","text":" "},{"type":"text","text":"reader-writer lock. It is similar to a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Mutex"},{"type":"text","text":" in that it allows"},{"type":"text","text":" "},{"type":"text","text":"multiple threads to coordinate access to a shared resource."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLock","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"RWLock"}],"url":"\/documentation\/glib\/rwlock"},"doc://GLib/documentation/GLib/RWLock/init(_:)-9jfa5":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Reference intialiser for a related type that implements "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLockProtocol"},{"type":"text","text":" "},{"type":"codeVoice","code":"GRWLock"},{"type":"text","text":" does not allow reference counting."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLock\/init(_:)-9jfa5","kind":"symbol","type":"topic","url":"\/documentation\/glib\/rwlock\/init(_:)-9jfa5"},"doc://GLib/documentation/GLib/RWLock/init(gpointer:)":{"role":"symbol","title":"init(gpointer:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"!("},{"kind":"externalParam","text":"gpointer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"gpointer","preciseIdentifier":"c:@T@gpointer"},{"kind":"text","text":"?)"}],"abstract":[{"type":"text","text":"Optional initialiser from a non-mutating "},{"type":"codeVoice","code":"gpointer"},{"type":"text","text":" to"},{"type":"text","text":" "},{"type":"text","text":"the underlying "},{"type":"codeVoice","code":"C"},{"type":"text","text":" data type."},{"type":"text","text":" "},{"type":"text","text":"This creates an instance without performing an unbalanced retain"},{"type":"text","text":" "},{"type":"text","text":"i.e., ownership is transferred to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLock"},{"type":"text","text":" instance."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLock\/init(gpointer:)","kind":"symbol","type":"topic","url":"\/documentation\/glib\/rwlock\/init(gpointer:)"}}}