{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"trylock"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"languages":["swift"],"platforms":["macOS"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/glib\/recmutexprotocol\/trylock()"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/GLib\/documentation\/GLib\/RecMutexProtocol\/trylock()","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Tries to lock "},{"type":"codeVoice","code":"recMutex"},{"type":"text","text":". If "},{"type":"codeVoice","code":"recMutex"},{"type":"text","text":" is already locked"},{"type":"text","text":" "},{"type":"text","text":"by another thread, it immediately returns "},{"type":"codeVoice","code":"false"},{"type":"text","text":". Otherwise"},{"type":"text","text":" "},{"type":"text","text":"it locks "},{"type":"codeVoice","code":"recMutex"},{"type":"text","text":" and returns "},{"type":"codeVoice","code":"true"},{"type":"text","text":"."}],"kind":"symbol","metadata":{"role":"symbol","title":"trylock()","roleHeading":"Instance Method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"trylock"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"symbolKind":"method","externalID":"s:4GLib16RecMutexProtocolPAAE7trylockSbyF","extendedModule":"GLib","modules":[{"name":"GLib"}]},"hierarchy":{"paths":[["doc:\/\/GLib\/documentation\/GLib","doc:\/\/GLib\/documentation\/GLib\/RecMutexProtocol"]]},"references":{"doc://GLib/documentation/GLib/Mutex":{"role":"symbol","title":"Mutex","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Mutex"}],"abstract":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Mutex"},{"type":"text","text":" struct is an opaque data structure to represent a mutex"},{"type":"text","text":" "},{"type":"text","text":"(mutual exclusion). It can be used to protect data against shared"},{"type":"text","text":" "},{"type":"text","text":"access."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/Mutex","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Mutex"}],"url":"\/documentation\/glib\/mutex"},"doc://GLib/documentation/GLib/RecMutexProtocol/trylock()":{"role":"symbol","title":"trylock()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"trylock"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"abstract":[{"type":"text","text":"Tries to lock "},{"type":"codeVoice","code":"recMutex"},{"type":"text","text":". If "},{"type":"codeVoice","code":"recMutex"},{"type":"text","text":" is already locked"},{"type":"text","text":" "},{"type":"text","text":"by another thread, it immediately returns "},{"type":"codeVoice","code":"false"},{"type":"text","text":". Otherwise"},{"type":"text","text":" "},{"type":"text","text":"it locks "},{"type":"codeVoice","code":"recMutex"},{"type":"text","text":" and returns "},{"type":"codeVoice","code":"true"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RecMutexProtocol\/trylock()","kind":"symbol","type":"topic","url":"\/documentation\/glib\/recmutexprotocol\/trylock()"},"doc://GLib/documentation/GLib/RecMutexProtocol":{"role":"symbol","title":"RecMutexProtocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"RecMutexProtocol"}],"abstract":[{"type":"text","text":"The GRecMutex struct is an opaque data structure to represent a"},{"type":"text","text":" "},{"type":"text","text":"recursive mutex. It is similar to a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Mutex"},{"type":"text","text":" with the difference"},{"type":"text","text":" "},{"type":"text","text":"that it is possible to lock a GRecMutex multiple times in the same"},{"type":"text","text":" "},{"type":"text","text":"thread without deadlock. When doing so, care has to be taken to"},{"type":"text","text":" "},{"type":"text","text":"unlock the recursive mutex as often as it has been locked."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RecMutexProtocol","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"RecMutexProtocol"}],"url":"\/documentation\/glib\/recmutexprotocol"},"doc://GLib/documentation/GLib":{"role":"collection","title":"GLib","abstract":[],"identifier":"doc:\/\/GLib\/documentation\/GLib","kind":"symbol","type":"topic","url":"\/documentation\/glib"}}}