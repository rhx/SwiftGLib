{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"RecMutexProtocol"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","identifier":"doc:\/\/GLib\/documentation\/GLib\/PointerWrapper","preciseIdentifier":"s:4GLib14PointerWrapperP","text":"PointerWrapper"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/RecMutex"},{"type":"text","text":" is allocated in static storage then it can be used"},{"type":"text","text":" "},{"type":"text","text":"without initialisation.  Otherwise, you should call"},{"type":"text","text":" "},{"type":"codeVoice","code":"g_rec_mutex_init()"},{"type":"text","text":" on it and "},{"type":"codeVoice","code":"g_rec_mutex_clear()"},{"type":"text","text":" when done."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A GRecMutex should only be accessed with the"},{"type":"text","text":" "},{"type":"text","text":"g_rec_mutex_ functions."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/RecMutexProtocol"},{"type":"text","text":" protocol exposes the methods and properties of an underlying "},{"type":"codeVoice","code":"GRecMutex"},{"type":"text","text":" instance."},{"type":"text","text":" "},{"type":"text","text":"The default implementation of these can be found in the protocol extension below."},{"type":"text","text":" "},{"type":"text","text":"For a concrete class that implements these methods and properties, see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/RecMutex"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Alternatively, use "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/RecMutexRef"},{"type":"text","text":" as a lighweight, "},{"type":"codeVoice","code":"unowned"},{"type":"text","text":" reference if you already have an instance you just want to use."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/glib\/recmutexprotocol"],"traits":[{"interfaceLanguage":"swift"}]}],"relationshipsSections":[{"identifiers":["doc:\/\/GLib\/documentation\/GLib\/PointerWrapper"],"kind":"relationships","title":"Inherits From","type":"inheritsFrom"},{"identifiers":["doc:\/\/GLib\/documentation\/GLib\/RecMutex","doc:\/\/GLib\/documentation\/GLib\/RecMutexRef"],"kind":"relationships","title":"Conforming Types","type":"conformingTypes"}],"identifier":{"url":"doc:\/\/GLib\/documentation\/GLib\/RecMutexProtocol","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"The GRecMutex struct is an opaque data structure to represent a"},{"type":"text","text":" "},{"type":"text","text":"recursive mutex. It is similar to a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Mutex"},{"type":"text","text":" with the difference"},{"type":"text","text":" "},{"type":"text","text":"that it is possible to lock a GRecMutex multiple times in the same"},{"type":"text","text":" "},{"type":"text","text":"thread without deadlock. When doing so, care has to be taken to"},{"type":"text","text":" "},{"type":"text","text":"unlock the recursive mutex as often as it has been locked."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"RecMutexProtocol"}],"title":"RecMutexProtocol","roleHeading":"Protocol","role":"symbol","symbolKind":"protocol","externalID":"s:4GLib16RecMutexProtocolP","modules":[{"name":"GLib"}],"navigatorTitle":[{"kind":"identifier","text":"RecMutexProtocol"}]},"hierarchy":{"paths":[["doc:\/\/GLib\/documentation\/GLib"]]},"topicSections":[{"title":"Instance Methods","identifiers":["doc:\/\/GLib\/documentation\/GLib\/RecMutexProtocol\/clear()","doc:\/\/GLib\/documentation\/GLib\/RecMutexProtocol\/init_()","doc:\/\/GLib\/documentation\/GLib\/RecMutexProtocol\/lock()","doc:\/\/GLib\/documentation\/GLib\/RecMutexProtocol\/trylock()","doc:\/\/GLib\/documentation\/GLib\/RecMutexProtocol\/unlock()"]}],"references":{"doc://GLib/documentation/GLib/PointerWrapper":{"role":"symbol","title":"PointerWrapper","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"PointerWrapper"}],"abstract":[{"type":"text","text":"Protocol for GLib types that wrap pointers."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/PointerWrapper","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"PointerWrapper"}],"url":"\/documentation\/glib\/pointerwrapper"},"doc://GLib/documentation/GLib/RecMutexProtocol/clear()":{"role":"symbol","title":"clear()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"clear"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Frees the resources allocated to a recursive mutex with"},{"type":"text","text":" "},{"type":"codeVoice","code":"g_rec_mutex_init()"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RecMutexProtocol\/clear()","kind":"symbol","type":"topic","url":"\/documentation\/glib\/recmutexprotocol\/clear()"},"doc://GLib/documentation/GLib/Mutex":{"role":"symbol","title":"Mutex","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Mutex"}],"abstract":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Mutex"},{"type":"text","text":" struct is an opaque data structure to represent a mutex"},{"type":"text","text":" "},{"type":"text","text":"(mutual exclusion). It can be used to protect data against shared"},{"type":"text","text":" "},{"type":"text","text":"access."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/Mutex","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Mutex"}],"url":"\/documentation\/glib\/mutex"},"doc://GLib/documentation/GLib/RecMutexProtocol/unlock()":{"role":"symbol","title":"unlock()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"unlock"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Unlocks "},{"type":"codeVoice","code":"recMutex"},{"type":"text","text":". If another thread is blocked in a"},{"type":"text","text":" "},{"type":"codeVoice","code":"g_rec_mutex_lock()"},{"type":"text","text":" call for "},{"type":"codeVoice","code":"recMutex"},{"type":"text","text":", it will become unblocked"},{"type":"text","text":" "},{"type":"text","text":"and can lock "},{"type":"codeVoice","code":"recMutex"},{"type":"text","text":" itself."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RecMutexProtocol\/unlock()","kind":"symbol","type":"topic","url":"\/documentation\/glib\/recmutexprotocol\/unlock()"},"doc://GLib/documentation/GLib/RecMutexProtocol/trylock()":{"role":"symbol","title":"trylock()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"trylock"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"abstract":[{"type":"text","text":"Tries to lock "},{"type":"codeVoice","code":"recMutex"},{"type":"text","text":". If "},{"type":"codeVoice","code":"recMutex"},{"type":"text","text":" is already locked"},{"type":"text","text":" "},{"type":"text","text":"by another thread, it immediately returns "},{"type":"codeVoice","code":"false"},{"type":"text","text":". Otherwise"},{"type":"text","text":" "},{"type":"text","text":"it locks "},{"type":"codeVoice","code":"recMutex"},{"type":"text","text":" and returns "},{"type":"codeVoice","code":"true"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RecMutexProtocol\/trylock()","kind":"symbol","type":"topic","url":"\/documentation\/glib\/recmutexprotocol\/trylock()"},"doc://GLib/documentation/GLib/RecMutexProtocol/lock()":{"role":"symbol","title":"lock()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"lock"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Locks "},{"type":"codeVoice","code":"recMutex"},{"type":"text","text":". If "},{"type":"codeVoice","code":"recMutex"},{"type":"text","text":" is already locked by another"},{"type":"text","text":" "},{"type":"text","text":"thread, the current thread will block until "},{"type":"codeVoice","code":"recMutex"},{"type":"text","text":" is"},{"type":"text","text":" "},{"type":"text","text":"unlocked by the other thread. If "},{"type":"codeVoice","code":"recMutex"},{"type":"text","text":" is already locked"},{"type":"text","text":" "},{"type":"text","text":"by the current thread, the ‘lock count’ of "},{"type":"codeVoice","code":"recMutex"},{"type":"text","text":" is increased."},{"type":"text","text":" "},{"type":"text","text":"The mutex will only become available again when it is unlocked"},{"type":"text","text":" "},{"type":"text","text":"as many times as it has been locked."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RecMutexProtocol\/lock()","kind":"symbol","type":"topic","url":"\/documentation\/glib\/recmutexprotocol\/lock()"},"doc://GLib/documentation/GLib/RecMutexProtocol/init_()":{"role":"symbol","title":"init_()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"init_"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Initializes a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/RecMutex"},{"type":"text","text":" so that it can be used."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RecMutexProtocol\/init_()","kind":"symbol","type":"topic","url":"\/documentation\/glib\/recmutexprotocol\/init_()"},"doc://GLib/documentation/GLib/RecMutexRef":{"role":"symbol","title":"RecMutexRef","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"RecMutexRef"}],"abstract":[{"type":"text","text":"The GRecMutex struct is an opaque data structure to represent a"},{"type":"text","text":" "},{"type":"text","text":"recursive mutex. It is similar to a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Mutex"},{"type":"text","text":" with the difference"},{"type":"text","text":" "},{"type":"text","text":"that it is possible to lock a GRecMutex multiple times in the same"},{"type":"text","text":" "},{"type":"text","text":"thread without deadlock. When doing so, care has to be taken to"},{"type":"text","text":" "},{"type":"text","text":"unlock the recursive mutex as often as it has been locked."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RecMutexRef","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"RecMutexRef"}],"url":"\/documentation\/glib\/recmutexref"},"doc://GLib/documentation/GLib/RecMutexProtocol":{"role":"symbol","title":"RecMutexProtocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"RecMutexProtocol"}],"abstract":[{"type":"text","text":"The GRecMutex struct is an opaque data structure to represent a"},{"type":"text","text":" "},{"type":"text","text":"recursive mutex. It is similar to a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Mutex"},{"type":"text","text":" with the difference"},{"type":"text","text":" "},{"type":"text","text":"that it is possible to lock a GRecMutex multiple times in the same"},{"type":"text","text":" "},{"type":"text","text":"thread without deadlock. When doing so, care has to be taken to"},{"type":"text","text":" "},{"type":"text","text":"unlock the recursive mutex as often as it has been locked."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RecMutexProtocol","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"RecMutexProtocol"}],"url":"\/documentation\/glib\/recmutexprotocol"},"doc://GLib/documentation/GLib/RecMutex":{"role":"symbol","title":"RecMutex","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"RecMutex"}],"abstract":[{"type":"text","text":"The GRecMutex struct is an opaque data structure to represent a"},{"type":"text","text":" "},{"type":"text","text":"recursive mutex. It is similar to a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Mutex"},{"type":"text","text":" with the difference"},{"type":"text","text":" "},{"type":"text","text":"that it is possible to lock a GRecMutex multiple times in the same"},{"type":"text","text":" "},{"type":"text","text":"thread without deadlock. When doing so, care has to be taken to"},{"type":"text","text":" "},{"type":"text","text":"unlock the recursive mutex as often as it has been locked."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RecMutex","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"RecMutex"}],"url":"\/documentation\/glib\/recmutex"},"doc://GLib/documentation/GLib":{"role":"collection","title":"GLib","abstract":[],"identifier":"doc:\/\/GLib\/documentation\/GLib","kind":"symbol","type":"topic","url":"\/documentation\/glib"}}}