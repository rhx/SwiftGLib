{"variants":[{"paths":["\/documentation\/glib\/staticrecmutex\/staticrecmutexprotocol-implementations"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"identifier":{"url":"doc:\/\/GLib\/documentation\/GLib\/StaticRecMutex\/StaticRecMutexProtocol-Implementations","interfaceLanguage":"swift"},"topicSections":[{"title":"Instance Methods","identifiers":["doc:\/\/GLib\/documentation\/GLib\/StaticRecMutex\/free()","doc:\/\/GLib\/documentation\/GLib\/StaticRecMutex\/init_()","doc:\/\/GLib\/documentation\/GLib\/StaticRecMutex\/lock()","doc:\/\/GLib\/documentation\/GLib\/StaticRecMutex\/lockFull(depth:)","doc:\/\/GLib\/documentation\/GLib\/StaticRecMutex\/trylock()","doc:\/\/GLib\/documentation\/GLib\/StaticRecMutex\/unlock()","doc:\/\/GLib\/documentation\/GLib\/StaticRecMutex\/unlockFull()"],"generated":true}],"kind":"article","metadata":{"modules":[{"name":"GLib"}],"role":"collectionGroup","title":"StaticRecMutexProtocol Implementations"},"hierarchy":{"paths":[["doc:\/\/GLib\/documentation\/GLib","doc:\/\/GLib\/documentation\/GLib\/StaticRecMutex"]]},"references":{"doc://GLib/documentation/GLib/StaticRecMutex/lockFull(depth:)":{"role":"symbol","title":"lockFull(depth:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"lockFull"},{"kind":"text","text":"("},{"kind":"externalParam","text":"depth"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Works like calling "},{"type":"codeVoice","code":"g_static_rec_mutex_lock()"},{"type":"text","text":" for "},{"type":"codeVoice","code":"mutex"},{"type":"text","text":" "},{"type":"codeVoice","code":"depth"},{"type":"text","text":" times."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRecMutex\/lockFull(depth:)","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/glib\/staticrecmutex\/lockfull(depth:)"},"doc://GLib/documentation/GLib/StaticMutex":{"role":"symbol","title":"StaticMutex","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"StaticMutex"}],"abstract":[{"type":"text","text":"A "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticMutex"},{"type":"text","text":" works like a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Mutex"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticMutex","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"StaticMutex"}],"url":"\/documentation\/glib\/staticmutex"},"doc://GLib/documentation/GLib/StaticRecMutex":{"role":"symbol","title":"StaticRecMutex","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"StaticRecMutex"}],"abstract":[{"type":"text","text":"A "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRecMutex"},{"type":"text","text":" works like a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticMutex"},{"type":"text","text":", but it can be locked"},{"type":"text","text":" "},{"type":"text","text":"multiple times by one thread. If you enter it n times, you have to"},{"type":"text","text":" "},{"type":"text","text":"unlock it n times again to let other threads lock it. An exception"},{"type":"text","text":" "},{"type":"text","text":"is the function "},{"type":"codeVoice","code":"g_static_rec_mutex_unlock_full()"},{"type":"text","text":": that allows you to"},{"type":"text","text":" "},{"type":"text","text":"unlock a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRecMutex"},{"type":"text","text":" completely returning the depth, (i.e. the"},{"type":"text","text":" "},{"type":"text","text":"number of times this mutex was locked). The depth can later be used"},{"type":"text","text":" "},{"type":"text","text":"to restore the state of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRecMutex"},{"type":"text","text":" by calling"},{"type":"text","text":" "},{"type":"codeVoice","code":"g_static_rec_mutex_lock_full()"},{"type":"text","text":". In GLib 2.32, "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRecMutex"},{"type":"text","text":" has"},{"type":"text","text":" "},{"type":"text","text":"been deprecated in favor of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/RecMutex"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRecMutex","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"StaticRecMutex"}],"url":"\/documentation\/glib\/staticrecmutex"},"doc://GLib/documentation/GLib/RecMutex":{"role":"symbol","title":"RecMutex","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"RecMutex"}],"abstract":[{"type":"text","text":"The GRecMutex struct is an opaque data structure to represent a"},{"type":"text","text":" "},{"type":"text","text":"recursive mutex. It is similar to a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Mutex"},{"type":"text","text":" with the difference"},{"type":"text","text":" "},{"type":"text","text":"that it is possible to lock a GRecMutex multiple times in the same"},{"type":"text","text":" "},{"type":"text","text":"thread without deadlock. When doing so, care has to be taken to"},{"type":"text","text":" "},{"type":"text","text":"unlock the recursive mutex as often as it has been locked."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RecMutex","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"RecMutex"}],"url":"\/documentation\/glib\/recmutex"},"doc://GLib/documentation/GLib/StaticRecMutex/init_()":{"role":"symbol","title":"init_()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"init_"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"A "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRecMutex"},{"type":"text","text":" must be initialized with this function before it"},{"type":"text","text":" "},{"type":"text","text":"can be used. Alternatively you can initialize it with"},{"type":"text","text":" "},{"type":"codeVoice","code":"G_STATIC_REC_MUTEX_INIT"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRecMutex\/init_()","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/glib\/staticrecmutex\/init_()"},"doc://GLib/documentation/GLib/StaticRecMutex/unlock()":{"role":"symbol","title":"unlock()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"unlock"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Unlocks "},{"type":"codeVoice","code":"mutex"},{"type":"text","text":". Another thread will be allowed to lock "},{"type":"codeVoice","code":"mutex"},{"type":"text","text":" only"},{"type":"text","text":" "},{"type":"text","text":"when it has been unlocked as many times as it had been locked"},{"type":"text","text":" "},{"type":"text","text":"before. If "},{"type":"codeVoice","code":"mutex"},{"type":"text","text":" is completely unlocked and another thread is"},{"type":"text","text":" "},{"type":"text","text":"blocked in a "},{"type":"codeVoice","code":"g_static_rec_mutex_lock()"},{"type":"text","text":" call for "},{"type":"codeVoice","code":"mutex"},{"type":"text","text":", it will be"},{"type":"text","text":" "},{"type":"text","text":"woken and can lock "},{"type":"codeVoice","code":"mutex"},{"type":"text","text":" itself."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRecMutex\/unlock()","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/glib\/staticrecmutex\/unlock()"},"doc://GLib/documentation/GLib":{"role":"collection","title":"GLib","abstract":[],"identifier":"doc:\/\/GLib\/documentation\/GLib","kind":"symbol","type":"topic","url":"\/documentation\/glib"},"doc://GLib/documentation/GLib/StaticRecMutex/free()":{"role":"symbol","title":"free()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"free"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Releases all resources allocated to a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRecMutex"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRecMutex\/free()","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/glib\/staticrecmutex\/free()"},"doc://GLib/documentation/GLib/StaticRecMutex/unlockFull()":{"role":"symbol","title":"unlockFull()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"unlockFull"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"}],"abstract":[{"type":"text","text":"Completely unlocks "},{"type":"codeVoice","code":"mutex"},{"type":"text","text":". If another thread is blocked in a"},{"type":"text","text":" "},{"type":"codeVoice","code":"g_static_rec_mutex_lock()"},{"type":"text","text":" call for "},{"type":"codeVoice","code":"mutex"},{"type":"text","text":", it will be woken and can"},{"type":"text","text":" "},{"type":"text","text":"lock "},{"type":"codeVoice","code":"mutex"},{"type":"text","text":" itself. This function returns the number of times that"},{"type":"text","text":" "},{"type":"codeVoice","code":"mutex"},{"type":"text","text":" has been locked by the current thread. To restore the state"},{"type":"text","text":" "},{"type":"text","text":"before the call to "},{"type":"codeVoice","code":"g_static_rec_mutex_unlock_full()"},{"type":"text","text":" you can call"},{"type":"text","text":" "},{"type":"codeVoice","code":"g_static_rec_mutex_lock_full()"},{"type":"text","text":" with the depth returned by this"},{"type":"text","text":" "},{"type":"text","text":"function."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRecMutex\/unlockFull()","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/glib\/staticrecmutex\/unlockfull()"},"doc://GLib/documentation/GLib/StaticRecMutex/lock()":{"role":"symbol","title":"lock()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"lock"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Locks "},{"type":"codeVoice","code":"mutex"},{"type":"text","text":". If "},{"type":"codeVoice","code":"mutex"},{"type":"text","text":" is already locked by another thread, the"},{"type":"text","text":" "},{"type":"text","text":"current thread will block until "},{"type":"codeVoice","code":"mutex"},{"type":"text","text":" is unlocked by the other"},{"type":"text","text":" "},{"type":"text","text":"thread. If "},{"type":"codeVoice","code":"mutex"},{"type":"text","text":" is already locked by the calling thread, this"},{"type":"text","text":" "},{"type":"text","text":"functions increases the depth of "},{"type":"codeVoice","code":"mutex"},{"type":"text","text":" and returns immediately."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRecMutex\/lock()","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/glib\/staticrecmutex\/lock()"},"doc://GLib/documentation/GLib/StaticRecMutex/trylock()":{"role":"symbol","title":"trylock()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"trylock"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"abstract":[{"type":"text","text":"Tries to lock "},{"type":"codeVoice","code":"mutex"},{"type":"text","text":". If "},{"type":"codeVoice","code":"mutex"},{"type":"text","text":" is already locked by another thread,"},{"type":"text","text":" "},{"type":"text","text":"it immediately returns "},{"type":"codeVoice","code":"false"},{"type":"text","text":". Otherwise it locks "},{"type":"codeVoice","code":"mutex"},{"type":"text","text":" and returns"},{"type":"text","text":" "},{"type":"codeVoice","code":"true"},{"type":"text","text":". If "},{"type":"codeVoice","code":"mutex"},{"type":"text","text":" is already locked by the calling thread, this"},{"type":"text","text":" "},{"type":"text","text":"functions increases the depth of "},{"type":"codeVoice","code":"mutex"},{"type":"text","text":" and immediately returns"},{"type":"text","text":" "},{"type":"codeVoice","code":"true"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRecMutex\/trylock()","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/glib\/staticrecmutex\/trylock()"}}}