{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"lock"},{"kind":"text","text":"()"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Mutex"},{"type":"text","text":" is neither guaranteed to be recursive nor to be"},{"type":"text","text":" "},{"type":"text","text":"non-recursive.  As such, calling "},{"type":"codeVoice","code":"g_mutex_lock()"},{"type":"text","text":" on a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Mutex"},{"type":"text","text":" that has"},{"type":"text","text":" "},{"type":"text","text":"already been locked by the same thread results in undefined behaviour"},{"type":"text","text":" "},{"type":"text","text":"(including but not limited to deadlocks)."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/glib\/mutexref\/lock()"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/GLib\/documentation\/GLib\/MutexRef\/lock()","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Locks "},{"type":"codeVoice","code":"mutex"},{"type":"text","text":". If "},{"type":"codeVoice","code":"mutex"},{"type":"text","text":" is already locked by another thread, the"},{"type":"text","text":" "},{"type":"text","text":"current thread will block until "},{"type":"codeVoice","code":"mutex"},{"type":"text","text":" is unlocked by the other"},{"type":"text","text":" "},{"type":"text","text":"thread."}],"kind":"symbol","metadata":{"role":"symbol","title":"lock()","roleHeading":"Instance Method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"lock"},{"kind":"text","text":"()"}],"symbolKind":"method","externalID":"s:4GLib13MutexProtocolPAAE4lockyyF::SYNTHESIZED::s:4GLib8MutexRefV","extendedModule":"GLib","modules":[{"name":"GLib"}]},"hierarchy":{"paths":[["doc:\/\/GLib\/documentation\/GLib","doc:\/\/GLib\/documentation\/GLib\/MutexRef","doc:\/\/GLib\/documentation\/GLib\/MutexRef\/MutexProtocol-Implementations"]]},"references":{"doc://GLib/documentation/GLib/Mutex":{"role":"symbol","title":"Mutex","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Mutex"}],"abstract":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Mutex"},{"type":"text","text":" struct is an opaque data structure to represent a mutex"},{"type":"text","text":" "},{"type":"text","text":"(mutual exclusion). It can be used to protect data against shared"},{"type":"text","text":" "},{"type":"text","text":"access."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/Mutex","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Mutex"}],"url":"\/documentation\/glib\/mutex"},"doc://GLib/documentation/GLib/MutexRef/MutexProtocol-Implementations":{"role":"collectionGroup","title":"MutexProtocol Implementations","abstract":[],"identifier":"doc:\/\/GLib\/documentation\/GLib\/MutexRef\/MutexProtocol-Implementations","kind":"article","type":"topic","url":"\/documentation\/glib\/mutexref\/mutexprotocol-implementations"},"doc://GLib/documentation/GLib/MutexRef":{"role":"symbol","title":"MutexRef","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"MutexRef"}],"abstract":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Mutex"},{"type":"text","text":" struct is an opaque data structure to represent a mutex"},{"type":"text","text":" "},{"type":"text","text":"(mutual exclusion). It can be used to protect data against shared"},{"type":"text","text":" "},{"type":"text","text":"access."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/MutexRef","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"MutexRef"}],"url":"\/documentation\/glib\/mutexref"},"doc://GLib/documentation/GLib/MutexRef/lock()":{"role":"symbol","title":"lock()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"lock"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Locks "},{"type":"codeVoice","code":"mutex"},{"type":"text","text":". If "},{"type":"codeVoice","code":"mutex"},{"type":"text","text":" is already locked by another thread, the"},{"type":"text","text":" "},{"type":"text","text":"current thread will block until "},{"type":"codeVoice","code":"mutex"},{"type":"text","text":" is unlocked by the other"},{"type":"text","text":" "},{"type":"text","text":"thread."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/MutexRef\/lock()","kind":"symbol","type":"topic","url":"\/documentation\/glib\/mutexref\/lock()"},"doc://GLib/documentation/GLib":{"role":"collection","title":"GLib","abstract":[],"identifier":"doc:\/\/GLib\/documentation\/GLib","kind":"symbol","type":"topic","url":"\/documentation\/glib"}}}