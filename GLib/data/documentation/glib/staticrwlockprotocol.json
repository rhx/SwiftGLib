{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"StaticRWLockProtocol"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","identifier":"doc:\/\/GLib\/documentation\/GLib\/PointerWrapper","preciseIdentifier":"s:4GLib14PointerWrapperP","text":"PointerWrapper"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Take a look at the following example:"}]},{"type":"codeListing","syntax":null,"code":["  GStaticRWLock rwlock = G_STATIC_RW_LOCK_INIT;","  GPtrArray *array;","","  gpointer","  my_array_get (guint index)","  {","    gpointer retval = NULL;","","    if (!array)","      return NULL;","","    g_static_rw_lock_reader_lock (&rwlock);","    if (index < array->len)","      retval = g_ptr_array_index (array, index);","    g_static_rw_lock_reader_unlock (&rwlock);","","    return retval;","  }","","  void","  my_array_set (guint index, gpointer data)","  {","    g_static_rw_lock_writer_lock (&rwlock);","","    if (!array)","      array = g_ptr_array_new ();","","    if (index >= array->len)","      g_ptr_array_set_size (array, index + 1);","    g_ptr_array_index (array, index) = data;","","    g_static_rw_lock_writer_unlock (&rwlock);","  }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This example shows an array which can be accessed by many readers"},{"type":"text","text":" "},{"type":"text","text":"(the "},{"type":"codeVoice","code":"my_array_get()"},{"type":"text","text":" function) simultaneously, whereas the writers"},{"type":"text","text":" "},{"type":"text","text":"(the "},{"type":"codeVoice","code":"my_array_set()"},{"type":"text","text":" function) will only be allowed once at a time"},{"type":"text","text":" "},{"type":"text","text":"and only if no readers currently access the array. This is because"},{"type":"text","text":" "},{"type":"text","text":"of the potentially dangerous resizing of the array. Using these"},{"type":"text","text":" "},{"type":"text","text":"functions is fully multi-thread safe now."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Most of the time, writers should have precedence over readers. That"},{"type":"text","text":" "},{"type":"text","text":"means, for this implementation, that as soon as a writer wants to"},{"type":"text","text":" "},{"type":"text","text":"lock the data, no other reader is allowed to lock the data, whereas,"},{"type":"text","text":" "},{"type":"text","text":"of course, the readers that already have locked the data are allowed"},{"type":"text","text":" "},{"type":"text","text":"to finish their operation. As soon as the last reader unlocks the"},{"type":"text","text":" "},{"type":"text","text":"data, the writer will lock it."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Even though "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRWLock"},{"type":"text","text":" is not opaque, it should only be used"},{"type":"text","text":" "},{"type":"text","text":"with the following functions."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"All of the g_static_rw_lock_* functions can be used even if"},{"type":"text","text":" "},{"type":"codeVoice","code":"g_thread_init()"},{"type":"text","text":" has not been called. Then they do nothing, apart"},{"type":"text","text":" "},{"type":"text","text":"from g_static_rw_lock_*_trylock, which does nothing but returning "},{"type":"codeVoice","code":"true"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A read-write lock has a higher overhead than a mutex. For example, both"},{"type":"text","text":" "},{"type":"codeVoice","code":"g_static_rw_lock_reader_lock()"},{"type":"text","text":" and "},{"type":"codeVoice","code":"g_static_rw_lock_reader_unlock()"},{"type":"text","text":" have"},{"type":"text","text":" "},{"type":"text","text":"to lock and unlock a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticMutex"},{"type":"text","text":", so it takes at least twice the time"},{"type":"text","text":" "},{"type":"text","text":"to lock and unlock a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRWLock"},{"type":"text","text":" that it does to lock and unlock a"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticMutex"},{"type":"text","text":". So only data structures that are accessed by multiple"},{"type":"text","text":" "},{"type":"text","text":"readers, and which keep the lock for a considerable time justify a"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRWLock"},{"type":"text","text":". The above example most probably would fare better with a"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticMutex"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRWLockProtocol"},{"type":"text","text":" protocol exposes the methods and properties of an underlying "},{"type":"codeVoice","code":"GStaticRWLock"},{"type":"text","text":" instance."},{"type":"text","text":" "},{"type":"text","text":"The default implementation of these can be found in the protocol extension below."},{"type":"text","text":" "},{"type":"text","text":"For a concrete class that implements these methods and properties, see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRWLock"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Alternatively, use "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRWLockRef"},{"type":"text","text":" as a lighweight, "},{"type":"codeVoice","code":"unowned"},{"type":"text","text":" reference if you already have an instance you just want to use."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/glib\/staticrwlockprotocol"],"traits":[{"interfaceLanguage":"swift"}]}],"relationshipsSections":[{"identifiers":["doc:\/\/GLib\/documentation\/GLib\/PointerWrapper"],"kind":"relationships","title":"Inherits From","type":"inheritsFrom"},{"identifiers":["doc:\/\/GLib\/documentation\/GLib\/StaticRWLock","doc:\/\/GLib\/documentation\/GLib\/StaticRWLockRef"],"kind":"relationships","title":"Conforming Types","type":"conformingTypes"}],"identifier":{"url":"doc:\/\/GLib\/documentation\/GLib\/StaticRWLockProtocol","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRWLock"},{"type":"text","text":" struct represents a read-write lock. A read-write"},{"type":"text","text":" "},{"type":"text","text":"lock can be used for protecting data that some portions of code only"},{"type":"text","text":" "},{"type":"text","text":"read from, while others also write. In such situations it is"},{"type":"text","text":" "},{"type":"text","text":"desirable that several readers can read at once, whereas of course"},{"type":"text","text":" "},{"type":"text","text":"only one writer may write at a time."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"StaticRWLockProtocol"}],"title":"StaticRWLockProtocol","roleHeading":"Protocol","role":"symbol","symbolKind":"protocol","externalID":"s:4GLib20StaticRWLockProtocolP","modules":[{"name":"GLib"}],"navigatorTitle":[{"kind":"identifier","text":"StaticRWLockProtocol"}]},"hierarchy":{"paths":[["doc:\/\/GLib\/documentation\/GLib"]]},"topicSections":[{"title":"Instance Methods","identifiers":["doc:\/\/GLib\/documentation\/GLib\/StaticRWLockProtocol\/free()","doc:\/\/GLib\/documentation\/GLib\/StaticRWLockProtocol\/init_()","doc:\/\/GLib\/documentation\/GLib\/StaticRWLockProtocol\/readerLock()","doc:\/\/GLib\/documentation\/GLib\/StaticRWLockProtocol\/readerTrylock()","doc:\/\/GLib\/documentation\/GLib\/StaticRWLockProtocol\/readerUnlock()","doc:\/\/GLib\/documentation\/GLib\/StaticRWLockProtocol\/writerLock()","doc:\/\/GLib\/documentation\/GLib\/StaticRWLockProtocol\/writerTrylock()","doc:\/\/GLib\/documentation\/GLib\/StaticRWLockProtocol\/writerUnlock()"]}],"references":{"doc://GLib/documentation/GLib/StaticRWLockRef":{"role":"symbol","title":"StaticRWLockRef","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"StaticRWLockRef"}],"abstract":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRWLock"},{"type":"text","text":" struct represents a read-write lock. A read-write"},{"type":"text","text":" "},{"type":"text","text":"lock can be used for protecting data that some portions of code only"},{"type":"text","text":" "},{"type":"text","text":"read from, while others also write. In such situations it is"},{"type":"text","text":" "},{"type":"text","text":"desirable that several readers can read at once, whereas of course"},{"type":"text","text":" "},{"type":"text","text":"only one writer may write at a time."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRWLockRef","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"StaticRWLockRef"}],"url":"\/documentation\/glib\/staticrwlockref"},"doc://GLib/documentation/GLib/StaticRWLockProtocol/readerLock()":{"role":"symbol","title":"readerLock()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"readerLock"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Locks "},{"type":"codeVoice","code":"lock"},{"type":"text","text":" for reading. There may be unlimited concurrent locks for"},{"type":"text","text":" "},{"type":"text","text":"reading of a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRWLock"},{"type":"text","text":" at the same time.  If "},{"type":"codeVoice","code":"lock"},{"type":"text","text":" is already"},{"type":"text","text":" "},{"type":"text","text":"locked for writing by another thread or if another thread is already"},{"type":"text","text":" "},{"type":"text","text":"waiting to lock "},{"type":"codeVoice","code":"lock"},{"type":"text","text":" for writing, this function will block until"},{"type":"text","text":" "},{"type":"codeVoice","code":"lock"},{"type":"text","text":" is unlocked by the other writing thread and no other writing"},{"type":"text","text":" "},{"type":"text","text":"threads want to lock "},{"type":"codeVoice","code":"lock"},{"type":"text","text":". This lock has to be unlocked by"},{"type":"text","text":" "},{"type":"codeVoice","code":"g_static_rw_lock_reader_unlock()"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRWLockProtocol\/readerLock()","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/glib\/staticrwlockprotocol\/readerlock()"},"doc://GLib/documentation/GLib/StaticRWLockProtocol":{"role":"symbol","title":"StaticRWLockProtocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"StaticRWLockProtocol"}],"abstract":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRWLock"},{"type":"text","text":" struct represents a read-write lock. A read-write"},{"type":"text","text":" "},{"type":"text","text":"lock can be used for protecting data that some portions of code only"},{"type":"text","text":" "},{"type":"text","text":"read from, while others also write. In such situations it is"},{"type":"text","text":" "},{"type":"text","text":"desirable that several readers can read at once, whereas of course"},{"type":"text","text":" "},{"type":"text","text":"only one writer may write at a time."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRWLockProtocol","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"StaticRWLockProtocol"}],"url":"\/documentation\/glib\/staticrwlockprotocol"},"doc://GLib/documentation/GLib/PointerWrapper":{"role":"symbol","title":"PointerWrapper","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"PointerWrapper"}],"abstract":[{"type":"text","text":"Protocol for GLib types that wrap pointers."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/PointerWrapper","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"PointerWrapper"}],"url":"\/documentation\/glib\/pointerwrapper"},"doc://GLib/documentation/GLib/StaticRWLockProtocol/init_()":{"role":"symbol","title":"init_()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"init_"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"A "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRWLock"},{"type":"text","text":" must be initialized with this function before it"},{"type":"text","text":" "},{"type":"text","text":"can be used. Alternatively you can initialize it with"},{"type":"text","text":" "},{"type":"codeVoice","code":"G_STATIC_RW_LOCK_INIT"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRWLockProtocol\/init_()","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/glib\/staticrwlockprotocol\/init_()"},"doc://GLib/documentation/GLib/StaticRWLockProtocol/writerLock()":{"role":"symbol","title":"writerLock()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"writerLock"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Locks "},{"type":"codeVoice","code":"lock"},{"type":"text","text":" for writing. If "},{"type":"codeVoice","code":"lock"},{"type":"text","text":" is already locked for writing or"},{"type":"text","text":" "},{"type":"text","text":"reading by other threads, this function will block until "},{"type":"codeVoice","code":"lock"},{"type":"text","text":" is"},{"type":"text","text":" "},{"type":"text","text":"completely unlocked and then lock "},{"type":"codeVoice","code":"lock"},{"type":"text","text":" for writing. While this"},{"type":"text","text":" "},{"type":"text","text":"functions waits to lock "},{"type":"codeVoice","code":"lock"},{"type":"text","text":", no other thread can lock "},{"type":"codeVoice","code":"lock"},{"type":"text","text":" for"},{"type":"text","text":" "},{"type":"text","text":"reading. When "},{"type":"codeVoice","code":"lock"},{"type":"text","text":" is locked for writing, no other thread can lock"},{"type":"text","text":" "},{"type":"codeVoice","code":"lock"},{"type":"text","text":" (neither for reading nor writing). This lock has to be"},{"type":"text","text":" "},{"type":"text","text":"unlocked by "},{"type":"codeVoice","code":"g_static_rw_lock_writer_unlock()"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRWLockProtocol\/writerLock()","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/glib\/staticrwlockprotocol\/writerlock()"},"doc://GLib/documentation/GLib/StaticRWLockProtocol/readerUnlock()":{"role":"symbol","title":"readerUnlock()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"readerUnlock"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Unlocks "},{"type":"codeVoice","code":"lock"},{"type":"text","text":". If a thread waits to lock "},{"type":"codeVoice","code":"lock"},{"type":"text","text":" for writing and all"},{"type":"text","text":" "},{"type":"text","text":"locks for reading have been unlocked, the waiting thread is woken up"},{"type":"text","text":" "},{"type":"text","text":"and can lock "},{"type":"codeVoice","code":"lock"},{"type":"text","text":" for writing."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRWLockProtocol\/readerUnlock()","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/glib\/staticrwlockprotocol\/readerunlock()"},"doc://GLib/documentation/GLib/StaticRWLockProtocol/free()":{"role":"symbol","title":"free()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"free"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Releases all resources allocated to "},{"type":"codeVoice","code":"lock"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRWLockProtocol\/free()","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/glib\/staticrwlockprotocol\/free()"},"doc://GLib/documentation/GLib/StaticRWLockProtocol/writerUnlock()":{"role":"symbol","title":"writerUnlock()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"writerUnlock"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Unlocks "},{"type":"codeVoice","code":"lock"},{"type":"text","text":". If a thread is waiting to lock "},{"type":"codeVoice","code":"lock"},{"type":"text","text":" for writing and"},{"type":"text","text":" "},{"type":"text","text":"all locks for reading have been unlocked, the waiting thread is"},{"type":"text","text":" "},{"type":"text","text":"woken up and can lock "},{"type":"codeVoice","code":"lock"},{"type":"text","text":" for writing. If no thread is waiting to"},{"type":"text","text":" "},{"type":"text","text":"lock "},{"type":"codeVoice","code":"lock"},{"type":"text","text":" for writing, and some thread or threads are waiting to"},{"type":"text","text":" "},{"type":"text","text":"lock "},{"type":"codeVoice","code":"lock"},{"type":"text","text":" for reading, the waiting threads are woken up and can"},{"type":"text","text":" "},{"type":"text","text":"lock "},{"type":"codeVoice","code":"lock"},{"type":"text","text":" for reading."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRWLockProtocol\/writerUnlock()","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/glib\/staticrwlockprotocol\/writerunlock()"},"doc://GLib/documentation/GLib/StaticMutex":{"role":"symbol","title":"StaticMutex","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"StaticMutex"}],"abstract":[{"type":"text","text":"A "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticMutex"},{"type":"text","text":" works like a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Mutex"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticMutex","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"StaticMutex"}],"url":"\/documentation\/glib\/staticmutex"},"doc://GLib/documentation/GLib/StaticRWLock":{"role":"symbol","title":"StaticRWLock","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"StaticRWLock"}],"abstract":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRWLock"},{"type":"text","text":" struct represents a read-write lock. A read-write"},{"type":"text","text":" "},{"type":"text","text":"lock can be used for protecting data that some portions of code only"},{"type":"text","text":" "},{"type":"text","text":"read from, while others also write. In such situations it is"},{"type":"text","text":" "},{"type":"text","text":"desirable that several readers can read at once, whereas of course"},{"type":"text","text":" "},{"type":"text","text":"only one writer may write at a time."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRWLock","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"StaticRWLock"}],"url":"\/documentation\/glib\/staticrwlock"},"doc://GLib/documentation/GLib/StaticRWLockProtocol/readerTrylock()":{"role":"symbol","title":"readerTrylock()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"readerTrylock"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"abstract":[{"type":"text","text":"Tries to lock "},{"type":"codeVoice","code":"lock"},{"type":"text","text":" for reading. If "},{"type":"codeVoice","code":"lock"},{"type":"text","text":" is already locked for"},{"type":"text","text":" "},{"type":"text","text":"writing by another thread or if another thread is already waiting to"},{"type":"text","text":" "},{"type":"text","text":"lock "},{"type":"codeVoice","code":"lock"},{"type":"text","text":" for writing, immediately returns "},{"type":"codeVoice","code":"false"},{"type":"text","text":". Otherwise locks"},{"type":"text","text":" "},{"type":"codeVoice","code":"lock"},{"type":"text","text":" for reading and returns "},{"type":"codeVoice","code":"true"},{"type":"text","text":". This lock has to be unlocked by"},{"type":"text","text":" "},{"type":"codeVoice","code":"g_static_rw_lock_reader_unlock()"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRWLockProtocol\/readerTrylock()","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/glib\/staticrwlockprotocol\/readertrylock()"},"doc://GLib/documentation/GLib":{"role":"collection","title":"GLib","abstract":[],"identifier":"doc:\/\/GLib\/documentation\/GLib","kind":"symbol","type":"topic","url":"\/documentation\/glib"},"doc://GLib/documentation/GLib/StaticRWLockProtocol/writerTrylock()":{"role":"symbol","title":"writerTrylock()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"writerTrylock"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"abstract":[{"type":"text","text":"Tries to lock "},{"type":"codeVoice","code":"lock"},{"type":"text","text":" for writing. If "},{"type":"codeVoice","code":"lock"},{"type":"text","text":" is already locked (for"},{"type":"text","text":" "},{"type":"text","text":"either reading or writing) by another thread, it immediately returns"},{"type":"text","text":" "},{"type":"codeVoice","code":"false"},{"type":"text","text":". Otherwise it locks "},{"type":"codeVoice","code":"lock"},{"type":"text","text":" for writing and returns "},{"type":"codeVoice","code":"true"},{"type":"text","text":". This"},{"type":"text","text":" "},{"type":"text","text":"lock has to be unlocked by "},{"type":"codeVoice","code":"g_static_rw_lock_writer_unlock()"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRWLockProtocol\/writerTrylock()","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/glib\/staticrwlockprotocol\/writertrylock()"},"doc://GLib/documentation/GLib/Mutex":{"role":"symbol","title":"Mutex","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Mutex"}],"abstract":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Mutex"},{"type":"text","text":" struct is an opaque data structure to represent a mutex"},{"type":"text","text":" "},{"type":"text","text":"(mutual exclusion). It can be used to protect data against shared"},{"type":"text","text":" "},{"type":"text","text":"access."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/Mutex","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Mutex"}],"url":"\/documentation\/glib\/mutex"}}}