{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"replace"},{"kind":"text","text":"("},{"kind":"externalParam","text":"key"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"gpointer","preciseIdentifier":"c:@T@gpointer"},{"kind":"text","text":"? = nil, "},{"kind":"externalParam","text":"value"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"gpointer","preciseIdentifier":"c:@T@gpointer"},{"kind":"text","text":"? = nil) -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Starting from GLib 2.40, this function returns a boolean value to"},{"type":"text","text":" "},{"type":"text","text":"indicate whether the newly added value was already in the hash table"},{"type":"text","text":" "},{"type":"text","text":"or not."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/glib\/hashtableprotocol\/replace(key:value:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/GLib\/documentation\/GLib\/HashTableProtocol\/replace(key:value:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Inserts a new key and value into a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/HashTable"},{"type":"text","text":" similar to"},{"type":"text","text":" "},{"type":"codeVoice","code":"g_hash_table_insert()"},{"type":"text","text":". The difference is that if the key"},{"type":"text","text":" "},{"type":"text","text":"already exists in the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/HashTable"},{"type":"text","text":", it gets replaced by the"},{"type":"text","text":" "},{"type":"text","text":"new key. If you supplied a "},{"type":"codeVoice","code":"value_destroy_func"},{"type":"text","text":" when creating"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/HashTable"},{"type":"text","text":", the old value is freed using that function."},{"type":"text","text":" "},{"type":"text","text":"If you supplied a "},{"type":"codeVoice","code":"key_destroy_func"},{"type":"text","text":" when creating the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/HashTable"},{"type":"text","text":", the old key is freed using that function."}],"kind":"symbol","metadata":{"role":"symbol","title":"replace(key:value:)","roleHeading":"Instance Method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"replace"},{"kind":"text","text":"("},{"kind":"externalParam","text":"key"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"gpointer","preciseIdentifier":"c:@T@gpointer"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"value"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"gpointer","preciseIdentifier":"c:@T@gpointer"},{"kind":"text","text":"?) -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"symbolKind":"method","externalID":"s:4GLib17HashTableProtocolPAAE7replace3key5valueSbSvSg_AGtF","extendedModule":"GLib","modules":[{"name":"GLib"}]},"hierarchy":{"paths":[["doc:\/\/GLib\/documentation\/GLib","doc:\/\/GLib\/documentation\/GLib\/HashTableProtocol"]]},"references":{"doc://GLib/documentation/GLib/HashTableProtocol":{"role":"symbol","title":"HashTableProtocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HashTableProtocol"}],"abstract":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/HashTable"},{"type":"text","text":" struct is an opaque data structure to represent a"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"..\/Protocols\/HashTableProtocol.html"},{"type":"text","text":". It should only be accessed via the"},{"type":"text","text":" "},{"type":"text","text":"following functions."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/HashTableProtocol","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"HashTableProtocol"}],"url":"\/documentation\/glib\/hashtableprotocol"},"../Protocols/HashTableProtocol.html":{"title":"Hash Table","titleInlineContent":[{"type":"text","text":"Hash Table"}],"type":"link","identifier":"..\/Protocols\/HashTableProtocol.html","url":"..\/Protocols\/HashTableProtocol.html"},"doc://GLib/documentation/GLib/HashTableProtocol/replace(key:value:)":{"role":"symbol","title":"replace(key:value:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"replace"},{"kind":"text","text":"("},{"kind":"externalParam","text":"key"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"gpointer","preciseIdentifier":"c:@T@gpointer"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"value"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"gpointer","preciseIdentifier":"c:@T@gpointer"},{"kind":"text","text":"?) -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"abstract":[{"type":"text","text":"Inserts a new key and value into a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/HashTable"},{"type":"text","text":" similar to"},{"type":"text","text":" "},{"type":"codeVoice","code":"g_hash_table_insert()"},{"type":"text","text":". The difference is that if the key"},{"type":"text","text":" "},{"type":"text","text":"already exists in the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/HashTable"},{"type":"text","text":", it gets replaced by the"},{"type":"text","text":" "},{"type":"text","text":"new key. If you supplied a "},{"type":"codeVoice","code":"value_destroy_func"},{"type":"text","text":" when creating"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/HashTable"},{"type":"text","text":", the old value is freed using that function."},{"type":"text","text":" "},{"type":"text","text":"If you supplied a "},{"type":"codeVoice","code":"key_destroy_func"},{"type":"text","text":" when creating the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/HashTable"},{"type":"text","text":", the old key is freed using that function."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/HashTableProtocol\/replace(key:value:)","kind":"symbol","type":"topic","url":"\/documentation\/glib\/hashtableprotocol\/replace(key:value:)"},"doc://GLib/documentation/GLib":{"role":"collection","title":"GLib","abstract":[],"identifier":"doc:\/\/GLib\/documentation\/GLib","kind":"symbol","type":"topic","url":"\/documentation\/glib"},"doc://GLib/documentation/GLib/HashTable":{"role":"symbol","title":"HashTable","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"HashTable"}],"abstract":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/HashTable"},{"type":"text","text":" struct is an opaque data structure to represent a"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"..\/Protocols\/HashTableProtocol.html"},{"type":"text","text":". It should only be accessed via the"},{"type":"text","text":" "},{"type":"text","text":"following functions."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/HashTable","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"HashTable"}],"url":"\/documentation\/glib\/hashtable"}}}