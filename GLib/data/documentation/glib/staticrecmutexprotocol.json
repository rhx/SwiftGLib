{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"StaticRecMutexProtocol"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","identifier":"doc:\/\/GLib\/documentation\/GLib\/PointerWrapper","preciseIdentifier":"s:4GLib14PointerWrapperP","text":"PointerWrapper"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Even though "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRecMutex"},{"type":"text","text":" is not opaque, it should only be used"},{"type":"text","text":" "},{"type":"text","text":"with the following functions."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"All of the g_static_rec_mutex_* functions can be used even if"},{"type":"text","text":" "},{"type":"codeVoice","code":"g_thread_init()"},{"type":"text","text":" has not been called. Then they do nothing, apart"},{"type":"text","text":" "},{"type":"text","text":"from "},{"type":"codeVoice","code":"g_static_rec_mutex_trylock()"},{"type":"text","text":", which does nothing but returning"},{"type":"text","text":" "},{"type":"codeVoice","code":"true"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRecMutexProtocol"},{"type":"text","text":" protocol exposes the methods and properties of an underlying "},{"type":"codeVoice","code":"GStaticRecMutex"},{"type":"text","text":" instance."},{"type":"text","text":" "},{"type":"text","text":"The default implementation of these can be found in the protocol extension below."},{"type":"text","text":" "},{"type":"text","text":"For a concrete class that implements these methods and properties, see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRecMutex"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Alternatively, use "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRecMutexRef"},{"type":"text","text":" as a lighweight, "},{"type":"codeVoice","code":"unowned"},{"type":"text","text":" reference if you already have an instance you just want to use."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/glib\/staticrecmutexprotocol"],"traits":[{"interfaceLanguage":"swift"}]}],"relationshipsSections":[{"identifiers":["doc:\/\/GLib\/documentation\/GLib\/PointerWrapper"],"kind":"relationships","title":"Inherits From","type":"inheritsFrom"},{"identifiers":["doc:\/\/GLib\/documentation\/GLib\/StaticRecMutex","doc:\/\/GLib\/documentation\/GLib\/StaticRecMutexRef"],"kind":"relationships","title":"Conforming Types","type":"conformingTypes"}],"identifier":{"url":"doc:\/\/GLib\/documentation\/GLib\/StaticRecMutexProtocol","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"A "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRecMutex"},{"type":"text","text":" works like a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticMutex"},{"type":"text","text":", but it can be locked"},{"type":"text","text":" "},{"type":"text","text":"multiple times by one thread. If you enter it n times, you have to"},{"type":"text","text":" "},{"type":"text","text":"unlock it n times again to let other threads lock it. An exception"},{"type":"text","text":" "},{"type":"text","text":"is the function "},{"type":"codeVoice","code":"g_static_rec_mutex_unlock_full()"},{"type":"text","text":": that allows you to"},{"type":"text","text":" "},{"type":"text","text":"unlock a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRecMutex"},{"type":"text","text":" completely returning the depth, (i.e. the"},{"type":"text","text":" "},{"type":"text","text":"number of times this mutex was locked). The depth can later be used"},{"type":"text","text":" "},{"type":"text","text":"to restore the state of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRecMutex"},{"type":"text","text":" by calling"},{"type":"text","text":" "},{"type":"codeVoice","code":"g_static_rec_mutex_lock_full()"},{"type":"text","text":". In GLib 2.32, "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRecMutex"},{"type":"text","text":" has"},{"type":"text","text":" "},{"type":"text","text":"been deprecated in favor of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/RecMutex"},{"type":"text","text":"."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"StaticRecMutexProtocol"}],"title":"StaticRecMutexProtocol","roleHeading":"Protocol","role":"symbol","symbolKind":"protocol","externalID":"s:4GLib22StaticRecMutexProtocolP","modules":[{"name":"GLib"}],"navigatorTitle":[{"kind":"identifier","text":"StaticRecMutexProtocol"}]},"hierarchy":{"paths":[["doc:\/\/GLib\/documentation\/GLib"]]},"topicSections":[{"title":"Instance Methods","identifiers":["doc:\/\/GLib\/documentation\/GLib\/StaticRecMutexProtocol\/free()","doc:\/\/GLib\/documentation\/GLib\/StaticRecMutexProtocol\/init_()","doc:\/\/GLib\/documentation\/GLib\/StaticRecMutexProtocol\/lock()","doc:\/\/GLib\/documentation\/GLib\/StaticRecMutexProtocol\/lockFull(depth:)","doc:\/\/GLib\/documentation\/GLib\/StaticRecMutexProtocol\/trylock()","doc:\/\/GLib\/documentation\/GLib\/StaticRecMutexProtocol\/unlock()","doc:\/\/GLib\/documentation\/GLib\/StaticRecMutexProtocol\/unlockFull()"]}],"references":{"doc://GLib/documentation/GLib/StaticRecMutexProtocol/lock()":{"role":"symbol","title":"lock()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"lock"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Locks "},{"type":"codeVoice","code":"mutex"},{"type":"text","text":". If "},{"type":"codeVoice","code":"mutex"},{"type":"text","text":" is already locked by another thread, the"},{"type":"text","text":" "},{"type":"text","text":"current thread will block until "},{"type":"codeVoice","code":"mutex"},{"type":"text","text":" is unlocked by the other"},{"type":"text","text":" "},{"type":"text","text":"thread. If "},{"type":"codeVoice","code":"mutex"},{"type":"text","text":" is already locked by the calling thread, this"},{"type":"text","text":" "},{"type":"text","text":"functions increases the depth of "},{"type":"codeVoice","code":"mutex"},{"type":"text","text":" and returns immediately."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRecMutexProtocol\/lock()","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/glib\/staticrecmutexprotocol\/lock()"},"doc://GLib/documentation/GLib/StaticRecMutex":{"role":"symbol","title":"StaticRecMutex","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"StaticRecMutex"}],"abstract":[{"type":"text","text":"A "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRecMutex"},{"type":"text","text":" works like a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticMutex"},{"type":"text","text":", but it can be locked"},{"type":"text","text":" "},{"type":"text","text":"multiple times by one thread. If you enter it n times, you have to"},{"type":"text","text":" "},{"type":"text","text":"unlock it n times again to let other threads lock it. An exception"},{"type":"text","text":" "},{"type":"text","text":"is the function "},{"type":"codeVoice","code":"g_static_rec_mutex_unlock_full()"},{"type":"text","text":": that allows you to"},{"type":"text","text":" "},{"type":"text","text":"unlock a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRecMutex"},{"type":"text","text":" completely returning the depth, (i.e. the"},{"type":"text","text":" "},{"type":"text","text":"number of times this mutex was locked). The depth can later be used"},{"type":"text","text":" "},{"type":"text","text":"to restore the state of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRecMutex"},{"type":"text","text":" by calling"},{"type":"text","text":" "},{"type":"codeVoice","code":"g_static_rec_mutex_lock_full()"},{"type":"text","text":". In GLib 2.32, "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRecMutex"},{"type":"text","text":" has"},{"type":"text","text":" "},{"type":"text","text":"been deprecated in favor of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/RecMutex"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRecMutex","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"StaticRecMutex"}],"url":"\/documentation\/glib\/staticrecmutex"},"doc://GLib/documentation/GLib/PointerWrapper":{"role":"symbol","title":"PointerWrapper","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"PointerWrapper"}],"abstract":[{"type":"text","text":"Protocol for GLib types that wrap pointers."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/PointerWrapper","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"PointerWrapper"}],"url":"\/documentation\/glib\/pointerwrapper"},"doc://GLib/documentation/GLib/StaticRecMutexProtocol/trylock()":{"role":"symbol","title":"trylock()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"trylock"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"abstract":[{"type":"text","text":"Tries to lock "},{"type":"codeVoice","code":"mutex"},{"type":"text","text":". If "},{"type":"codeVoice","code":"mutex"},{"type":"text","text":" is already locked by another thread,"},{"type":"text","text":" "},{"type":"text","text":"it immediately returns "},{"type":"codeVoice","code":"false"},{"type":"text","text":". Otherwise it locks "},{"type":"codeVoice","code":"mutex"},{"type":"text","text":" and returns"},{"type":"text","text":" "},{"type":"codeVoice","code":"true"},{"type":"text","text":". If "},{"type":"codeVoice","code":"mutex"},{"type":"text","text":" is already locked by the calling thread, this"},{"type":"text","text":" "},{"type":"text","text":"functions increases the depth of "},{"type":"codeVoice","code":"mutex"},{"type":"text","text":" and immediately returns"},{"type":"text","text":" "},{"type":"codeVoice","code":"true"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRecMutexProtocol\/trylock()","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/glib\/staticrecmutexprotocol\/trylock()"},"doc://GLib/documentation/GLib/RecMutex":{"role":"symbol","title":"RecMutex","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"RecMutex"}],"abstract":[{"type":"text","text":"The GRecMutex struct is an opaque data structure to represent a"},{"type":"text","text":" "},{"type":"text","text":"recursive mutex. It is similar to a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Mutex"},{"type":"text","text":" with the difference"},{"type":"text","text":" "},{"type":"text","text":"that it is possible to lock a GRecMutex multiple times in the same"},{"type":"text","text":" "},{"type":"text","text":"thread without deadlock. When doing so, care has to be taken to"},{"type":"text","text":" "},{"type":"text","text":"unlock the recursive mutex as often as it has been locked."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RecMutex","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"RecMutex"}],"url":"\/documentation\/glib\/recmutex"},"doc://GLib/documentation/GLib/StaticRecMutexProtocol/unlockFull()":{"role":"symbol","title":"unlockFull()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"unlockFull"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"}],"abstract":[{"type":"text","text":"Completely unlocks "},{"type":"codeVoice","code":"mutex"},{"type":"text","text":". If another thread is blocked in a"},{"type":"text","text":" "},{"type":"codeVoice","code":"g_static_rec_mutex_lock()"},{"type":"text","text":" call for "},{"type":"codeVoice","code":"mutex"},{"type":"text","text":", it will be woken and can"},{"type":"text","text":" "},{"type":"text","text":"lock "},{"type":"codeVoice","code":"mutex"},{"type":"text","text":" itself. This function returns the number of times that"},{"type":"text","text":" "},{"type":"codeVoice","code":"mutex"},{"type":"text","text":" has been locked by the current thread. To restore the state"},{"type":"text","text":" "},{"type":"text","text":"before the call to "},{"type":"codeVoice","code":"g_static_rec_mutex_unlock_full()"},{"type":"text","text":" you can call"},{"type":"text","text":" "},{"type":"codeVoice","code":"g_static_rec_mutex_lock_full()"},{"type":"text","text":" with the depth returned by this"},{"type":"text","text":" "},{"type":"text","text":"function."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRecMutexProtocol\/unlockFull()","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/glib\/staticrecmutexprotocol\/unlockfull()"},"doc://GLib/documentation/GLib/StaticRecMutexProtocol/init_()":{"role":"symbol","title":"init_()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"init_"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"A "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRecMutex"},{"type":"text","text":" must be initialized with this function before it"},{"type":"text","text":" "},{"type":"text","text":"can be used. Alternatively you can initialize it with"},{"type":"text","text":" "},{"type":"codeVoice","code":"G_STATIC_REC_MUTEX_INIT"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRecMutexProtocol\/init_()","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/glib\/staticrecmutexprotocol\/init_()"},"doc://GLib/documentation/GLib/Mutex":{"role":"symbol","title":"Mutex","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Mutex"}],"abstract":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Mutex"},{"type":"text","text":" struct is an opaque data structure to represent a mutex"},{"type":"text","text":" "},{"type":"text","text":"(mutual exclusion). It can be used to protect data against shared"},{"type":"text","text":" "},{"type":"text","text":"access."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/Mutex","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Mutex"}],"url":"\/documentation\/glib\/mutex"},"doc://GLib/documentation/GLib/StaticRecMutexProtocol":{"role":"symbol","title":"StaticRecMutexProtocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"StaticRecMutexProtocol"}],"abstract":[{"type":"text","text":"A "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRecMutex"},{"type":"text","text":" works like a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticMutex"},{"type":"text","text":", but it can be locked"},{"type":"text","text":" "},{"type":"text","text":"multiple times by one thread. If you enter it n times, you have to"},{"type":"text","text":" "},{"type":"text","text":"unlock it n times again to let other threads lock it. An exception"},{"type":"text","text":" "},{"type":"text","text":"is the function "},{"type":"codeVoice","code":"g_static_rec_mutex_unlock_full()"},{"type":"text","text":": that allows you to"},{"type":"text","text":" "},{"type":"text","text":"unlock a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRecMutex"},{"type":"text","text":" completely returning the depth, (i.e. the"},{"type":"text","text":" "},{"type":"text","text":"number of times this mutex was locked). The depth can later be used"},{"type":"text","text":" "},{"type":"text","text":"to restore the state of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRecMutex"},{"type":"text","text":" by calling"},{"type":"text","text":" "},{"type":"codeVoice","code":"g_static_rec_mutex_lock_full()"},{"type":"text","text":". In GLib 2.32, "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRecMutex"},{"type":"text","text":" has"},{"type":"text","text":" "},{"type":"text","text":"been deprecated in favor of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/RecMutex"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRecMutexProtocol","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"StaticRecMutexProtocol"}],"url":"\/documentation\/glib\/staticrecmutexprotocol"},"doc://GLib/documentation/GLib/StaticRecMutexProtocol/unlock()":{"role":"symbol","title":"unlock()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"unlock"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Unlocks "},{"type":"codeVoice","code":"mutex"},{"type":"text","text":". Another thread will be allowed to lock "},{"type":"codeVoice","code":"mutex"},{"type":"text","text":" only"},{"type":"text","text":" "},{"type":"text","text":"when it has been unlocked as many times as it had been locked"},{"type":"text","text":" "},{"type":"text","text":"before. If "},{"type":"codeVoice","code":"mutex"},{"type":"text","text":" is completely unlocked and another thread is"},{"type":"text","text":" "},{"type":"text","text":"blocked in a "},{"type":"codeVoice","code":"g_static_rec_mutex_lock()"},{"type":"text","text":" call for "},{"type":"codeVoice","code":"mutex"},{"type":"text","text":", it will be"},{"type":"text","text":" "},{"type":"text","text":"woken and can lock "},{"type":"codeVoice","code":"mutex"},{"type":"text","text":" itself."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRecMutexProtocol\/unlock()","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/glib\/staticrecmutexprotocol\/unlock()"},"doc://GLib/documentation/GLib/StaticRecMutexRef":{"role":"symbol","title":"StaticRecMutexRef","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"StaticRecMutexRef"}],"abstract":[{"type":"text","text":"A "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRecMutex"},{"type":"text","text":" works like a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticMutex"},{"type":"text","text":", but it can be locked"},{"type":"text","text":" "},{"type":"text","text":"multiple times by one thread. If you enter it n times, you have to"},{"type":"text","text":" "},{"type":"text","text":"unlock it n times again to let other threads lock it. An exception"},{"type":"text","text":" "},{"type":"text","text":"is the function "},{"type":"codeVoice","code":"g_static_rec_mutex_unlock_full()"},{"type":"text","text":": that allows you to"},{"type":"text","text":" "},{"type":"text","text":"unlock a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRecMutex"},{"type":"text","text":" completely returning the depth, (i.e. the"},{"type":"text","text":" "},{"type":"text","text":"number of times this mutex was locked). The depth can later be used"},{"type":"text","text":" "},{"type":"text","text":"to restore the state of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRecMutex"},{"type":"text","text":" by calling"},{"type":"text","text":" "},{"type":"codeVoice","code":"g_static_rec_mutex_lock_full()"},{"type":"text","text":". In GLib 2.32, "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRecMutex"},{"type":"text","text":" has"},{"type":"text","text":" "},{"type":"text","text":"been deprecated in favor of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/RecMutex"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRecMutexRef","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"StaticRecMutexRef"}],"url":"\/documentation\/glib\/staticrecmutexref"},"doc://GLib/documentation/GLib/StaticRecMutexProtocol/free()":{"role":"symbol","title":"free()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"free"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Releases all resources allocated to a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRecMutex"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRecMutexProtocol\/free()","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/glib\/staticrecmutexprotocol\/free()"},"doc://GLib/documentation/GLib":{"role":"collection","title":"GLib","abstract":[],"identifier":"doc:\/\/GLib\/documentation\/GLib","kind":"symbol","type":"topic","url":"\/documentation\/glib"},"doc://GLib/documentation/GLib/StaticMutex":{"role":"symbol","title":"StaticMutex","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"StaticMutex"}],"abstract":[{"type":"text","text":"A "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticMutex"},{"type":"text","text":" works like a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Mutex"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticMutex","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"StaticMutex"}],"url":"\/documentation\/glib\/staticmutex"},"doc://GLib/documentation/GLib/StaticRecMutexProtocol/lockFull(depth:)":{"role":"symbol","title":"lockFull(depth:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"lockFull"},{"kind":"text","text":"("},{"kind":"externalParam","text":"depth"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Works like calling "},{"type":"codeVoice","code":"g_static_rec_mutex_lock()"},{"type":"text","text":" for "},{"type":"codeVoice","code":"mutex"},{"type":"text","text":" "},{"type":"codeVoice","code":"depth"},{"type":"text","text":" times."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRecMutexProtocol\/lockFull(depth:)","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/glib\/staticrecmutexprotocol\/lockfull(depth:)"}}}