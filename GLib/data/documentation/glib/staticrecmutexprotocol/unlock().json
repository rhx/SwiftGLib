{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"unlock"},{"kind":"text","text":"()"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"unlock is deprecated:"}]},{"type":"text","text":" "},{"type":"text","text":"Use g_rec_mutex_unlock()"}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/glib\/staticrecmutexprotocol\/unlock()"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/GLib\/documentation\/GLib\/StaticRecMutexProtocol\/unlock()","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Unlocks "},{"type":"codeVoice","code":"mutex"},{"type":"text","text":". Another thread will be allowed to lock "},{"type":"codeVoice","code":"mutex"},{"type":"text","text":" only"},{"type":"text","text":" "},{"type":"text","text":"when it has been unlocked as many times as it had been locked"},{"type":"text","text":" "},{"type":"text","text":"before. If "},{"type":"codeVoice","code":"mutex"},{"type":"text","text":" is completely unlocked and another thread is"},{"type":"text","text":" "},{"type":"text","text":"blocked in a "},{"type":"codeVoice","code":"g_static_rec_mutex_lock()"},{"type":"text","text":" call for "},{"type":"codeVoice","code":"mutex"},{"type":"text","text":", it will be"},{"type":"text","text":" "},{"type":"text","text":"woken and can lock "},{"type":"codeVoice","code":"mutex"},{"type":"text","text":" itself."}],"kind":"symbol","metadata":{"modules":[{"name":"GLib"}],"role":"symbol","title":"unlock()","roleHeading":"Instance Method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"unlock"},{"kind":"text","text":"()"}],"symbolKind":"method","externalID":"s:4GLib22StaticRecMutexProtocolPAAE6unlockyyF","extendedModule":"GLib","platforms":[]},"hierarchy":{"paths":[["doc:\/\/GLib\/documentation\/GLib","doc:\/\/GLib\/documentation\/GLib\/StaticRecMutexProtocol"]]},"references":{"doc://GLib/documentation/GLib/StaticRecMutexProtocol/unlock()":{"role":"symbol","title":"unlock()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"unlock"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Unlocks "},{"type":"codeVoice","code":"mutex"},{"type":"text","text":". Another thread will be allowed to lock "},{"type":"codeVoice","code":"mutex"},{"type":"text","text":" only"},{"type":"text","text":" "},{"type":"text","text":"when it has been unlocked as many times as it had been locked"},{"type":"text","text":" "},{"type":"text","text":"before. If "},{"type":"codeVoice","code":"mutex"},{"type":"text","text":" is completely unlocked and another thread is"},{"type":"text","text":" "},{"type":"text","text":"blocked in a "},{"type":"codeVoice","code":"g_static_rec_mutex_lock()"},{"type":"text","text":" call for "},{"type":"codeVoice","code":"mutex"},{"type":"text","text":", it will be"},{"type":"text","text":" "},{"type":"text","text":"woken and can lock "},{"type":"codeVoice","code":"mutex"},{"type":"text","text":" itself."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRecMutexProtocol\/unlock()","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/glib\/staticrecmutexprotocol\/unlock()"},"doc://GLib/documentation/GLib/StaticRecMutexProtocol":{"role":"symbol","title":"StaticRecMutexProtocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"StaticRecMutexProtocol"}],"abstract":[{"type":"text","text":"A "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRecMutex"},{"type":"text","text":" works like a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticMutex"},{"type":"text","text":", but it can be locked"},{"type":"text","text":" "},{"type":"text","text":"multiple times by one thread. If you enter it n times, you have to"},{"type":"text","text":" "},{"type":"text","text":"unlock it n times again to let other threads lock it. An exception"},{"type":"text","text":" "},{"type":"text","text":"is the function "},{"type":"codeVoice","code":"g_static_rec_mutex_unlock_full()"},{"type":"text","text":": that allows you to"},{"type":"text","text":" "},{"type":"text","text":"unlock a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRecMutex"},{"type":"text","text":" completely returning the depth, (i.e. the"},{"type":"text","text":" "},{"type":"text","text":"number of times this mutex was locked). The depth can later be used"},{"type":"text","text":" "},{"type":"text","text":"to restore the state of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRecMutex"},{"type":"text","text":" by calling"},{"type":"text","text":" "},{"type":"codeVoice","code":"g_static_rec_mutex_lock_full()"},{"type":"text","text":". In GLib 2.32, "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRecMutex"},{"type":"text","text":" has"},{"type":"text","text":" "},{"type":"text","text":"been deprecated in favor of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/RecMutex"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRecMutexProtocol","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"StaticRecMutexProtocol"}],"url":"\/documentation\/glib\/staticrecmutexprotocol"},"doc://GLib/documentation/GLib":{"role":"collection","title":"GLib","abstract":[],"identifier":"doc:\/\/GLib\/documentation\/GLib","kind":"symbol","type":"topic","url":"\/documentation\/glib"},"doc://GLib/documentation/GLib/StaticRecMutex":{"role":"symbol","title":"StaticRecMutex","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"StaticRecMutex"}],"abstract":[{"type":"text","text":"A "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRecMutex"},{"type":"text","text":" works like a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticMutex"},{"type":"text","text":", but it can be locked"},{"type":"text","text":" "},{"type":"text","text":"multiple times by one thread. If you enter it n times, you have to"},{"type":"text","text":" "},{"type":"text","text":"unlock it n times again to let other threads lock it. An exception"},{"type":"text","text":" "},{"type":"text","text":"is the function "},{"type":"codeVoice","code":"g_static_rec_mutex_unlock_full()"},{"type":"text","text":": that allows you to"},{"type":"text","text":" "},{"type":"text","text":"unlock a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRecMutex"},{"type":"text","text":" completely returning the depth, (i.e. the"},{"type":"text","text":" "},{"type":"text","text":"number of times this mutex was locked). The depth can later be used"},{"type":"text","text":" "},{"type":"text","text":"to restore the state of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRecMutex"},{"type":"text","text":" by calling"},{"type":"text","text":" "},{"type":"codeVoice","code":"g_static_rec_mutex_lock_full()"},{"type":"text","text":". In GLib 2.32, "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRecMutex"},{"type":"text","text":" has"},{"type":"text","text":" "},{"type":"text","text":"been deprecated in favor of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/RecMutex"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticRecMutex","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"StaticRecMutex"}],"url":"\/documentation\/glib\/staticrecmutex"},"doc://GLib/documentation/GLib/StaticMutex":{"role":"symbol","title":"StaticMutex","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"StaticMutex"}],"abstract":[{"type":"text","text":"A "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticMutex"},{"type":"text","text":" works like a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Mutex"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/StaticMutex","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"StaticMutex"}],"url":"\/documentation\/glib\/staticmutex"},"doc://GLib/documentation/GLib/RecMutex":{"role":"symbol","title":"RecMutex","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"RecMutex"}],"abstract":[{"type":"text","text":"The GRecMutex struct is an opaque data structure to represent a"},{"type":"text","text":" "},{"type":"text","text":"recursive mutex. It is similar to a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Mutex"},{"type":"text","text":" with the difference"},{"type":"text","text":" "},{"type":"text","text":"that it is possible to lock a GRecMutex multiple times in the same"},{"type":"text","text":" "},{"type":"text","text":"thread without deadlock. When doing so, care has to be taken to"},{"type":"text","text":" "},{"type":"text","text":"unlock the recursive mutex as often as it has been locked."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RecMutex","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"RecMutex"}],"url":"\/documentation\/glib\/recmutex"}}}