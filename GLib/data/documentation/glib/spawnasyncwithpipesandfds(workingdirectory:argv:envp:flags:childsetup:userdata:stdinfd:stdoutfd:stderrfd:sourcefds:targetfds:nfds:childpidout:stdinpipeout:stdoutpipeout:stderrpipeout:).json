{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"spawnAsyncWithPipesAndFds"},{"kind":"text","text":"("},{"kind":"externalParam","text":"workingDirectory"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"gchar","preciseIdentifier":"c:@T@gchar"},{"kind":"text","text":">? = nil, "},{"kind":"externalParam","text":"argv"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"gchar","preciseIdentifier":"c:@T@gchar"},{"kind":"text","text":">?>!, "},{"kind":"externalParam","text":"envp"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"gchar","preciseIdentifier":"c:@T@gchar"},{"kind":"text","text":">?>! = nil, "},{"kind":"externalParam","text":"flags"},{"kind":"text","text":": "},{"kind":"typeIdentifier","identifier":"doc:\/\/GLib\/documentation\/GLib\/SpawnFlags","preciseIdentifier":"s:4GLib10SpawnFlagsV","text":"SpawnFlags"},{"kind":"text","text":", "},{"kind":"externalParam","text":"childSetup"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"GSpawnChildSetupFunc","preciseIdentifier":"c:@T@GSpawnChildSetupFunc"},{"kind":"text","text":"? = nil, "},{"kind":"externalParam","text":"userData"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"gpointer","preciseIdentifier":"c:@T@gpointer"},{"kind":"text","text":"? = nil, "},{"kind":"externalParam","text":"stdinFd"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":", "},{"kind":"externalParam","text":"stdoutFd"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":", "},{"kind":"externalParam","text":"stderrFd"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":", "},{"kind":"externalParam","text":"sourceFds"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"gint","preciseIdentifier":"c:@T@gint"},{"kind":"text","text":">! = nil, "},{"kind":"externalParam","text":"targetFds"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"gint","preciseIdentifier":"c:@T@gint"},{"kind":"text","text":">! = nil, "},{"kind":"externalParam","text":"nFds"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":", "},{"kind":"externalParam","text":"childPidOut"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GPid","preciseIdentifier":"c:@T@GPid"},{"kind":"text","text":">! = nil, "},{"kind":"externalParam","text":"stdinPipeOut"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"gint","preciseIdentifier":"c:@T@gint"},{"kind":"text","text":">! = nil, "},{"kind":"externalParam","text":"stdoutPipeOut"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"gint","preciseIdentifier":"c:@T@gint"},{"kind":"text","text":">! = nil, "},{"kind":"externalParam","text":"stderrPipeOut"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"gint","preciseIdentifier":"c:@T@gint"},{"kind":"text","text":">! = nil) "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The child program is specified by the only argument that must be"},{"type":"text","text":" "},{"type":"text","text":"provided, "},{"type":"codeVoice","code":"argv"},{"type":"text","text":". "},{"type":"codeVoice","code":"argv"},{"type":"text","text":" should be a "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"-terminated array of strings,"},{"type":"text","text":" "},{"type":"text","text":"to be passed as the argument vector for the child. The first string"},{"type":"text","text":" "},{"type":"text","text":"in "},{"type":"codeVoice","code":"argv"},{"type":"text","text":" is of course the name of the program to execute. By default,"},{"type":"text","text":" "},{"type":"text","text":"the name of the program must be a full path. If "},{"type":"codeVoice","code":"flags"},{"type":"text","text":" contains the"},{"type":"text","text":" "},{"type":"codeVoice","code":"searchPath"},{"type":"text","text":" flag, the "},{"type":"codeVoice","code":"PATH"},{"type":"text","text":" environment variable is used to"},{"type":"text","text":" "},{"type":"text","text":"search for the executable. If "},{"type":"codeVoice","code":"flags"},{"type":"text","text":" contains the"},{"type":"text","text":" "},{"type":"codeVoice","code":"searchPathFromEnvp"},{"type":"text","text":" flag, the "},{"type":"codeVoice","code":"PATH"},{"type":"text","text":" variable from "},{"type":"codeVoice","code":"envp"},{"type":"text","text":" "},{"type":"text","text":"is used to search for the executable. If both the"},{"type":"text","text":" "},{"type":"codeVoice","code":"searchPath"},{"type":"text","text":" and "},{"type":"codeVoice","code":"searchPathFromEnvp"},{"type":"text","text":" flags are"},{"type":"text","text":" "},{"type":"text","text":"set, the "},{"type":"codeVoice","code":"PATH"},{"type":"text","text":" variable from "},{"type":"codeVoice","code":"envp"},{"type":"text","text":" takes precedence over the"},{"type":"text","text":" "},{"type":"text","text":"environment variable."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If the program name is not a full path and "},{"type":"codeVoice","code":"searchPath"},{"type":"text","text":" flag"},{"type":"text","text":" "},{"type":"text","text":"is not used, then the program will be run from the current directory"},{"type":"text","text":" "},{"type":"text","text":"(or "},{"type":"codeVoice","code":"workingDirectory"},{"type":"text","text":", if specified); this might be unexpected or even"},{"type":"text","text":" "},{"type":"text","text":"dangerous in some cases when the current directory is world-writable."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"On Windows, note that all the string or string vector arguments to"},{"type":"text","text":" "},{"type":"text","text":"this function and the other "},{"type":"codeVoice","code":"g_spawn*()"},{"type":"text","text":" functions are in UTF-8, the"},{"type":"text","text":" "},{"type":"text","text":"GLib file name encoding. Unicode characters that are not part of"},{"type":"text","text":" "},{"type":"text","text":"the system codepage passed in these arguments will be correctly"},{"type":"text","text":" "},{"type":"text","text":"available in the spawned program only if it uses wide character API"},{"type":"text","text":" "},{"type":"text","text":"to retrieve its command line. For C programs built with Microsoft’s"},{"type":"text","text":" "},{"type":"text","text":"tools it is enough to make the program have a "},{"type":"codeVoice","code":"wmain()"},{"type":"text","text":" instead of"},{"type":"text","text":" "},{"type":"codeVoice","code":"main()"},{"type":"text","text":". "},{"type":"codeVoice","code":"wmain()"},{"type":"text","text":" has a wide character argument vector as parameter."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"At least currently, mingw doesn’t support "},{"type":"codeVoice","code":"wmain()"},{"type":"text","text":", so if you use"},{"type":"text","text":" "},{"type":"text","text":"mingw to develop the spawned program, it should call"},{"type":"text","text":" "},{"type":"codeVoice","code":"g_win32_get_command_line()"},{"type":"text","text":" to get arguments in UTF-8."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"On Windows the low-level child process creation API "},{"type":"codeVoice","code":"CreateProcess()"},{"type":"text","text":" "},{"type":"text","text":"doesn’t use argument vectors, but a command line. The C runtime"},{"type":"text","text":" "},{"type":"text","text":"library’s "},{"type":"codeVoice","code":"spawn*()"},{"type":"text","text":" family of functions (which "},{"type":"codeVoice","code":"g_spawn_async_with_pipes()"},{"type":"text","text":" "},{"type":"text","text":"eventually calls) paste the argument vector elements together into"},{"type":"text","text":" "},{"type":"text","text":"a command line, and the C runtime startup code does a corresponding"},{"type":"text","text":" "},{"type":"text","text":"reconstruction of an argument vector from the command line, to be"},{"type":"text","text":" "},{"type":"text","text":"passed to "},{"type":"codeVoice","code":"main()"},{"type":"text","text":". Complications arise when you have argument vector"},{"type":"text","text":" "},{"type":"text","text":"elements that contain spaces or double quotes. The "},{"type":"codeVoice","code":"spawn*()"},{"type":"text","text":" functions"},{"type":"text","text":" "},{"type":"text","text":"don’t do any quoting or escaping, but on the other hand the startup"},{"type":"text","text":" "},{"type":"text","text":"code does do unquoting and unescaping in order to enable receiving"},{"type":"text","text":" "},{"type":"text","text":"arguments with embedded spaces or double quotes. To work around this"},{"type":"text","text":" "},{"type":"text","text":"asymmetry, "},{"type":"codeVoice","code":"g_spawn_async_with_pipes()"},{"type":"text","text":" will do quoting and escaping on"},{"type":"text","text":" "},{"type":"text","text":"argument vector elements that need it before calling the C runtime"},{"type":"text","text":" "},{"type":"codeVoice","code":"spawn()"},{"type":"text","text":" function."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The returned "},{"type":"codeVoice","code":"child_pid"},{"type":"text","text":" on Windows is a handle to the child"},{"type":"text","text":" "},{"type":"text","text":"process, not its identifier. Process handles and process"},{"type":"text","text":" "},{"type":"text","text":"identifiers are different concepts on Windows."}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"envp"},{"type":"text","text":" is a "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"-terminated array of strings, where each string"},{"type":"text","text":" "},{"type":"text","text":"has the form "},{"type":"codeVoice","code":"KEY=VALUE"},{"type":"text","text":". This will become the child’s environment."},{"type":"text","text":" "},{"type":"text","text":"If "},{"type":"codeVoice","code":"envp"},{"type":"text","text":" is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":", the child inherits its parent’s environment."}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"flags"},{"type":"text","text":" should be the bitwise OR of any flags you want to affect the"},{"type":"text","text":" "},{"type":"text","text":"function’s behaviour. The "},{"type":"codeVoice","code":"doNotReapChild"},{"type":"text","text":" means that the"},{"type":"text","text":" "},{"type":"text","text":"child will not automatically be reaped; you must use a child watch"},{"type":"text","text":" "},{"type":"text","text":"("},{"type":"codeVoice","code":"g_child_watch_add()"},{"type":"text","text":") to be notified about the death of the child process,"},{"type":"text","text":" "},{"type":"text","text":"otherwise it will stay around as a zombie process until this process exits."},{"type":"text","text":" "},{"type":"text","text":"Eventually you must call "},{"type":"codeVoice","code":"g_spawn_close_pid()"},{"type":"text","text":" on the "},{"type":"codeVoice","code":"child_pid"},{"type":"text","text":", in order to"},{"type":"text","text":" "},{"type":"text","text":"free resources which may be associated with the child process. (On Unix,"},{"type":"text","text":" "},{"type":"text","text":"using a child watch is equivalent to calling "},{"type":"codeVoice","code":"waitpid()"},{"type":"text","text":" or handling"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"SIGCHLD"},{"type":"text","text":" signal manually. On Windows, calling "},{"type":"codeVoice","code":"g_spawn_close_pid()"},{"type":"text","text":" "},{"type":"text","text":"is equivalent to calling "},{"type":"codeVoice","code":"CloseHandle()"},{"type":"text","text":" on the process handle returned"},{"type":"text","text":" "},{"type":"text","text":"in "},{"type":"codeVoice","code":"child_pid"},{"type":"text","text":"). See "},{"type":"codeVoice","code":"g_child_watch_add()"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Open UNIX file descriptors marked as "},{"type":"codeVoice","code":"FD_CLOEXEC"},{"type":"text","text":" will be automatically"},{"type":"text","text":" "},{"type":"text","text":"closed in the child process. "},{"type":"codeVoice","code":"leaveDescriptorsOpen"},{"type":"text","text":" means that"},{"type":"text","text":" "},{"type":"text","text":"other open file descriptors will be inherited by the child; otherwise all"},{"type":"text","text":" "},{"type":"text","text":"descriptors except stdin\/stdout\/stderr will be closed before calling "},{"type":"codeVoice","code":"exec()"},{"type":"text","text":" "},{"type":"text","text":"in the child. "},{"type":"codeVoice","code":"searchPath"},{"type":"text","text":" means that "},{"type":"codeVoice","code":"argv"},{"type":"text","text":"[0] need not be an"},{"type":"text","text":" "},{"type":"text","text":"absolute path, it will be looked for in the "},{"type":"codeVoice","code":"PATH"},{"type":"text","text":" environment"},{"type":"text","text":" "},{"type":"text","text":"variable. "},{"type":"codeVoice","code":"searchPathFromEnvp"},{"type":"text","text":" means need not be an"},{"type":"text","text":" "},{"type":"text","text":"absolute path, it will be looked for in the "},{"type":"codeVoice","code":"PATH"},{"type":"text","text":" variable from"},{"type":"text","text":" "},{"type":"codeVoice","code":"envp"},{"type":"text","text":". If both "},{"type":"codeVoice","code":"searchPath"},{"type":"text","text":" and "},{"type":"codeVoice","code":"searchPathFromEnvp"},{"type":"text","text":" "},{"type":"text","text":"are used, the value from "},{"type":"codeVoice","code":"envp"},{"type":"text","text":" takes precedence over the environment."}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"childInheritsStdin"},{"type":"text","text":" means that the child will inherit the parent’s"},{"type":"text","text":" "},{"type":"text","text":"standard input (by default, the child’s standard input is attached to"},{"type":"text","text":" "},{"type":"codeVoice","code":"\/dev\/null"},{"type":"text","text":"). "},{"type":"codeVoice","code":"stdinFromDevNull"},{"type":"text","text":" explicitly imposes the default"},{"type":"text","text":" "},{"type":"text","text":"behavior. Both flags cannot be enabled at the same time and, in both cases,"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"stdinPipeOut"},{"type":"text","text":" argument is ignored."}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"stdoutToDevNull"},{"type":"text","text":" means that the child’s standard output"},{"type":"text","text":" "},{"type":"text","text":"will be discarded (by default, it goes to the same location as the parent’s"},{"type":"text","text":" "},{"type":"text","text":"standard output). "},{"type":"codeVoice","code":"childInheritsStdout"},{"type":"text","text":" explicitly imposes the"},{"type":"text","text":" "},{"type":"text","text":"default behavior. Both flags cannot be enabled at the same time and, in"},{"type":"text","text":" "},{"type":"text","text":"both cases, the "},{"type":"codeVoice","code":"stdoutPipeOut"},{"type":"text","text":" argument is ignored."}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"stderrToDevNull"},{"type":"text","text":" means that the child’s standard error"},{"type":"text","text":" "},{"type":"text","text":"will be discarded (by default, it goes to the same location as the parent’s"},{"type":"text","text":" "},{"type":"text","text":"standard error). "},{"type":"codeVoice","code":"childInheritsStderr"},{"type":"text","text":" explicitly imposes the"},{"type":"text","text":" "},{"type":"text","text":"default behavior. Both flags cannot be enabled at the same time and, in"},{"type":"text","text":" "},{"type":"text","text":"both cases, the "},{"type":"codeVoice","code":"stderrPipeOut"},{"type":"text","text":" argument is ignored."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It is valid to pass the same FD in multiple parameters (e.g. you can pass"},{"type":"text","text":" "},{"type":"text","text":"a single FD for both "},{"type":"codeVoice","code":"stdoutFd"},{"type":"text","text":" and "},{"type":"codeVoice","code":"stderrFd"},{"type":"text","text":", and include it in"},{"type":"text","text":" "},{"type":"codeVoice","code":"sourceFds"},{"type":"text","text":" too)."}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"sourceFds"},{"type":"text","text":" and "},{"type":"codeVoice","code":"targetFds"},{"type":"text","text":" allow zero or more FDs from this process to be"},{"type":"text","text":" "},{"type":"text","text":"remapped to different FDs in the spawned process. If "},{"type":"codeVoice","code":"nFds"},{"type":"text","text":" is greater than"},{"type":"text","text":" "},{"type":"text","text":"zero, "},{"type":"codeVoice","code":"sourceFds"},{"type":"text","text":" and "},{"type":"codeVoice","code":"targetFds"},{"type":"text","text":" must both be non-"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" and the same length."},{"type":"text","text":" "},{"type":"text","text":"Each FD in "},{"type":"codeVoice","code":"sourceFds"},{"type":"text","text":" is remapped to the FD number at the same index in"},{"type":"text","text":" "},{"type":"codeVoice","code":"targetFds"},{"type":"text","text":". The source and target FD may be equal to simply propagate an FD"},{"type":"text","text":" "},{"type":"text","text":"to the spawned process. FD remappings are processed after standard FDs, so"},{"type":"text","text":" "},{"type":"text","text":"any target FDs which equal "},{"type":"codeVoice","code":"stdinFd"},{"type":"text","text":", "},{"type":"codeVoice","code":"stdoutFd"},{"type":"text","text":" or "},{"type":"codeVoice","code":"stderrFd"},{"type":"text","text":" will overwrite"},{"type":"text","text":" "},{"type":"text","text":"them in the spawned process."}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"sourceFds"},{"type":"text","text":" is supported on Windows since 2.72."}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"fileAndArgvZero"},{"type":"text","text":" means that the first element of "},{"type":"codeVoice","code":"argv"},{"type":"text","text":" is"},{"type":"text","text":" "},{"type":"text","text":"the file to execute, while the remaining elements are the actual"},{"type":"text","text":" "},{"type":"text","text":"argument vector to pass to the file. Normally "},{"type":"codeVoice","code":"g_spawn_async_with_pipes()"},{"type":"text","text":" "},{"type":"text","text":"uses "},{"type":"codeVoice","code":"argv"},{"type":"text","text":"[0] as the file to execute, and passes all of "},{"type":"codeVoice","code":"argv"},{"type":"text","text":" to the child."}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"childSetup"},{"type":"text","text":" and "},{"type":"codeVoice","code":"userData"},{"type":"text","text":" are a function and user data. On POSIX"},{"type":"text","text":" "},{"type":"text","text":"platforms, the function is called in the child after GLib has"},{"type":"text","text":" "},{"type":"text","text":"performed all the setup it plans to perform (including creating"},{"type":"text","text":" "},{"type":"text","text":"pipes, closing file descriptors, etc.) but before calling "},{"type":"codeVoice","code":"exec()"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"That is, "},{"type":"codeVoice","code":"childSetup"},{"type":"text","text":" is called just before calling "},{"type":"codeVoice","code":"exec()"},{"type":"text","text":" in the"},{"type":"text","text":" "},{"type":"text","text":"child. Obviously actions taken in this function will only affect"},{"type":"text","text":" "},{"type":"text","text":"the child, not the parent."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"On Windows, there is no separate "},{"type":"codeVoice","code":"fork()"},{"type":"text","text":" and "},{"type":"codeVoice","code":"exec()"},{"type":"text","text":" functionality."},{"type":"text","text":" "},{"type":"text","text":"Child processes are created and run with a single API call,"},{"type":"text","text":" "},{"type":"codeVoice","code":"CreateProcess()"},{"type":"text","text":". There is no sensible thing "},{"type":"codeVoice","code":"childSetup"},{"type":"text","text":" "},{"type":"text","text":"could be used for on Windows so it is ignored and not called."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If non-"},{"type":"codeVoice","code":"nil"},{"type":"text","text":", "},{"type":"codeVoice","code":"child_pid"},{"type":"text","text":" will on Unix be filled with the child’s"},{"type":"text","text":" "},{"type":"text","text":"process ID. You can use the process ID to send signals to the child,"},{"type":"text","text":" "},{"type":"text","text":"or to use "},{"type":"codeVoice","code":"g_child_watch_add()"},{"type":"text","text":" (or "},{"type":"codeVoice","code":"waitpid()"},{"type":"text","text":") if you specified the"},{"type":"text","text":" "},{"type":"codeVoice","code":"doNotReapChild"},{"type":"text","text":" flag. On Windows, "},{"type":"codeVoice","code":"child_pid"},{"type":"text","text":" will be"},{"type":"text","text":" "},{"type":"text","text":"filled with a handle to the child process only if you specified the"},{"type":"text","text":" "},{"type":"codeVoice","code":"doNotReapChild"},{"type":"text","text":" flag. You can then access the child"},{"type":"text","text":" "},{"type":"text","text":"process using the Win32 API, for example wait for its termination"},{"type":"text","text":" "},{"type":"text","text":"with the "},{"type":"codeVoice","code":"WaitFor*()"},{"type":"text","text":" functions, or examine its exit code with"},{"type":"text","text":" "},{"type":"codeVoice","code":"GetExitCodeProcess()"},{"type":"text","text":". You should close the handle with "},{"type":"codeVoice","code":"CloseHandle()"},{"type":"text","text":" "},{"type":"text","text":"or "},{"type":"codeVoice","code":"g_spawn_close_pid()"},{"type":"text","text":" when you no longer need it."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If non-"},{"type":"codeVoice","code":"nil"},{"type":"text","text":", the "},{"type":"codeVoice","code":"stdinPipeOut"},{"type":"text","text":", "},{"type":"codeVoice","code":"stdoutPipeOut"},{"type":"text","text":", "},{"type":"codeVoice","code":"stderrPipeOut"},{"type":"text","text":" "},{"type":"text","text":"locations will be filled with file descriptors for writing to the child’s"},{"type":"text","text":" "},{"type":"text","text":"standard input or reading from its standard output or standard error."},{"type":"text","text":" "},{"type":"text","text":"The caller of "},{"type":"codeVoice","code":"g_spawn_async_with_pipes()"},{"type":"text","text":" must close these file descriptors"},{"type":"text","text":" "},{"type":"text","text":"when they are no longer in use. If these parameters are "},{"type":"codeVoice","code":"nil"},{"type":"text","text":", the"},{"type":"text","text":" "},{"type":"text","text":"corresponding pipe won’t be created."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If "},{"type":"codeVoice","code":"stdinPipeOut"},{"type":"text","text":" is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":", the child’s standard input is attached to"},{"type":"text","text":" "},{"type":"codeVoice","code":"\/dev\/null"},{"type":"text","text":" unless "},{"type":"codeVoice","code":"childInheritsStdin"},{"type":"text","text":" is set."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If "},{"type":"codeVoice","code":"stderrPipeOut"},{"type":"text","text":" is NULL, the child’s standard error goes to the same"},{"type":"text","text":" "},{"type":"text","text":"location as the parent’s standard error unless "},{"type":"codeVoice","code":"stderrToDevNull"},{"type":"text","text":" "},{"type":"text","text":"is set."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If "},{"type":"codeVoice","code":"stdoutPipeOut"},{"type":"text","text":" is NULL, the child’s standard output goes to the same"},{"type":"text","text":" "},{"type":"text","text":"location as the parent’s standard output unless "},{"type":"codeVoice","code":"stdoutToDevNull"},{"type":"text","text":" "},{"type":"text","text":"is set."}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"error"},{"type":"text","text":" can be "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" to ignore errors, or non-"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" to report errors."},{"type":"text","text":" "},{"type":"text","text":"If an error is set, the function returns "},{"type":"codeVoice","code":"false"},{"type":"text","text":". Errors are reported"},{"type":"text","text":" "},{"type":"text","text":"even if they occur in the child (for example if the executable in"},{"type":"text","text":" "},{"type":"text","text":"``argv"},{"type":"codeVoice","code":"[0]"},{"type":"text","text":" is not found). Typically the `message` field of returned"},{"type":"text","text":" "},{"type":"text","text":"errors should be displayed to users. Possible errors are those from"},{"type":"text","text":" "},{"type":"text","text":"the `G_SPAWN_ERROR` domain."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If an error occurs, "},{"type":"codeVoice","code":"child_pid"},{"type":"text","text":", "},{"type":"codeVoice","code":"stdinPipeOut"},{"type":"text","text":", "},{"type":"codeVoice","code":"stdoutPipeOut"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"codeVoice","code":"stderrPipeOut"},{"type":"text","text":" will not be filled with valid values."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If "},{"type":"codeVoice","code":"child_pid"},{"type":"text","text":" is not "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" and an error does not occur then the returned"},{"type":"text","text":" "},{"type":"text","text":"process reference must be closed using "},{"type":"codeVoice","code":"g_spawn_close_pid()"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"On modern UNIX platforms, GLib can use an efficient process launching"},{"type":"text","text":" "},{"type":"text","text":"codepath driven internally by "},{"type":"codeVoice","code":"posix_spawn()"},{"type":"text","text":". This has the advantage of"},{"type":"text","text":" "},{"type":"text","text":"avoiding the fork-time performance costs of cloning the parent process"},{"type":"text","text":" "},{"type":"text","text":"address space, and avoiding associated memory overcommit checks that are"},{"type":"text","text":" "},{"type":"text","text":"not relevant in the context of immediately executing a distinct process."},{"type":"text","text":" "},{"type":"text","text":"This optimized codepath will be used provided that the following conditions"},{"type":"text","text":" "},{"type":"text","text":"are met:"}]},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"doNotReapChild"},{"type":"text","text":" is set"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"leaveDescriptorsOpen"},{"type":"text","text":" is set"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"searchPathFromEnvp"},{"type":"text","text":" is not set"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"workingDirectory"},{"type":"text","text":" is "},{"type":"codeVoice","code":"nil"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"childSetup"},{"type":"text","text":" is "},{"type":"codeVoice","code":"nil"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The program is of a recognised binary format, or has a shebang."},{"type":"text","text":" "},{"type":"text","text":"Otherwise, GLib will have to execute the program through the"},{"type":"text","text":" "},{"type":"text","text":"shell, which is not done using the optimized codepath."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you are writing a GTK application, and the program you are spawning is a"},{"type":"text","text":" "},{"type":"text","text":"graphical application too, then to ensure that the spawned program opens its"},{"type":"text","text":" "},{"type":"text","text":"windows on the right screen, you may want to use "},{"type":"codeVoice","code":"GdkAppLaunchContext"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"GAppLaunchContext"},{"type":"text","text":", or set the "},{"type":"codeVoice","code":"DISPLAY"},{"type":"text","text":" environment variable."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/glib\/spawnasyncwithpipesandfds(workingdirectory:argv:envp:flags:childsetup:userdata:stdinfd:stdoutfd:stderrfd:sourcefds:targetfds:nfds:childpidout:stdinpipeout:stdoutpipeout:stderrpipeout:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/GLib\/documentation\/GLib\/spawnAsyncWithPipesAndFds(workingDirectory:argv:envp:flags:childSetup:userData:stdinFd:stdoutFd:stderrFd:sourceFds:targetFds:nFds:childPidOut:stdinPipeOut:stdoutPipeOut:stderrPipeOut:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Executes a child program asynchronously (your program will not"},{"type":"text","text":" "},{"type":"text","text":"block waiting for the child to exit)."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"spawnAsyncWithPipesAndFds"},{"kind":"text","text":"("},{"kind":"externalParam","text":"workingDirectory"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"gchar","preciseIdentifier":"c:@T@gchar"},{"kind":"text","text":">?, "},{"kind":"externalParam","text":"argv"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"gchar","preciseIdentifier":"c:@T@gchar"},{"kind":"text","text":">?>!, "},{"kind":"externalParam","text":"envp"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"gchar","preciseIdentifier":"c:@T@gchar"},{"kind":"text","text":">?>!, "},{"kind":"externalParam","text":"flags"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"SpawnFlags","preciseIdentifier":"s:4GLib10SpawnFlagsV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"childSetup"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"GSpawnChildSetupFunc","preciseIdentifier":"c:@T@GSpawnChildSetupFunc"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"userData"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"gpointer","preciseIdentifier":"c:@T@gpointer"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"stdinFd"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":", "},{"kind":"externalParam","text":"stdoutFd"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":", "},{"kind":"externalParam","text":"stderrFd"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":", "},{"kind":"externalParam","text":"sourceFds"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"gint","preciseIdentifier":"c:@T@gint"},{"kind":"text","text":">!, "},{"kind":"externalParam","text":"targetFds"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"gint","preciseIdentifier":"c:@T@gint"},{"kind":"text","text":">!, "},{"kind":"externalParam","text":"nFds"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":", "},{"kind":"externalParam","text":"childPidOut"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GPid","preciseIdentifier":"c:@T@GPid"},{"kind":"text","text":">!, "},{"kind":"externalParam","text":"stdinPipeOut"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"gint","preciseIdentifier":"c:@T@gint"},{"kind":"text","text":">!, "},{"kind":"externalParam","text":"stdoutPipeOut"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"gint","preciseIdentifier":"c:@T@gint"},{"kind":"text","text":">!, "},{"kind":"externalParam","text":"stderrPipeOut"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"gint","preciseIdentifier":"c:@T@gint"},{"kind":"text","text":">!) "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"title":"spawnAsyncWithPipesAndFds(workingDirectory:argv:envp:flags:childSetup:userData:stdinFd:stdoutFd:stderrFd:sourceFds:targetFds:nFds:childPidOut:stdinPipeOut:stdoutPipeOut:stderrPipeOut:)","roleHeading":"Function","role":"symbol","symbolKind":"func","externalID":"s:4GLib25spawnAsyncWithPipesAndFds16workingDirectory4argv4envp5flags10childSetup8userData7stdinFd06stdoutR006stderrR006sourceG006targetG001nG00M6PidOut0q4PipeX00syX00tyX0SbSPys4Int8VGSg_SPyAVGSgAxA10SpawnFlagsVySvSgXCSgA_S3iSPys5Int32VGSgA4_SiSpyA2_GSgA6_A6_A6_tKF","modules":[{"name":"GLib"}]},"hierarchy":{"paths":[["doc:\/\/GLib\/documentation\/GLib"]]},"references":{"doc://GLib/documentation/GLib/SpawnFlags":{"role":"symbol","title":"SpawnFlags","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"SpawnFlags"}],"abstract":[{"type":"text","text":"Flags passed to "},{"type":"codeVoice","code":"g_spawn_sync()"},{"type":"text","text":", "},{"type":"codeVoice","code":"g_spawn_async()"},{"type":"text","text":" and "},{"type":"codeVoice","code":"g_spawn_async_with_pipes()"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/SpawnFlags","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"SpawnFlags"}],"url":"\/documentation\/glib\/spawnflags"},"doc://GLib/documentation/GLib/spawnAsyncWithPipesAndFds(workingDirectory:argv:envp:flags:childSetup:userData:stdinFd:stdoutFd:stderrFd:sourceFds:targetFds:nFds:childPidOut:stdinPipeOut:stdoutPipeOut:stderrPipeOut:)":{"role":"symbol","title":"spawnAsyncWithPipesAndFds(workingDirectory:argv:envp:flags:childSetup:userData:stdinFd:stdoutFd:stderrFd:sourceFds:targetFds:nFds:childPidOut:stdinPipeOut:stdoutPipeOut:stderrPipeOut:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"spawnAsyncWithPipesAndFds"},{"kind":"text","text":"("},{"kind":"externalParam","text":"workingDirectory"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"gchar","preciseIdentifier":"c:@T@gchar"},{"kind":"text","text":">?, "},{"kind":"externalParam","text":"argv"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"gchar","preciseIdentifier":"c:@T@gchar"},{"kind":"text","text":">?>!, "},{"kind":"externalParam","text":"envp"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"gchar","preciseIdentifier":"c:@T@gchar"},{"kind":"text","text":">?>!, "},{"kind":"externalParam","text":"flags"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"SpawnFlags","preciseIdentifier":"s:4GLib10SpawnFlagsV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"childSetup"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"GSpawnChildSetupFunc","preciseIdentifier":"c:@T@GSpawnChildSetupFunc"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"userData"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"gpointer","preciseIdentifier":"c:@T@gpointer"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"stdinFd"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":", "},{"kind":"externalParam","text":"stdoutFd"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":", "},{"kind":"externalParam","text":"stderrFd"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":", "},{"kind":"externalParam","text":"sourceFds"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"gint","preciseIdentifier":"c:@T@gint"},{"kind":"text","text":">!, "},{"kind":"externalParam","text":"targetFds"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"gint","preciseIdentifier":"c:@T@gint"},{"kind":"text","text":">!, "},{"kind":"externalParam","text":"nFds"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":", "},{"kind":"externalParam","text":"childPidOut"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GPid","preciseIdentifier":"c:@T@GPid"},{"kind":"text","text":">!, "},{"kind":"externalParam","text":"stdinPipeOut"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"gint","preciseIdentifier":"c:@T@gint"},{"kind":"text","text":">!, "},{"kind":"externalParam","text":"stdoutPipeOut"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"gint","preciseIdentifier":"c:@T@gint"},{"kind":"text","text":">!, "},{"kind":"externalParam","text":"stderrPipeOut"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"gint","preciseIdentifier":"c:@T@gint"},{"kind":"text","text":">!) "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"abstract":[{"type":"text","text":"Executes a child program asynchronously (your program will not"},{"type":"text","text":" "},{"type":"text","text":"block waiting for the child to exit)."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/spawnAsyncWithPipesAndFds(workingDirectory:argv:envp:flags:childSetup:userData:stdinFd:stdoutFd:stderrFd:sourceFds:targetFds:nFds:childPidOut:stdinPipeOut:stdoutPipeOut:stderrPipeOut:)","kind":"symbol","type":"topic","url":"\/documentation\/glib\/spawnasyncwithpipesandfds(workingdirectory:argv:envp:flags:childsetup:userdata:stdinfd:stdoutfd:stderrfd:sourcefds:targetfds:nfds:childpidout:stdinpipeout:stdoutpipeout:stderrpipeout:)"},"doc://GLib/documentation/GLib":{"role":"collection","title":"GLib","abstract":[],"identifier":"doc:\/\/GLib\/documentation\/GLib","kind":"symbol","type":"topic","url":"\/documentation\/glib"}}}