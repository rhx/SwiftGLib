{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"wait"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"MutexT"},{"kind":"text","text":">("},{"kind":"externalParam","text":"mutex"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"MutexT"},{"kind":"text","text":") "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"MutexT"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","identifier":"doc:\/\/GLib\/documentation\/GLib\/MutexProtocol","preciseIdentifier":"s:4GLib13MutexProtocolP","text":"MutexProtocol"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When using condition variables, it is possible that a spurious wakeup"},{"type":"text","text":" "},{"type":"text","text":"may occur (ie: "},{"type":"codeVoice","code":"g_cond_wait()"},{"type":"text","text":" returns even though "},{"type":"codeVoice","code":"g_cond_signal()"},{"type":"text","text":" was"},{"type":"text","text":" "},{"type":"text","text":"not called).  Itâ€™s also possible that a stolen wakeup may occur."},{"type":"text","text":" "},{"type":"text","text":"This is when "},{"type":"codeVoice","code":"g_cond_signal()"},{"type":"text","text":" is called, but another thread acquires"},{"type":"text","text":" "},{"type":"codeVoice","code":"mutex"},{"type":"text","text":" before this thread and modifies the state of the program in"},{"type":"text","text":" "},{"type":"text","text":"such a way that when "},{"type":"codeVoice","code":"g_cond_wait()"},{"type":"text","text":" is able to return, the expected"},{"type":"text","text":" "},{"type":"text","text":"condition is no longer met."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For this reason, "},{"type":"codeVoice","code":"g_cond_wait()"},{"type":"text","text":" must always be used in a loop.  See"},{"type":"text","text":" "},{"type":"text","text":"the documentation for "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Cond"},{"type":"text","text":" for a complete example."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/glib\/cond\/wait(mutex:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/GLib\/documentation\/GLib\/Cond\/wait(mutex:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Atomically releases "},{"type":"codeVoice","code":"mutex"},{"type":"text","text":" and waits until "},{"type":"codeVoice","code":"cond"},{"type":"text","text":" is signalled."},{"type":"text","text":" "},{"type":"text","text":"When this function returns, "},{"type":"codeVoice","code":"mutex"},{"type":"text","text":" is locked again and owned by the"},{"type":"text","text":" "},{"type":"text","text":"calling thread."}],"kind":"symbol","metadata":{"role":"symbol","title":"wait(mutex:)","roleHeading":"Instance Method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"wait"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"MutexT"},{"kind":"text","text":">("},{"kind":"externalParam","text":"mutex"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"MutexT"},{"kind":"text","text":")"}],"symbolKind":"method","externalID":"s:4GLib12CondProtocolPAAE4wait5mutexyqd___tAA05MutexC0Rd__lF::SYNTHESIZED::s:4GLib4CondC","extendedModule":"GLib","modules":[{"name":"GLib"}]},"hierarchy":{"paths":[["doc:\/\/GLib\/documentation\/GLib","doc:\/\/GLib\/documentation\/GLib\/Cond","doc:\/\/GLib\/documentation\/GLib\/Cond\/CondProtocol-Implementations"]]},"references":{"doc://GLib/documentation/GLib/Cond":{"role":"symbol","title":"Cond","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Cond"}],"abstract":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Cond"},{"type":"text","text":" struct is an opaque data structure that represents a"},{"type":"text","text":" "},{"type":"text","text":"condition. Threads can block on a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Cond"},{"type":"text","text":" if they find a certain"},{"type":"text","text":" "},{"type":"text","text":"condition to be false. If other threads change the state of this"},{"type":"text","text":" "},{"type":"text","text":"condition they signal the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Cond"},{"type":"text","text":", and that causes the waiting"},{"type":"text","text":" "},{"type":"text","text":"threads to be woken up."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/Cond","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Cond"}],"url":"\/documentation\/glib\/cond"},"doc://GLib/documentation/GLib/MutexProtocol":{"role":"symbol","title":"MutexProtocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"MutexProtocol"}],"abstract":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Mutex"},{"type":"text","text":" struct is an opaque data structure to represent a mutex"},{"type":"text","text":" "},{"type":"text","text":"(mutual exclusion). It can be used to protect data against shared"},{"type":"text","text":" "},{"type":"text","text":"access."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/MutexProtocol","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"MutexProtocol"}],"url":"\/documentation\/glib\/mutexprotocol"},"doc://GLib/documentation/GLib/Mutex":{"role":"symbol","title":"Mutex","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Mutex"}],"abstract":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Mutex"},{"type":"text","text":" struct is an opaque data structure to represent a mutex"},{"type":"text","text":" "},{"type":"text","text":"(mutual exclusion). It can be used to protect data against shared"},{"type":"text","text":" "},{"type":"text","text":"access."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/Mutex","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Mutex"}],"url":"\/documentation\/glib\/mutex"},"doc://GLib/documentation/GLib":{"role":"collection","title":"GLib","abstract":[],"identifier":"doc:\/\/GLib\/documentation\/GLib","kind":"symbol","type":"topic","url":"\/documentation\/glib"},"doc://GLib/documentation/GLib/Cond/CondProtocol-Implementations":{"role":"collectionGroup","title":"CondProtocol Implementations","abstract":[],"identifier":"doc:\/\/GLib\/documentation\/GLib\/Cond\/CondProtocol-Implementations","kind":"article","type":"topic","url":"\/documentation\/glib\/cond\/condprotocol-implementations"},"doc://GLib/documentation/GLib/Cond/wait(mutex:)":{"role":"symbol","title":"wait(mutex:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"wait"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"MutexT"},{"kind":"text","text":">("},{"kind":"externalParam","text":"mutex"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"MutexT"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Atomically releases "},{"type":"codeVoice","code":"mutex"},{"type":"text","text":" and waits until "},{"type":"codeVoice","code":"cond"},{"type":"text","text":" is signalled."},{"type":"text","text":" "},{"type":"text","text":"When this function returns, "},{"type":"codeVoice","code":"mutex"},{"type":"text","text":" is locked again and owned by the"},{"type":"text","text":" "},{"type":"text","text":"calling thread."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/Cond\/wait(mutex:)","kind":"symbol","type":"topic","url":"\/documentation\/glib\/cond\/wait(mutex:)"}}}