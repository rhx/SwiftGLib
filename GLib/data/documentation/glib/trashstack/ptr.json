{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"ptr"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutableRawPointer","preciseIdentifier":"s:Sv"},{"kind":"text","text":"!"}],"languages":["swift"],"platforms":["macOS"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/glib\/trashstack\/ptr"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/GLib\/documentation\/GLib\/TrashStack\/ptr","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Untyped pointer to the underlying "},{"type":"codeVoice","code":"GTrashStack"},{"type":"text","text":" instance."},{"type":"text","text":" "},{"type":"text","text":"For type-safe access, use the generated, typed pointer "},{"type":"codeVoice","code":"TrashStackProtocol\/_ptr"},{"type":"text","text":" property instead."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"ptr"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutableRawPointer","preciseIdentifier":"s:Sv"},{"kind":"text","text":"!"}],"title":"ptr","roleHeading":"Instance Property","role":"symbol","symbolKind":"property","externalID":"s:4GLib10TrashStackC3ptrSvSgvp","modules":[{"name":"GLib"}]},"hierarchy":{"paths":[["doc:\/\/GLib\/documentation\/GLib","doc:\/\/GLib\/documentation\/GLib\/TrashStack"]]},"references":{"doc://GLib/documentation/GLib/TrashStack":{"role":"symbol","title":"TrashStack","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"TrashStack"}],"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"GTrashStack"},{"type":"text","text":" is an efficient way to keep a stack of unused allocated"},{"type":"text","text":" "},{"type":"text","text":"memory chunks. Each memory chunk is required to be large enough to hold"},{"type":"text","text":" "},{"type":"text","text":"a "},{"type":"codeVoice","code":"gpointer"},{"type":"text","text":". This allows the stack to be maintained without any space"},{"type":"text","text":" "},{"type":"text","text":"overhead, since the stack pointers can be stored inside the memory chunks."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/TrashStack","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"TrashStack"}],"url":"\/documentation\/glib\/trashstack"},"doc://GLib/documentation/GLib/TrashStack/ptr":{"role":"symbol","title":"ptr","fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"ptr"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutableRawPointer","preciseIdentifier":"s:Sv"},{"kind":"text","text":"!"}],"abstract":[{"type":"text","text":"Untyped pointer to the underlying "},{"type":"codeVoice","code":"GTrashStack"},{"type":"text","text":" instance."},{"type":"text","text":" "},{"type":"text","text":"For type-safe access, use the generated, typed pointer "},{"type":"codeVoice","code":"TrashStackProtocol\/_ptr"},{"type":"text","text":" property instead."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/TrashStack\/ptr","kind":"symbol","type":"topic","url":"\/documentation\/glib\/trashstack\/ptr"},"doc://GLib/documentation/GLib":{"role":"collection","title":"GLib","abstract":[],"identifier":"doc:\/\/GLib\/documentation\/GLib","kind":"symbol","type":"topic","url":"\/documentation\/glib"}}}