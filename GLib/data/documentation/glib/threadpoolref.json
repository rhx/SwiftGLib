{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ThreadPoolRef"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A thread pool is useful when you wish to asynchronously fork out the execution of work"},{"type":"text","text":" "},{"type":"text","text":"and continue working in your own thread. If that will happen often, the overhead of starting"},{"type":"text","text":" "},{"type":"text","text":"and destroying a thread each time might be too high. In such cases reusing already started"},{"type":"text","text":" "},{"type":"text","text":"threads seems like a good idea. And it indeed is, but implementing this can be tedious"},{"type":"text","text":" "},{"type":"text","text":"and error-prone."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Therefore GLib provides thread pools for your convenience. An added advantage is, that the"},{"type":"text","text":" "},{"type":"text","text":"threads can be shared between the different subsystems of your program, when they are using GLib."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To create a new thread pool, you use [func"},{"type":"codeVoice","code":"GLib.ThreadPool.new"},{"type":"text","text":"]."},{"type":"text","text":" "},{"type":"text","text":"It is destroyed by [method"},{"type":"codeVoice","code":"GLib.ThreadPool.free"},{"type":"text","text":"]."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you want to execute a certain task within a thread pool, use [method"},{"type":"codeVoice","code":"GLib.ThreadPool.push"},{"type":"text","text":"]."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To get the current number of running threads you call [method"},{"type":"codeVoice","code":"GLib.ThreadPool.get_num_threads"},{"type":"text","text":"]."},{"type":"text","text":" "},{"type":"text","text":"To get the number of still unprocessed tasks you call [method"},{"type":"codeVoice","code":"GLib.ThreadPool.unprocessed"},{"type":"text","text":"]."},{"type":"text","text":" "},{"type":"text","text":"To control the maximum number of threads for a thread pool, you use"},{"type":"text","text":" "},{"type":"text","text":"[method"},{"type":"codeVoice","code":"GLib.ThreadPool.get_max_threads"},{"type":"text","text":"]. and [method"},{"type":"codeVoice","code":"GLib.ThreadPool.set_max_threads"},{"type":"text","text":"]."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Finally you can control the number of unused threads, that are kept alive by GLib for future use."},{"type":"text","text":" "},{"type":"text","text":"The current number can be fetched with [func"},{"type":"codeVoice","code":"GLib.ThreadPool.get_num_unused_threads"},{"type":"text","text":"]."},{"type":"text","text":" "},{"type":"text","text":"The maximum number can be controlled by [func"},{"type":"codeVoice","code":"GLib.ThreadPool.get_max_unused_threads"},{"type":"text","text":"] and"},{"type":"text","text":" "},{"type":"text","text":"[func"},{"type":"codeVoice","code":"GLib.ThreadPool.set_max_unused_threads"},{"type":"text","text":"]. All currently unused threads"},{"type":"text","text":" "},{"type":"text","text":"can be stopped by calling [func"},{"type":"codeVoice","code":"GLib.ThreadPool.stop_unused_threads"},{"type":"text","text":"]."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/ThreadPoolRef"},{"type":"text","text":" type acts as a lightweight Swift reference to an underlying "},{"type":"codeVoice","code":"GThreadPool"},{"type":"text","text":" instance."},{"type":"text","text":" "},{"type":"text","text":"It exposes methods that can operate on this data type through "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/ThreadPoolProtocol"},{"type":"text","text":" conformance."},{"type":"text","text":" "},{"type":"text","text":"Use "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/ThreadPoolRef"},{"type":"text","text":" only as an "},{"type":"codeVoice","code":"unowned"},{"type":"text","text":" reference to an existing "},{"type":"codeVoice","code":"GThreadPool"},{"type":"text","text":" instance."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/ThreadPool"},{"type":"text","text":" (instead of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/ThreadPoolRef"},{"type":"text","text":") if you want to use Automatic Reference Counting for memory management of the underlying "},{"type":"codeVoice","code":"GThreadPool"},{"type":"text","text":" instance."}]}],"type":"aside","name":"Note"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/glib\/threadpoolref"],"traits":[{"interfaceLanguage":"swift"}]}],"relationshipsSections":[{"identifiers":["doc:\/\/GLib\/documentation\/GLib\/PointerWrapper","doc:\/\/GLib\/documentation\/GLib\/ThreadPoolProtocol"],"kind":"relationships","title":"Conforms To","type":"conformsTo"}],"identifier":{"url":"doc:\/\/GLib\/documentation\/GLib\/ThreadPoolRef","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"The "},{"type":"codeVoice","code":"GThreadPool"},{"type":"text","text":" struct represents a thread pool."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ThreadPoolRef"}],"title":"ThreadPoolRef","roleHeading":"Structure","role":"symbol","symbolKind":"struct","externalID":"s:4GLib13ThreadPoolRefV","modules":[{"name":"GLib"}],"navigatorTitle":[{"kind":"identifier","text":"ThreadPoolRef"}]},"hierarchy":{"paths":[["doc:\/\/GLib\/documentation\/GLib"]]},"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/GLib\/documentation\/GLib\/ThreadPoolRef\/init(_:)-23tja","doc:\/\/GLib\/documentation\/GLib\/ThreadPoolRef\/init(_:)-34spm","doc:\/\/GLib\/documentation\/GLib\/ThreadPoolRef\/init(_:)-5mqz7","doc:\/\/GLib\/documentation\/GLib\/ThreadPoolRef\/init(_:)-92aql","doc:\/\/GLib\/documentation\/GLib\/ThreadPoolRef\/init(_:)-eq03","doc:\/\/GLib\/documentation\/GLib\/ThreadPoolRef\/init(cPointer:)","doc:\/\/GLib\/documentation\/GLib\/ThreadPoolRef\/init(constPointer:)","doc:\/\/GLib\/documentation\/GLib\/ThreadPoolRef\/init(gconstpointer:)","doc:\/\/GLib\/documentation\/GLib\/ThreadPoolRef\/init(gpointer:)","doc:\/\/GLib\/documentation\/GLib\/ThreadPoolRef\/init(mutating:)","doc:\/\/GLib\/documentation\/GLib\/ThreadPoolRef\/init(opaquePointer:)"]},{"title":"Instance Properties","identifiers":["doc:\/\/GLib\/documentation\/GLib\/ThreadPoolRef\/ptr"]},{"title":"Type Methods","identifiers":["doc:\/\/GLib\/documentation\/GLib\/ThreadPoolRef\/new(full:userData:itemFreeFunc:maxThreads:exclusive:)"]},{"title":"Default Implementations","identifiers":["doc:\/\/GLib\/documentation\/GLib\/ThreadPoolRef\/PointerWrapper-Implementations","doc:\/\/GLib\/documentation\/GLib\/ThreadPoolRef\/ThreadPoolProtocol-Implementations"],"generated":true}],"references":{"doc://GLib/documentation/GLib/ThreadPoolRef/init(_:)-eq03":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"!("},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GThreadPool"},{"kind":"text","text":">?)"}],"abstract":[{"type":"text","text":"Conditional initialiser from an optional, non-mutable pointer to the underlying "},{"type":"codeVoice","code":"C"},{"type":"text","text":" data type"}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/ThreadPoolRef\/init(_:)-eq03","kind":"symbol","type":"topic","url":"\/documentation\/glib\/threadpoolref\/init(_:)-eq03"},"doc://GLib/documentation/GLib/ThreadPoolRef/init(gpointer:)":{"role":"symbol","title":"init(gpointer:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"!("},{"kind":"externalParam","text":"gpointer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"gpointer","preciseIdentifier":"c:@T@gpointer"},{"kind":"text","text":"?)"}],"abstract":[{"type":"text","text":"Conditional initialiser from an optional "},{"type":"codeVoice","code":"gpointer"}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/ThreadPoolRef\/init(gpointer:)","kind":"symbol","type":"topic","url":"\/documentation\/glib\/threadpoolref\/init(gpointer:)"},"doc://GLib/documentation/GLib/ThreadPool":{"role":"symbol","title":"ThreadPool","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ThreadPool"}],"abstract":[{"type":"text","text":"The "},{"type":"codeVoice","code":"GThreadPool"},{"type":"text","text":" struct represents a thread pool."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/ThreadPool","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ThreadPool"}],"url":"\/documentation\/glib\/threadpool"},"doc://GLib/documentation/GLib/ThreadPoolRef/ptr":{"role":"symbol","title":"ptr","fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"ptr"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutableRawPointer","preciseIdentifier":"s:Sv"},{"kind":"text","text":"!"}],"abstract":[{"type":"text","text":"Untyped pointer to the underlying "},{"type":"codeVoice","code":"GThreadPool"},{"type":"text","text":" instance."},{"type":"text","text":" "},{"type":"text","text":"For type-safe access, use the generated, typed pointer "},{"type":"codeVoice","code":"ThreadPoolProtocol\/_ptr"},{"type":"text","text":" property instead."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/ThreadPoolRef\/ptr","kind":"symbol","type":"topic","url":"\/documentation\/glib\/threadpoolref\/ptr"},"doc://GLib/documentation/GLib/ThreadPoolRef/init(_:)-5mqz7":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Reference intialiser for a related type that implements "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/ThreadPoolProtocol"}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/ThreadPoolRef\/init(_:)-5mqz7","kind":"symbol","type":"topic","url":"\/documentation\/glib\/threadpoolref\/init(_:)-5mqz7"},"doc://GLib/documentation/GLib/ThreadPoolRef":{"role":"symbol","title":"ThreadPoolRef","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ThreadPoolRef"}],"abstract":[{"type":"text","text":"The "},{"type":"codeVoice","code":"GThreadPool"},{"type":"text","text":" struct represents a thread pool."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/ThreadPoolRef","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ThreadPoolRef"}],"url":"\/documentation\/glib\/threadpoolref"},"doc://GLib/documentation/GLib/ThreadPoolRef/ThreadPoolProtocol-Implementations":{"role":"collectionGroup","title":"ThreadPoolProtocol Implementations","abstract":[],"identifier":"doc:\/\/GLib\/documentation\/GLib\/ThreadPoolRef\/ThreadPoolProtocol-Implementations","kind":"article","type":"topic","url":"\/documentation\/glib\/threadpoolref\/threadpoolprotocol-implementations"},"doc://GLib/documentation/GLib/ThreadPoolRef/init(_:)-34spm":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GThreadPool"},{"kind":"text","text":">)"}],"abstract":[{"type":"text","text":"Designated initialiser from a constant pointer to the underlying "},{"type":"codeVoice","code":"C"},{"type":"text","text":" data type"}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/ThreadPoolRef\/init(_:)-34spm","kind":"symbol","type":"topic","url":"\/documentation\/glib\/threadpoolref\/init(_:)-34spm"},"doc://GLib/documentation/GLib/ThreadPoolProtocol":{"role":"symbol","title":"ThreadPoolProtocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ThreadPoolProtocol"}],"abstract":[{"type":"text","text":"The "},{"type":"codeVoice","code":"GThreadPool"},{"type":"text","text":" struct represents a thread pool."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/ThreadPoolProtocol","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ThreadPoolProtocol"}],"url":"\/documentation\/glib\/threadpoolprotocol"},"doc://GLib/documentation/GLib/ThreadPoolRef/init(constPointer:)":{"role":"symbol","title":"init(constPointer:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"externalParam","text":"constPointer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">)"}],"abstract":[{"type":"text","text":"Unsafe typed initialiser."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Do not use unless you know the underlying data type the pointer points to conforms to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/ThreadPoolProtocol"},{"type":"text","text":"."}]}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/ThreadPoolRef\/init(constPointer:)","kind":"symbol","type":"topic","url":"\/documentation\/glib\/threadpoolref\/init(constpointer:)"},"doc://GLib/documentation/GLib/ThreadPoolRef/init(_:)-92aql":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"!("},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GThreadPool"},{"kind":"text","text":">?)"}],"abstract":[{"type":"text","text":"Conditional initialiser from an optional pointer to the underlying "},{"type":"codeVoice","code":"C"},{"type":"text","text":" data type"}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/ThreadPoolRef\/init(_:)-92aql","kind":"symbol","type":"topic","url":"\/documentation\/glib\/threadpoolref\/init(_:)-92aql"},"doc://GLib/documentation/GLib/ThreadPoolRef/init(gconstpointer:)":{"role":"symbol","title":"init(gconstpointer:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"!("},{"kind":"externalParam","text":"gconstpointer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"gconstpointer","preciseIdentifier":"c:@T@gconstpointer"},{"kind":"text","text":"?)"}],"abstract":[{"type":"text","text":"Conditional initialiser from an optional, non-mutable "},{"type":"codeVoice","code":"gconstpointer"}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/ThreadPoolRef\/init(gconstpointer:)","kind":"symbol","type":"topic","url":"\/documentation\/glib\/threadpoolref\/init(gconstpointer:)"},"doc://GLib/documentation/GLib":{"role":"collection","title":"GLib","abstract":[],"identifier":"doc:\/\/GLib\/documentation\/GLib","kind":"symbol","type":"topic","url":"\/documentation\/glib"},"doc://GLib/documentation/GLib/ThreadPoolRef/init(cPointer:)":{"role":"symbol","title":"init(cPointer:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"externalParam","text":"cPointer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">)"}],"abstract":[{"type":"text","text":"Unsafe typed initialiser."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Do not use unless you know the underlying data type the pointer points to conforms to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/ThreadPoolProtocol"},{"type":"text","text":"."}]}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/ThreadPoolRef\/init(cPointer:)","kind":"symbol","type":"topic","url":"\/documentation\/glib\/threadpoolref\/init(cpointer:)"},"doc://GLib/documentation/GLib/PointerWrapper":{"role":"symbol","title":"PointerWrapper","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"PointerWrapper"}],"abstract":[{"type":"text","text":"Protocol for GLib types that wrap pointers."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/PointerWrapper","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"PointerWrapper"}],"url":"\/documentation\/glib\/pointerwrapper"},"doc://GLib/documentation/GLib/ThreadPoolRef/init(opaquePointer:)":{"role":"symbol","title":"init(opaquePointer:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"opaquePointer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"OpaquePointer","preciseIdentifier":"s:s13OpaquePointerV"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Unsafe untyped initialiser."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Do not use unless you know the underlying data type the pointer points to conforms to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/ThreadPoolProtocol"},{"type":"text","text":"."}]}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/ThreadPoolRef\/init(opaquePointer:)","kind":"symbol","type":"topic","url":"\/documentation\/glib\/threadpoolref\/init(opaquepointer:)"},"doc://GLib/documentation/GLib/ThreadPoolRef/PointerWrapper-Implementations":{"role":"collectionGroup","title":"PointerWrapper Implementations","abstract":[],"identifier":"doc:\/\/GLib\/documentation\/GLib\/ThreadPoolRef\/PointerWrapper-Implementations","kind":"article","type":"topic","url":"\/documentation\/glib\/threadpoolref\/pointerwrapper-implementations"},"doc://GLib/documentation/GLib/ThreadPoolRef/init(_:)-23tja":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GThreadPool"},{"kind":"text","text":">)"}],"abstract":[{"type":"text","text":"Designated initialiser from the underlying "},{"type":"codeVoice","code":"C"},{"type":"text","text":" data type"}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/ThreadPoolRef\/init(_:)-23tja","kind":"symbol","type":"topic","url":"\/documentation\/glib\/threadpoolref\/init(_:)-23tja"},"doc://GLib/documentation/GLib/ThreadPoolRef/init(mutating:)":{"role":"symbol","title":"init(mutating:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"mutating"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeRawPointer","preciseIdentifier":"s:SV"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Unsafe untyped initialiser."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Do not use unless you know the underlying data type the pointer points to conforms to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/ThreadPoolProtocol"},{"type":"text","text":"."}]}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/ThreadPoolRef\/init(mutating:)","kind":"symbol","type":"topic","url":"\/documentation\/glib\/threadpoolref\/init(mutating:)"},"doc://GLib/documentation/GLib/ThreadPoolRef/new(full:userData:itemFreeFunc:maxThreads:exclusive:)":{"role":"symbol","title":"new(full:userData:itemFreeFunc:maxThreads:exclusive:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"new"},{"kind":"text","text":"("},{"kind":"externalParam","text":"full"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"GFunc","preciseIdentifier":"c:@T@GFunc"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"userData"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"gpointer","preciseIdentifier":"c:@T@gpointer"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"itemFreeFunc"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"GDestroyNotify","preciseIdentifier":"c:@T@GDestroyNotify"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"maxThreads"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":", "},{"kind":"externalParam","text":"exclusive"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"ThreadPoolRef","preciseIdentifier":"s:4GLib13ThreadPoolRefV"},{"kind":"text","text":"!"}],"abstract":[{"type":"text","text":"This function creates a new thread pool similar to "},{"type":"codeVoice","code":"g_thread_pool_new()"},{"type":"text","text":" "},{"type":"text","text":"but allowing "},{"type":"codeVoice","code":"itemFreeFunc"},{"type":"text","text":" to be specified to free the data passed"},{"type":"text","text":" "},{"type":"text","text":"to "},{"type":"codeVoice","code":"g_thread_pool_push()"},{"type":"text","text":" in the case that the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/ThreadPool"},{"type":"text","text":" is stopped"},{"type":"text","text":" "},{"type":"text","text":"and freed before all tasks have been executed."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/ThreadPoolRef\/new(full:userData:itemFreeFunc:maxThreads:exclusive:)","kind":"symbol","type":"topic","url":"\/documentation\/glib\/threadpoolref\/new(full:userdata:itemfreefunc:maxthreads:exclusive:)"}}}