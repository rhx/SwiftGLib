{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"lock"},{"kind":"text","text":"()"}],"languages":["swift"],"platforms":["macOS"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/glib\/recmutex\/lock()"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/GLib\/documentation\/GLib\/RecMutex\/lock()","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Locks "},{"type":"codeVoice","code":"recMutex"},{"type":"text","text":". If "},{"type":"codeVoice","code":"recMutex"},{"type":"text","text":" is already locked by another"},{"type":"text","text":" "},{"type":"text","text":"thread, the current thread will block until "},{"type":"codeVoice","code":"recMutex"},{"type":"text","text":" is"},{"type":"text","text":" "},{"type":"text","text":"unlocked by the other thread. If "},{"type":"codeVoice","code":"recMutex"},{"type":"text","text":" is already locked"},{"type":"text","text":" "},{"type":"text","text":"by the current thread, the ‘lock count’ of "},{"type":"codeVoice","code":"recMutex"},{"type":"text","text":" is increased."},{"type":"text","text":" "},{"type":"text","text":"The mutex will only become available again when it is unlocked"},{"type":"text","text":" "},{"type":"text","text":"as many times as it has been locked."}],"kind":"symbol","metadata":{"role":"symbol","title":"lock()","roleHeading":"Instance Method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"lock"},{"kind":"text","text":"()"}],"symbolKind":"method","externalID":"s:4GLib16RecMutexProtocolPAAE4lockyyF::SYNTHESIZED::s:4GLib8RecMutexC","extendedModule":"GLib","modules":[{"name":"GLib"}]},"hierarchy":{"paths":[["doc:\/\/GLib\/documentation\/GLib","doc:\/\/GLib\/documentation\/GLib\/RecMutex","doc:\/\/GLib\/documentation\/GLib\/RecMutex\/RecMutexProtocol-Implementations"]]},"references":{"doc://GLib/documentation/GLib/RecMutex/lock()":{"role":"symbol","title":"lock()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"lock"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Locks "},{"type":"codeVoice","code":"recMutex"},{"type":"text","text":". If "},{"type":"codeVoice","code":"recMutex"},{"type":"text","text":" is already locked by another"},{"type":"text","text":" "},{"type":"text","text":"thread, the current thread will block until "},{"type":"codeVoice","code":"recMutex"},{"type":"text","text":" is"},{"type":"text","text":" "},{"type":"text","text":"unlocked by the other thread. If "},{"type":"codeVoice","code":"recMutex"},{"type":"text","text":" is already locked"},{"type":"text","text":" "},{"type":"text","text":"by the current thread, the ‘lock count’ of "},{"type":"codeVoice","code":"recMutex"},{"type":"text","text":" is increased."},{"type":"text","text":" "},{"type":"text","text":"The mutex will only become available again when it is unlocked"},{"type":"text","text":" "},{"type":"text","text":"as many times as it has been locked."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RecMutex\/lock()","kind":"symbol","type":"topic","url":"\/documentation\/glib\/recmutex\/lock()"},"doc://GLib/documentation/GLib":{"role":"collection","title":"GLib","abstract":[],"identifier":"doc:\/\/GLib\/documentation\/GLib","kind":"symbol","type":"topic","url":"\/documentation\/glib"},"doc://GLib/documentation/GLib/Mutex":{"role":"symbol","title":"Mutex","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Mutex"}],"abstract":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Mutex"},{"type":"text","text":" struct is an opaque data structure to represent a mutex"},{"type":"text","text":" "},{"type":"text","text":"(mutual exclusion). It can be used to protect data against shared"},{"type":"text","text":" "},{"type":"text","text":"access."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/Mutex","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Mutex"}],"url":"\/documentation\/glib\/mutex"},"doc://GLib/documentation/GLib/RecMutex":{"role":"symbol","title":"RecMutex","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"RecMutex"}],"abstract":[{"type":"text","text":"The GRecMutex struct is an opaque data structure to represent a"},{"type":"text","text":" "},{"type":"text","text":"recursive mutex. It is similar to a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Mutex"},{"type":"text","text":" with the difference"},{"type":"text","text":" "},{"type":"text","text":"that it is possible to lock a GRecMutex multiple times in the same"},{"type":"text","text":" "},{"type":"text","text":"thread without deadlock. When doing so, care has to be taken to"},{"type":"text","text":" "},{"type":"text","text":"unlock the recursive mutex as often as it has been locked."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RecMutex","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"RecMutex"}],"url":"\/documentation\/glib\/recmutex"},"doc://GLib/documentation/GLib/RecMutex/RecMutexProtocol-Implementations":{"role":"collectionGroup","title":"RecMutexProtocol Implementations","abstract":[],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RecMutex\/RecMutexProtocol-Implementations","kind":"article","type":"topic","url":"\/documentation\/glib\/recmutex\/recmutexprotocol-implementations"}}}