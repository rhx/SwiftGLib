{"variants":[{"paths":["\/documentation\/glib\/recmutex\/recmutexprotocol-implementations"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"identifier":{"url":"doc:\/\/GLib\/documentation\/GLib\/RecMutex\/RecMutexProtocol-Implementations","interfaceLanguage":"swift"},"topicSections":[{"title":"Instance Methods","identifiers":["doc:\/\/GLib\/documentation\/GLib\/RecMutex\/clear()","doc:\/\/GLib\/documentation\/GLib\/RecMutex\/init_()","doc:\/\/GLib\/documentation\/GLib\/RecMutex\/lock()","doc:\/\/GLib\/documentation\/GLib\/RecMutex\/trylock()","doc:\/\/GLib\/documentation\/GLib\/RecMutex\/unlock()"],"generated":true}],"kind":"article","metadata":{"modules":[{"name":"GLib"}],"role":"collectionGroup","title":"RecMutexProtocol Implementations"},"hierarchy":{"paths":[["doc:\/\/GLib\/documentation\/GLib","doc:\/\/GLib\/documentation\/GLib\/RecMutex"]]},"references":{"doc://GLib/documentation/GLib":{"role":"collection","title":"GLib","abstract":[],"identifier":"doc:\/\/GLib\/documentation\/GLib","kind":"symbol","type":"topic","url":"\/documentation\/glib"},"doc://GLib/documentation/GLib/Mutex":{"role":"symbol","title":"Mutex","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Mutex"}],"abstract":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Mutex"},{"type":"text","text":" struct is an opaque data structure to represent a mutex"},{"type":"text","text":" "},{"type":"text","text":"(mutual exclusion). It can be used to protect data against shared"},{"type":"text","text":" "},{"type":"text","text":"access."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/Mutex","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Mutex"}],"url":"\/documentation\/glib\/mutex"},"doc://GLib/documentation/GLib/RecMutex/unlock()":{"role":"symbol","title":"unlock()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"unlock"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Unlocks "},{"type":"codeVoice","code":"recMutex"},{"type":"text","text":". If another thread is blocked in a"},{"type":"text","text":" "},{"type":"codeVoice","code":"g_rec_mutex_lock()"},{"type":"text","text":" call for "},{"type":"codeVoice","code":"recMutex"},{"type":"text","text":", it will become unblocked"},{"type":"text","text":" "},{"type":"text","text":"and can lock "},{"type":"codeVoice","code":"recMutex"},{"type":"text","text":" itself."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RecMutex\/unlock()","kind":"symbol","type":"topic","url":"\/documentation\/glib\/recmutex\/unlock()"},"doc://GLib/documentation/GLib/RecMutex/clear()":{"role":"symbol","title":"clear()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"clear"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Frees the resources allocated to a recursive mutex with"},{"type":"text","text":" "},{"type":"codeVoice","code":"g_rec_mutex_init()"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RecMutex\/clear()","kind":"symbol","type":"topic","url":"\/documentation\/glib\/recmutex\/clear()"},"doc://GLib/documentation/GLib/RecMutex/init_()":{"role":"symbol","title":"init_()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"init_"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Initializes a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/RecMutex"},{"type":"text","text":" so that it can be used."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RecMutex\/init_()","kind":"symbol","type":"topic","url":"\/documentation\/glib\/recmutex\/init_()"},"doc://GLib/documentation/GLib/RecMutex":{"role":"symbol","title":"RecMutex","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"RecMutex"}],"abstract":[{"type":"text","text":"The GRecMutex struct is an opaque data structure to represent a"},{"type":"text","text":" "},{"type":"text","text":"recursive mutex. It is similar to a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Mutex"},{"type":"text","text":" with the difference"},{"type":"text","text":" "},{"type":"text","text":"that it is possible to lock a GRecMutex multiple times in the same"},{"type":"text","text":" "},{"type":"text","text":"thread without deadlock. When doing so, care has to be taken to"},{"type":"text","text":" "},{"type":"text","text":"unlock the recursive mutex as often as it has been locked."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RecMutex","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"RecMutex"}],"url":"\/documentation\/glib\/recmutex"},"doc://GLib/documentation/GLib/RecMutex/trylock()":{"role":"symbol","title":"trylock()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"trylock"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"abstract":[{"type":"text","text":"Tries to lock "},{"type":"codeVoice","code":"recMutex"},{"type":"text","text":". If "},{"type":"codeVoice","code":"recMutex"},{"type":"text","text":" is already locked"},{"type":"text","text":" "},{"type":"text","text":"by another thread, it immediately returns "},{"type":"codeVoice","code":"false"},{"type":"text","text":". Otherwise"},{"type":"text","text":" "},{"type":"text","text":"it locks "},{"type":"codeVoice","code":"recMutex"},{"type":"text","text":" and returns "},{"type":"codeVoice","code":"true"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RecMutex\/trylock()","kind":"symbol","type":"topic","url":"\/documentation\/glib\/recmutex\/trylock()"},"doc://GLib/documentation/GLib/RecMutex/lock()":{"role":"symbol","title":"lock()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"lock"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Locks "},{"type":"codeVoice","code":"recMutex"},{"type":"text","text":". If "},{"type":"codeVoice","code":"recMutex"},{"type":"text","text":" is already locked by another"},{"type":"text","text":" "},{"type":"text","text":"thread, the current thread will block until "},{"type":"codeVoice","code":"recMutex"},{"type":"text","text":" is"},{"type":"text","text":" "},{"type":"text","text":"unlocked by the other thread. If "},{"type":"codeVoice","code":"recMutex"},{"type":"text","text":" is already locked"},{"type":"text","text":" "},{"type":"text","text":"by the current thread, the ‘lock count’ of "},{"type":"codeVoice","code":"recMutex"},{"type":"text","text":" is increased."},{"type":"text","text":" "},{"type":"text","text":"The mutex will only become available again when it is unlocked"},{"type":"text","text":" "},{"type":"text","text":"as many times as it has been locked."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RecMutex\/lock()","kind":"symbol","type":"topic","url":"\/documentation\/glib\/recmutex\/lock()"}}}