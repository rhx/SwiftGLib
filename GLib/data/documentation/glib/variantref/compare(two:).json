{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"compare"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"VariantT"},{"kind":"text","text":">("},{"kind":"externalParam","text":"two"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"VariantT"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":" "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"VariantT"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantProtocol","preciseIdentifier":"s:4GLib15VariantProtocolP","text":"VariantProtocol"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The types of "},{"type":"codeVoice","code":"one"},{"type":"text","text":" and "},{"type":"codeVoice","code":"two"},{"type":"text","text":" are "},{"type":"codeVoice","code":"gconstpointer"},{"type":"text","text":" only to allow use of"},{"type":"text","text":" "},{"type":"text","text":"this function with "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Tree"},{"type":"text","text":", "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/PtrArray"},{"type":"text","text":", etc.  They must each be a"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Variant"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Comparison is only defined for basic types (ie: booleans, numbers,"},{"type":"text","text":" "},{"type":"text","text":"strings).  For booleans, "},{"type":"codeVoice","code":"false"},{"type":"text","text":" is less than "},{"type":"codeVoice","code":"true"},{"type":"text","text":".  Numbers are"},{"type":"text","text":" "},{"type":"text","text":"ordered in the usual way.  Strings are in ASCII lexographical order."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It is a programmer error to attempt to compare container values or"},{"type":"text","text":" "},{"type":"text","text":"two values that have types that are not exactly equal.  For example,"},{"type":"text","text":" "},{"type":"text","text":"you cannot compare a 32-bit signed integer with a 32-bit unsigned"},{"type":"text","text":" "},{"type":"text","text":"integer.  Also note that this function is not particularly"},{"type":"text","text":" "},{"type":"text","text":"well-behaved when it comes to comparison of doubles; in particular,"},{"type":"text","text":" "},{"type":"text","text":"the handling of incomparable values (ie: NaN) is undefined."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you only require an equality comparison, "},{"type":"codeVoice","code":"g_variant_equal()"},{"type":"text","text":" is more"},{"type":"text","text":" "},{"type":"text","text":"general."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/glib\/variantref\/compare(two:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/GLib\/documentation\/GLib\/VariantRef\/compare(two:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Compares "},{"type":"codeVoice","code":"one"},{"type":"text","text":" and "},{"type":"codeVoice","code":"two"},{"type":"text","text":"."}],"kind":"symbol","metadata":{"role":"symbol","title":"compare(two:)","roleHeading":"Instance Method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"compare"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"VariantT"},{"kind":"text","text":">("},{"kind":"externalParam","text":"two"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"VariantT"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"}],"symbolKind":"method","externalID":"s:4GLib15VariantProtocolPAAE7compare3twoSiqd___tAaBRd__lF::SYNTHESIZED::s:4GLib10VariantRefV","extendedModule":"GLib","modules":[{"name":"GLib"}]},"hierarchy":{"paths":[["doc:\/\/GLib\/documentation\/GLib","doc:\/\/GLib\/documentation\/GLib\/VariantRef","doc:\/\/GLib\/documentation\/GLib\/VariantRef\/VariantProtocol-Implementations"]]},"references":{"doc://GLib/documentation/GLib/VariantProtocol":{"role":"symbol","title":"VariantProtocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"VariantProtocol"}],"abstract":[{"type":"codeVoice","code":"GVariant"},{"type":"text","text":" is a variant datatype; it can contain one or more values"},{"type":"text","text":" "},{"type":"text","text":"along with information about the type of the values."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantProtocol","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"VariantProtocol"}],"url":"\/documentation\/glib\/variantprotocol"},"../Protocols/TreeProtocol.html":{"title":"balanced binary tree","titleInlineContent":[{"type":"text","text":"balanced binary tree"}],"type":"link","identifier":"..\/Protocols\/TreeProtocol.html","url":"..\/Protocols\/TreeProtocol.html"},"doc://GLib/documentation/GLib/Variant":{"role":"symbol","title":"Variant","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Variant"}],"abstract":[{"type":"codeVoice","code":"GVariant"},{"type":"text","text":" is a variant datatype; it can contain one or more values"},{"type":"text","text":" "},{"type":"text","text":"along with information about the type of the values."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/Variant","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Variant"}],"url":"\/documentation\/glib\/variant"},"doc://GLib/documentation/GLib/VariantRef/compare(two:)":{"role":"symbol","title":"compare(two:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"compare"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"VariantT"},{"kind":"text","text":">("},{"kind":"externalParam","text":"two"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"VariantT"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"}],"abstract":[{"type":"text","text":"Compares "},{"type":"codeVoice","code":"one"},{"type":"text","text":" and "},{"type":"codeVoice","code":"two"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantRef\/compare(two:)","kind":"symbol","type":"topic","url":"\/documentation\/glib\/variantref\/compare(two:)"},"doc://GLib/documentation/GLib/Tree":{"role":"symbol","title":"Tree","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Tree"}],"abstract":[{"type":"text","text":"The GTree struct is an opaque data structure representing a"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"..\/Protocols\/TreeProtocol.html"},{"type":"text","text":". It should be"},{"type":"text","text":" "},{"type":"text","text":"accessed only by using the following functions."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/Tree","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Tree"}],"url":"\/documentation\/glib\/tree"},"doc://GLib/documentation/GLib/PtrArray":{"role":"symbol","title":"PtrArray","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"PtrArray"}],"abstract":[{"type":"text","text":"Contains the public fields of a pointer array."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/PtrArray","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"PtrArray"}],"url":"\/documentation\/glib\/ptrarray"},"doc://GLib/documentation/GLib":{"role":"collection","title":"GLib","abstract":[],"identifier":"doc:\/\/GLib\/documentation\/GLib","kind":"symbol","type":"topic","url":"\/documentation\/glib"},"doc://GLib/documentation/GLib/VariantRef/VariantProtocol-Implementations":{"role":"collectionGroup","title":"VariantProtocol Implementations","abstract":[],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantRef\/VariantProtocol-Implementations","kind":"article","type":"topic","url":"\/documentation\/glib\/variantref\/variantprotocol-implementations"},"doc://GLib/documentation/GLib/VariantRef":{"role":"symbol","title":"VariantRef","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"VariantRef"}],"abstract":[{"type":"codeVoice","code":"GVariant"},{"type":"text","text":" is a variant datatype; it can contain one or more values"},{"type":"text","text":" "},{"type":"text","text":"along with information about the type of the values."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantRef","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"VariantRef"}],"url":"\/documentation\/glib\/variantref"}}}