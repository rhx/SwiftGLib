{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"isDestroyed"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":" { "},{"kind":"keyword","text":"get"},{"kind":"text","text":" }"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is important when you operate upon your objects"},{"type":"text","text":" "},{"type":"text","text":"from within idle handlers, but may have freed the object"},{"type":"text","text":" "},{"type":"text","text":"before the dispatch of your idle handler."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"(C Language Example):"}]},{"type":"codeListing","syntax":"C","code":["static gboolean","idle_callback (gpointer data)","{","  SomeWidget *self = data;","   ","  g_mutex_lock (&self->idle_id_mutex);","  \/\/ do stuff with self","  self->idle_id = 0;","  g_mutex_unlock (&self->idle_id_mutex);","   ","  return G_SOURCE_REMOVE;","}"," ","static void","some_widget_do_stuff_later (SomeWidget *self)","{","  g_mutex_lock (&self->idle_id_mutex);","  self->idle_id = g_idle_add (idle_callback, self);","  g_mutex_unlock (&self->idle_id_mutex);","}"," ","static void","some_widget_init (SomeWidget *self)","{","  g_mutex_init (&self->idle_id_mutex);","","  \/\/ ...","}","","static void","some_widget_finalize (GObject *object)","{","  SomeWidget *self = SOME_WIDGET (object);","   ","  if (self->idle_id)","    g_source_remove (self->idle_id);","   ","  g_mutex_clear (&self->idle_id_mutex);","","  G_OBJECT_CLASS (parent_class)->finalize (object);","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This will fail in a multi-threaded application if the"},{"type":"text","text":" "},{"type":"text","text":"widget is destroyed before the idle handler fires due"},{"type":"text","text":" "},{"type":"text","text":"to the use after free in the callback. A solution, to"},{"type":"text","text":" "},{"type":"text","text":"this particular problem, is to check to if the source"},{"type":"text","text":" "},{"type":"text","text":"has already been destroy within the callback."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"(C Language Example):"}]},{"type":"codeListing","syntax":"C","code":["static gboolean","idle_callback (gpointer data)","{","  SomeWidget *self = data;","  ","  g_mutex_lock (&self->idle_id_mutex);","  if (!g_source_is_destroyed (g_main_current_source ()))","    {","      \/\/ do stuff with self","    }","  g_mutex_unlock (&self->idle_id_mutex);","  ","  return FALSE;","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Calls to this function from a thread other than the one acquired by the"},{"type":"text","text":" "},{"type":"text","text":"[struct"},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/MainContext"},{"type":"text","text":"] the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Source"},{"type":"text","text":" is attached to are typically"},{"type":"text","text":" "},{"type":"text","text":"redundant, as the source could be destroyed immediately after this function"},{"type":"text","text":" "},{"type":"text","text":"returns. However, once a source is destroyed it cannot be un-destroyed, so"},{"type":"text","text":" "},{"type":"text","text":"this function can be used for opportunistic checks from any thread."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/glib\/sourceref\/isdestroyed"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/GLib\/documentation\/GLib\/SourceRef\/isDestroyed","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Returns whether "},{"type":"codeVoice","code":"source"},{"type":"text","text":" has been destroyed."}],"kind":"symbol","metadata":{"role":"symbol","title":"isDestroyed","roleHeading":"Instance Property","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"isDestroyed"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"symbolKind":"property","externalID":"s:4GLib14SourceProtocolPAAE11isDestroyedSbvp::SYNTHESIZED::s:4GLib9SourceRefV","extendedModule":"GLib","modules":[{"name":"GLib"}]},"hierarchy":{"paths":[["doc:\/\/GLib\/documentation\/GLib","doc:\/\/GLib\/documentation\/GLib\/SourceRef","doc:\/\/GLib\/documentation\/GLib\/SourceRef\/SourceProtocol-Implementations"]]},"references":{"doc://GLib/documentation/GLib/SourceRef/SourceProtocol-Implementations":{"role":"collectionGroup","title":"SourceProtocol Implementations","abstract":[],"identifier":"doc:\/\/GLib\/documentation\/GLib\/SourceRef\/SourceProtocol-Implementations","kind":"article","type":"topic","url":"\/documentation\/glib\/sourceref\/sourceprotocol-implementations"},"doc://GLib/documentation/GLib":{"role":"collection","title":"GLib","abstract":[],"identifier":"doc:\/\/GLib\/documentation\/GLib","kind":"symbol","type":"topic","url":"\/documentation\/glib"},"doc://GLib/documentation/GLib/SourceRef":{"role":"symbol","title":"SourceRef","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"SourceRef"}],"abstract":[{"type":"text","text":"The "},{"type":"codeVoice","code":"GSource"},{"type":"text","text":" struct is an opaque data type"},{"type":"text","text":" "},{"type":"text","text":"representing an event source."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/SourceRef","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"SourceRef"}],"url":"\/documentation\/glib\/sourceref"},"doc://GLib/documentation/GLib/Source":{"role":"symbol","title":"Source","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Source"}],"abstract":[{"type":"text","text":"The "},{"type":"codeVoice","code":"GSource"},{"type":"text","text":" struct is an opaque data type"},{"type":"text","text":" "},{"type":"text","text":"representing an event source."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/Source","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Source"}],"url":"\/documentation\/glib\/source"},"doc://GLib/documentation/GLib/SourceRef/isDestroyed":{"role":"symbol","title":"isDestroyed","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"isDestroyed"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"abstract":[{"type":"text","text":"Returns whether "},{"type":"codeVoice","code":"source"},{"type":"text","text":" has been destroyed."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/SourceRef\/isDestroyed","kind":"symbol","type":"topic","url":"\/documentation\/glib\/sourceref\/isdestroyed"},"doc://GLib/documentation/GLib/MainContext":{"role":"symbol","title":"MainContext","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"MainContext"}],"abstract":[{"type":"text","text":"The "},{"type":"codeVoice","code":"GMainContext"},{"type":"text","text":" struct is an opaque data"},{"type":"text","text":" "},{"type":"text","text":"type representing a set of sources to be handled in a main loop."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/MainContext","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"MainContext"}],"url":"\/documentation\/glib\/maincontext"}}}