{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"shellUnquote"},{"kind":"text","text":"("},{"kind":"externalParam","text":"quotedString"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"gchar","preciseIdentifier":"c:@T@gchar"},{"kind":"text","text":">!) "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":"!"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function only handles quotes; if a string contains file globs,"},{"type":"text","text":" "},{"type":"text","text":"arithmetic operators, variables, backticks, redirections, or other"},{"type":"text","text":" "},{"type":"text","text":"special-to-the-shell features, the result will be different from the"},{"type":"text","text":" "},{"type":"text","text":"result a real shell would produce (the variables, backticks, etc."},{"type":"text","text":" "},{"type":"text","text":"will be passed through literally instead of being expanded)."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function is guaranteed to succeed if applied to the result of"},{"type":"text","text":" "},{"type":"codeVoice","code":"g_shell_quote()"},{"type":"text","text":". If it fails, it returns "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" and sets the"},{"type":"text","text":" "},{"type":"text","text":"error."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"quotedString"},{"type":"text","text":" need not actually contain quoted or escaped text;"},{"type":"text","text":" "},{"type":"codeVoice","code":"g_shell_unquote()"},{"type":"text","text":" simply goes through the string and unquotes\/unescapes"},{"type":"text","text":" "},{"type":"text","text":"anything that the shell would. Both single and double quotes are"},{"type":"text","text":" "},{"type":"text","text":"handled, as are escapes including escaped newlines."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The return value must be freed with "},{"type":"codeVoice","code":"g_free()"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Possible errors are in the "},{"type":"codeVoice","code":"G_SHELL_ERROR"},{"type":"text","text":" domain."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Shell quoting rules are a bit strange. Single quotes preserve the"},{"type":"text","text":" "},{"type":"text","text":"literal string exactly. escape sequences are not allowed; not even"},{"type":"text","text":" "},{"type":"codeVoice","code":"\\'"},{"type":"text","text":" - if you want a "},{"type":"codeVoice","code":"'"},{"type":"text","text":" in the quoted text, you have to do something"},{"type":"text","text":" "},{"type":"text","text":"like "},{"type":"codeVoice","code":"'foo'\\''bar'"},{"type":"text","text":". Double quotes allow "},{"type":"codeVoice","code":"$"},{"type":"text","text":", ```, "},{"type":"codeVoice","code":"\""},{"type":"text","text":", ``, and"},{"type":"text","text":" "},{"type":"text","text":"newline to be escaped with backslash. Otherwise double quotes"},{"type":"text","text":" "},{"type":"text","text":"preserve things literally."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/glib\/shellunquote(quotedstring:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/GLib\/documentation\/GLib\/shellUnquote(quotedString:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Unquotes a string as the shell (\/bin\/sh) would."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"shellUnquote"},{"kind":"text","text":"("},{"kind":"externalParam","text":"quotedString"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"gchar","preciseIdentifier":"c:@T@gchar"},{"kind":"text","text":">!) "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":"!"}],"title":"shellUnquote(quotedString:)","roleHeading":"Function","role":"symbol","symbolKind":"func","externalID":"s:4GLib12shellUnquote12quotedStringSSSgSPys4Int8VGSg_tKF","modules":[{"name":"GLib"}]},"hierarchy":{"paths":[["doc:\/\/GLib\/documentation\/GLib"]]},"references":{"doc://GLib/documentation/GLib":{"role":"collection","title":"GLib","abstract":[],"identifier":"doc:\/\/GLib\/documentation\/GLib","kind":"symbol","type":"topic","url":"\/documentation\/glib"},"doc://GLib/documentation/GLib/shellUnquote(quotedString:)":{"role":"symbol","title":"shellUnquote(quotedString:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"shellUnquote"},{"kind":"text","text":"("},{"kind":"externalParam","text":"quotedString"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"gchar","preciseIdentifier":"c:@T@gchar"},{"kind":"text","text":">!) "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":"!"}],"abstract":[{"type":"text","text":"Unquotes a string as the shell (\/bin\/sh) would."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/shellUnquote(quotedString:)","kind":"symbol","type":"topic","url":"\/documentation\/glib\/shellunquote(quotedstring:)"}}}