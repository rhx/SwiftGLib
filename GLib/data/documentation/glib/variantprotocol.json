{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"VariantProtocol"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","identifier":"doc:\/\/GLib\/documentation\/GLib\/PointerWrapper","preciseIdentifier":"s:4GLib14PointerWrapperP","text":"PointerWrapper"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"GVariant"},{"type":"text","text":" may contain simple types, like an integer, or a boolean value;"},{"type":"text","text":" "},{"type":"text","text":"or complex types, like an array of two strings, or a dictionary of key"},{"type":"text","text":" "},{"type":"text","text":"value pairs. A "},{"type":"codeVoice","code":"GVariant"},{"type":"text","text":" is also immutable: once it’s been created neither"},{"type":"text","text":" "},{"type":"text","text":"its type nor its content can be modified further."}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"GVariant"},{"type":"text","text":" is useful whenever data needs to be serialized, for example when"},{"type":"text","text":" "},{"type":"text","text":"sending method parameters in D-Bus, or when saving settings using"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"..\/gio\/class.Settings.html"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When creating a new "},{"type":"codeVoice","code":"GVariant"},{"type":"text","text":", you pass the data you want to store in it"},{"type":"text","text":" "},{"type":"text","text":"along with a string representing the type of data you wish to pass to it."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For instance, if you want to create a "},{"type":"codeVoice","code":"GVariant"},{"type":"text","text":" holding an integer value you"},{"type":"text","text":" "},{"type":"text","text":"can use:"}]},{"type":"codeListing","syntax":"c","code":["GVariant *v = g_variant_new (\"u\", 40);"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The string "},{"type":"codeVoice","code":"u"},{"type":"text","text":" in the first argument tells "},{"type":"codeVoice","code":"GVariant"},{"type":"text","text":" that the data passed to"},{"type":"text","text":" "},{"type":"text","text":"the constructor ("},{"type":"codeVoice","code":"40"},{"type":"text","text":") is going to be an unsigned integer."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"More advanced examples of "},{"type":"codeVoice","code":"GVariant"},{"type":"text","text":" in use can be found in documentation for"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"gvariant-format-strings.html#pointers"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The range of possible values is determined by the type."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The type system used by "},{"type":"codeVoice","code":"GVariant"},{"type":"text","text":" is [type"},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantType"},{"type":"text","text":"]."}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"GVariant"},{"type":"text","text":" instances always have a type and a value (which are given"},{"type":"text","text":" "},{"type":"text","text":"at construction time).  The type and value of a "},{"type":"codeVoice","code":"GVariant"},{"type":"text","text":" instance"},{"type":"text","text":" "},{"type":"text","text":"can never change other than by the "},{"type":"codeVoice","code":"GVariant"},{"type":"text","text":" itself being"},{"type":"text","text":" "},{"type":"text","text":"destroyed.  A "},{"type":"codeVoice","code":"GVariant"},{"type":"text","text":" cannot contain a pointer."}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"GVariant"},{"type":"text","text":" is reference counted using [method"},{"type":"codeVoice","code":"GLib.Variant.ref"},{"type":"text","text":"] and"},{"type":"text","text":" "},{"type":"text","text":"[method"},{"type":"codeVoice","code":"GLib.Variant.unref"},{"type":"text","text":"].  "},{"type":"codeVoice","code":"GVariant"},{"type":"text","text":" also has floating reference counts —"},{"type":"text","text":" "},{"type":"text","text":"see [method"},{"type":"codeVoice","code":"GLib.Variant.ref_sink"},{"type":"text","text":"]."}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"GVariant"},{"type":"text","text":" is completely threadsafe.  A "},{"type":"codeVoice","code":"GVariant"},{"type":"text","text":" instance can be"},{"type":"text","text":" "},{"type":"text","text":"concurrently accessed in any way from any number of threads without"},{"type":"text","text":" "},{"type":"text","text":"problems."}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"GVariant"},{"type":"text","text":" is heavily optimised for dealing with data in serialized"},{"type":"text","text":" "},{"type":"text","text":"form.  It works particularly well with data located in memory-mapped"},{"type":"text","text":" "},{"type":"text","text":"files.  It can perform nearly all deserialization operations in a"},{"type":"text","text":" "},{"type":"text","text":"small constant time, usually touching only a single memory page."},{"type":"text","text":" "},{"type":"text","text":"Serialized "},{"type":"codeVoice","code":"GVariant"},{"type":"text","text":" data can also be sent over the network."}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"GVariant"},{"type":"text","text":" is largely compatible with D-Bus.  Almost all types of"},{"type":"text","text":" "},{"type":"codeVoice","code":"GVariant"},{"type":"text","text":" instances can be sent over D-Bus.  See [type"},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantType"},{"type":"text","text":"] for"},{"type":"text","text":" "},{"type":"text","text":"exceptions.  (However, "},{"type":"codeVoice","code":"GVariant"},{"type":"text","text":"’s serialization format is not the same"},{"type":"text","text":" "},{"type":"text","text":"as the serialization format of a D-Bus message body: use"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"..\/gio\/class.DBusMessage.html"},{"type":"text","text":", in the GIO library, for those.)"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For space-efficiency, the "},{"type":"codeVoice","code":"GVariant"},{"type":"text","text":" serialization format does not"},{"type":"text","text":" "},{"type":"text","text":"automatically include the variant’s length, type or endianness,"},{"type":"text","text":" "},{"type":"text","text":"which must either be implied from context (such as knowledge that a"},{"type":"text","text":" "},{"type":"text","text":"particular file format always contains a little-endian"},{"type":"text","text":" "},{"type":"codeVoice","code":"G_VARIANT_TYPE_VARIANT"},{"type":"text","text":" which occupies the whole length of the file)"},{"type":"text","text":" "},{"type":"text","text":"or supplied out-of-band (for instance, a length, type and\/or endianness"},{"type":"text","text":" "},{"type":"text","text":"indicator could be placed at the beginning of a file, network message"},{"type":"text","text":" "},{"type":"text","text":"or network stream)."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"GVariant"},{"type":"text","text":"’s size is limited mainly by any lower level operating"},{"type":"text","text":" "},{"type":"text","text":"system constraints, such as the number of bits in "},{"type":"codeVoice","code":"gsize"},{"type":"text","text":".  For"},{"type":"text","text":" "},{"type":"text","text":"example, it is reasonable to have a 2GB file mapped into memory"},{"type":"text","text":" "},{"type":"text","text":"with [struct"},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/MappedFile"},{"type":"text","text":"], and call [ctor"},{"type":"codeVoice","code":"GLib.Variant.new_from_data"},{"type":"text","text":"] on"},{"type":"text","text":" "},{"type":"text","text":"it."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For convenience to C programmers, "},{"type":"codeVoice","code":"GVariant"},{"type":"text","text":" features powerful"},{"type":"text","text":" "},{"type":"text","text":"varargs-based value construction and destruction.  This feature is"},{"type":"text","text":" "},{"type":"text","text":"designed to be embedded in other libraries."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"There is a Python-inspired text language for describing "},{"type":"codeVoice","code":"GVariant"},{"type":"text","text":" "},{"type":"text","text":"values.  "},{"type":"codeVoice","code":"GVariant"},{"type":"text","text":" includes a printer for this language and a parser"},{"type":"text","text":" "},{"type":"text","text":"with type inferencing."}]},{"anchor":"Memory-Use","level":2,"type":"heading","text":"Memory Use"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"GVariant"},{"type":"text","text":" tries to be quite efficient with respect to memory use."},{"type":"text","text":" "},{"type":"text","text":"This section gives a rough idea of how much memory is used by the"},{"type":"text","text":" "},{"type":"text","text":"current implementation.  The information here is subject to change"},{"type":"text","text":" "},{"type":"text","text":"in the future."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The memory allocated by "},{"type":"codeVoice","code":"GVariant"},{"type":"text","text":" can be grouped into 4 broad"},{"type":"text","text":" "},{"type":"text","text":"purposes: memory for serialized data, memory for the type"},{"type":"text","text":" "},{"type":"text","text":"information cache, buffer management memory and memory for the"},{"type":"text","text":" "},{"type":"codeVoice","code":"GVariant"},{"type":"text","text":" structure itself."}]},{"anchor":"Serialized-Data-Memory","level":2,"type":"heading","text":"Serialized Data Memory"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is the memory that is used for storing "},{"type":"codeVoice","code":"GVariant"},{"type":"text","text":" data in"},{"type":"text","text":" "},{"type":"text","text":"serialized form.  This is what would be sent over the network or"},{"type":"text","text":" "},{"type":"text","text":"what would end up on disk, not counting any indicator of the"},{"type":"text","text":" "},{"type":"text","text":"endianness, or of the length or type of the top-level variant."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The amount of memory required to store a boolean is 1 byte. 16,"},{"type":"text","text":" "},{"type":"text","text":"32 and 64 bit integers and double precision floating point numbers"},{"type":"text","text":" "},{"type":"text","text":"use their ‘natural’ size.  Strings (including object path and"},{"type":"text","text":" "},{"type":"text","text":"signature strings) are stored with a nul terminator, and as such"},{"type":"text","text":" "},{"type":"text","text":"use the length of the string plus 1 byte."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"‘Maybe’ types use no space at all to represent the null value and"},{"type":"text","text":" "},{"type":"text","text":"use the same amount of space (sometimes plus one byte) as the"},{"type":"text","text":" "},{"type":"text","text":"equivalent non-maybe-typed value to represent the non-null case."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Arrays use the amount of space required to store each of their"},{"type":"text","text":" "},{"type":"text","text":"members, concatenated.  Additionally, if the items stored in an"},{"type":"text","text":" "},{"type":"text","text":"array are not of a fixed-size (ie: strings, other arrays, etc)"},{"type":"text","text":" "},{"type":"text","text":"then an additional framing offset is stored for each item.  The"},{"type":"text","text":" "},{"type":"text","text":"size of this offset is either 1, 2 or 4 bytes depending on the"},{"type":"text","text":" "},{"type":"text","text":"overall size of the container.  Additionally, extra padding bytes"},{"type":"text","text":" "},{"type":"text","text":"are added as required for alignment of child values."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Tuples (including dictionary entries) use the amount of space"},{"type":"text","text":" "},{"type":"text","text":"required to store each of their members, concatenated, plus one"},{"type":"text","text":" "},{"type":"text","text":"framing offset (as per arrays) for each non-fixed-sized item in"},{"type":"text","text":" "},{"type":"text","text":"the tuple, except for the last one.  Additionally, extra padding"},{"type":"text","text":" "},{"type":"text","text":"bytes are added as required for alignment of child values."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Variants use the same amount of space as the item inside of the"},{"type":"text","text":" "},{"type":"text","text":"variant, plus 1 byte, plus the length of the type string for the"},{"type":"text","text":" "},{"type":"text","text":"item inside the variant."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"As an example, consider a dictionary mapping strings to variants."},{"type":"text","text":" "},{"type":"text","text":"In the case that the dictionary is empty, 0 bytes are required for"},{"type":"text","text":" "},{"type":"text","text":"the serialization."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If we add an item ‘width’ that maps to the int32 value of 500 then"},{"type":"text","text":" "},{"type":"text","text":"we will use 4 bytes to store the int32 (so 6 for the variant"},{"type":"text","text":" "},{"type":"text","text":"containing it) and 6 bytes for the string.  The variant must be"},{"type":"text","text":" "},{"type":"text","text":"aligned to 8 after the 6 bytes of the string, so that’s 2 extra"},{"type":"text","text":" "},{"type":"text","text":"bytes.  6 (string) + 2 (padding) + 6 (variant) is 14 bytes used"},{"type":"text","text":" "},{"type":"text","text":"for the dictionary entry.  An additional 1 byte is added to the"},{"type":"text","text":" "},{"type":"text","text":"array as a framing offset making a total of 15 bytes."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If we add another entry, ‘title’ that maps to a nullable string"},{"type":"text","text":" "},{"type":"text","text":"that happens to have a value of null, then we use 0 bytes for the"},{"type":"text","text":" "},{"type":"text","text":"null value (and 3 bytes for the variant to contain it along with"},{"type":"text","text":" "},{"type":"text","text":"its type string) plus 6 bytes for the string.  Again, we need 2"},{"type":"text","text":" "},{"type":"text","text":"padding bytes.  That makes a total of 6 + 2 + 3 = 11 bytes."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"We now require extra padding between the two items in the array."},{"type":"text","text":" "},{"type":"text","text":"After the 14 bytes of the first item, that’s 2 bytes required."},{"type":"text","text":" "},{"type":"text","text":"We now require 2 framing offsets for an extra two"},{"type":"text","text":" "},{"type":"text","text":"bytes. 14 + 2 + 11 + 2 = 29 bytes to encode the entire two-item"},{"type":"text","text":" "},{"type":"text","text":"dictionary."}]},{"anchor":"Type-Information-Cache","level":2,"type":"heading","text":"Type Information Cache"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For each "},{"type":"codeVoice","code":"GVariant"},{"type":"text","text":" type that currently exists in the program a type"},{"type":"text","text":" "},{"type":"text","text":"information structure is kept in the type information cache.  The"},{"type":"text","text":" "},{"type":"text","text":"type information structure is required for rapid deserialization."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Continuing with the above example, if a "},{"type":"codeVoice","code":"GVariant"},{"type":"text","text":" exists with the"},{"type":"text","text":" "},{"type":"text","text":"type "},{"type":"codeVoice","code":"a{sv}"},{"type":"text","text":" then a type information struct will exist for"},{"type":"text","text":" "},{"type":"codeVoice","code":"a{sv}"},{"type":"text","text":", "},{"type":"codeVoice","code":"{sv}"},{"type":"text","text":", "},{"type":"codeVoice","code":"s"},{"type":"text","text":", and "},{"type":"codeVoice","code":"v"},{"type":"text","text":".  Multiple uses of the same type"},{"type":"text","text":" "},{"type":"text","text":"will share the same type information.  Additionally, all"},{"type":"text","text":" "},{"type":"text","text":"single-digit types are stored in read-only static memory and do"},{"type":"text","text":" "},{"type":"text","text":"not contribute to the writable memory footprint of a program using"},{"type":"text","text":" "},{"type":"codeVoice","code":"GVariant"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Aside from the type information structures stored in read-only"},{"type":"text","text":" "},{"type":"text","text":"memory, there are two forms of type information.  One is used for"},{"type":"text","text":" "},{"type":"text","text":"container types where there is a single element type: arrays and"},{"type":"text","text":" "},{"type":"text","text":"maybe types.  The other is used for container types where there"},{"type":"text","text":" "},{"type":"text","text":"are multiple element types: tuples and dictionary entries."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Array type info structures are "},{"type":"codeVoice","code":"6 * sizeof (void *)"},{"type":"text","text":", plus the"},{"type":"text","text":" "},{"type":"text","text":"memory required to store the type string itself.  This means that"},{"type":"text","text":" "},{"type":"text","text":"on 32-bit systems, the cache entry for "},{"type":"codeVoice","code":"a{sv}"},{"type":"text","text":" would require 30"},{"type":"text","text":" "},{"type":"text","text":"bytes of memory (plus allocation overhead)."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Tuple type info structures are "},{"type":"codeVoice","code":"6 * sizeof (void *)"},{"type":"text","text":", plus "},{"type":"codeVoice","code":"4 * sizeof (void *)"},{"type":"text","text":" for each item in the tuple, plus the memory"},{"type":"text","text":" "},{"type":"text","text":"required to store the type string itself.  A 2-item tuple, for"},{"type":"text","text":" "},{"type":"text","text":"example, would have a type information structure that consumed"},{"type":"text","text":" "},{"type":"text","text":"writable memory in the size of "},{"type":"codeVoice","code":"14 * sizeof (void *)"},{"type":"text","text":" (plus type"},{"type":"text","text":" "},{"type":"text","text":"string)  This means that on 32-bit systems, the cache entry for"},{"type":"text","text":" "},{"type":"codeVoice","code":"{sv}"},{"type":"text","text":" would require 61 bytes of memory (plus allocation overhead)."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This means that in total, for our "},{"type":"codeVoice","code":"a{sv}"},{"type":"text","text":" example, 91 bytes of"},{"type":"text","text":" "},{"type":"text","text":"type information would be allocated."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The type information cache, additionally, uses a [struct"},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/HashTable"},{"type":"text","text":"] to"},{"type":"text","text":" "},{"type":"text","text":"store and look up the cached items and stores a pointer to this"},{"type":"text","text":" "},{"type":"text","text":"hash table in static storage.  The hash table is freed when there"},{"type":"text","text":" "},{"type":"text","text":"are zero items in the type cache."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Although these sizes may seem large it is important to remember"},{"type":"text","text":" "},{"type":"text","text":"that a program will probably only have a very small number of"},{"type":"text","text":" "},{"type":"text","text":"different types of values in it and that only one type information"},{"type":"text","text":" "},{"type":"text","text":"structure is required for many different values of the same type."}]},{"anchor":"Buffer-Management-Memory","level":2,"type":"heading","text":"Buffer Management Memory"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"GVariant"},{"type":"text","text":" uses an internal buffer management structure to deal"},{"type":"text","text":" "},{"type":"text","text":"with the various different possible sources of serialized data"},{"type":"text","text":" "},{"type":"text","text":"that it uses.  The buffer is responsible for ensuring that the"},{"type":"text","text":" "},{"type":"text","text":"correct call is made when the data is no longer in use by"},{"type":"text","text":" "},{"type":"codeVoice","code":"GVariant"},{"type":"text","text":".  This may involve a [func"},{"type":"codeVoice","code":"GLib.free"},{"type":"text","text":"] or"},{"type":"text","text":" "},{"type":"text","text":"even [method"},{"type":"codeVoice","code":"GLib.MappedFile.unref"},{"type":"text","text":"]."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"One buffer management structure is used for each chunk of"},{"type":"text","text":" "},{"type":"text","text":"serialized data.  The size of the buffer management structure"},{"type":"text","text":" "},{"type":"text","text":"is "},{"type":"codeVoice","code":"4 * (void *)"},{"type":"text","text":".  On 32-bit systems, that’s 16 bytes."}]},{"anchor":"GVariant-structure","level":2,"type":"heading","text":"GVariant structure"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The size of a "},{"type":"codeVoice","code":"GVariant"},{"type":"text","text":" structure is "},{"type":"codeVoice","code":"6 * (void *)"},{"type":"text","text":".  On 32-bit"},{"type":"text","text":" "},{"type":"text","text":"systems, that’s 24 bytes."}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"GVariant"},{"type":"text","text":" structures only exist if they are explicitly created"},{"type":"text","text":" "},{"type":"text","text":"with API calls.  For example, if a "},{"type":"codeVoice","code":"GVariant"},{"type":"text","text":" is constructed out of"},{"type":"text","text":" "},{"type":"text","text":"serialized data for the example given above (with the dictionary)"},{"type":"text","text":" "},{"type":"text","text":"then although there are 9 individual values that comprise the"},{"type":"text","text":" "},{"type":"text","text":"entire dictionary (two keys, two values, two variants containing"},{"type":"text","text":" "},{"type":"text","text":"the values, two dictionary entries, plus the dictionary itself),"},{"type":"text","text":" "},{"type":"text","text":"only 1 "},{"type":"codeVoice","code":"GVariant"},{"type":"text","text":" instance exists — the one referring to the"},{"type":"text","text":" "},{"type":"text","text":"dictionary."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If calls are made to start accessing the other values then"},{"type":"text","text":" "},{"type":"codeVoice","code":"GVariant"},{"type":"text","text":" instances will exist for those values only for as long"},{"type":"text","text":" "},{"type":"text","text":"as they are in use (ie: until you call [method"},{"type":"codeVoice","code":"GLib.Variant.unref"},{"type":"text","text":"]).  The"},{"type":"text","text":" "},{"type":"text","text":"type information is shared.  The serialized data and the buffer"},{"type":"text","text":" "},{"type":"text","text":"management structure for that serialized data is shared by the"},{"type":"text","text":" "},{"type":"text","text":"child."}]},{"anchor":"Summary","level":2,"type":"heading","text":"Summary"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To put the entire example together, for our dictionary mapping"},{"type":"text","text":" "},{"type":"text","text":"strings to variants (with two entries, as given above), we are"},{"type":"text","text":" "},{"type":"text","text":"using 91 bytes of memory for type information, 29 bytes of memory"},{"type":"text","text":" "},{"type":"text","text":"for the serialized data, 16 bytes for buffer management and 24"},{"type":"text","text":" "},{"type":"text","text":"bytes for the "},{"type":"codeVoice","code":"GVariant"},{"type":"text","text":" instance, or a total of 160 bytes, plus"},{"type":"text","text":" "},{"type":"text","text":"allocation overhead.  If we were to use [method"},{"type":"codeVoice","code":"GLib.Variant.get_child_value"},{"type":"text","text":"]"},{"type":"text","text":" "},{"type":"text","text":"to access the two dictionary entries, we would use an additional 48"},{"type":"text","text":" "},{"type":"text","text":"bytes.  If we were to have other dictionaries of the same type, we"},{"type":"text","text":" "},{"type":"text","text":"would use more memory for the serialized data and buffer"},{"type":"text","text":" "},{"type":"text","text":"management for those dictionaries, but the type information would"},{"type":"text","text":" "},{"type":"text","text":"be shared."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantProtocol"},{"type":"text","text":" protocol exposes the methods and properties of an underlying "},{"type":"codeVoice","code":"GVariant"},{"type":"text","text":" instance."},{"type":"text","text":" "},{"type":"text","text":"The default implementation of these can be found in the protocol extension below."},{"type":"text","text":" "},{"type":"text","text":"For a concrete class that implements these methods and properties, see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Variant"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Alternatively, use "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantRef"},{"type":"text","text":" as a lighweight, "},{"type":"codeVoice","code":"unowned"},{"type":"text","text":" reference if you already have an instance you just want to use."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/glib\/variantprotocol"],"traits":[{"interfaceLanguage":"swift"}]}],"relationshipsSections":[{"identifiers":["doc:\/\/GLib\/documentation\/GLib\/PointerWrapper"],"kind":"relationships","title":"Inherits From","type":"inheritsFrom"},{"identifiers":["doc:\/\/GLib\/documentation\/GLib\/Variant","doc:\/\/GLib\/documentation\/GLib\/VariantRef"],"kind":"relationships","title":"Conforming Types","type":"conformingTypes"}],"identifier":{"url":"doc:\/\/GLib\/documentation\/GLib\/VariantProtocol","interfaceLanguage":"swift"},"abstract":[{"type":"codeVoice","code":"GVariant"},{"type":"text","text":" is a variant datatype; it can contain one or more values"},{"type":"text","text":" "},{"type":"text","text":"along with information about the type of the values."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"VariantProtocol"}],"title":"VariantProtocol","roleHeading":"Protocol","role":"symbol","symbolKind":"protocol","externalID":"s:4GLib15VariantProtocolP","modules":[{"name":"GLib"}],"navigatorTitle":[{"kind":"identifier","text":"VariantProtocol"}]},"hierarchy":{"paths":[["doc:\/\/GLib\/documentation\/GLib"]]},"topicSections":[{"title":"Instance Properties","identifiers":["doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/boolean","doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/byte","doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/bytestring","doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/data","doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/dataAsBytes","doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/double","doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/handle","doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/int16","doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/int32","doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/int64","doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/isContainer","doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/isFloating","doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/isNormalForm","doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/maybe","doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/normalForm","doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/size","doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/type","doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/typeString","doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/uint16","doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/uint32","doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/uint64","doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/variant","doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/variant_ptr-4tjcr"]},{"title":"Instance Methods","identifiers":["doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/byteswap()","doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/check(formatString:copyOnly:)","doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/classify()","doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/compare(two:)","doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/dupBytestring(length:)","doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/dupBytestringArray(length:)","doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/dupObjv(length:)","doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/dupString(length:)","doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/dupStrv(length:)","doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/equal(two:)","doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/getBoolean()","doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/getByte()","doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/getBytestring()","doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/getBytestringArray(length:)","doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/getChildValue(index:)","doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/getData()","doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/getDataAsBytes()","doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/getDouble()","doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/getFixedArray(nElements:elementSize:)","doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/getHandle()","doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/getInt16()","doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/getInt32()","doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/getInt64()","doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/getMaybe()","doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/getNormalForm()","doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/getObjv(length:)","doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/getSize()","doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/getString(length:)","doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/getStrv(length:)","doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/getType()","doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/getTypeString()","doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/getUint16()","doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/getUint32()","doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/getUint64()","doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/getVariant()","doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/hash()","doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/isOf(type:)","doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/iterNew()","doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/logVariant(logDomain:logLevel:)","doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/lookupValue(key:expectedType:)-43hhk","doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/lookupValue(key:expectedType:)-4oqal","doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/nChildren()","doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/print(string:typeAnnotate:)-5hbbk","doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/print(string:typeAnnotate:)-5w2vu","doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/print(typeAnnotate:)","doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/ref()","doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/refSink()","doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/store(data:)","doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/takeRef()","doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/unref()"]}],"references":{"doc://GLib/documentation/GLib/VariantProtocol/dupString(length:)":{"role":"symbol","title":"dupString(length:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"dupString"},{"kind":"text","text":"("},{"kind":"externalParam","text":"length"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"gsize","preciseIdentifier":"c:@T@gsize"},{"kind":"text","text":">!) -> "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":"!"}],"abstract":[{"type":"text","text":"Similar to "},{"type":"codeVoice","code":"g_variant_get_string()"},{"type":"text","text":" except that instead of returning"},{"type":"text","text":" "},{"type":"text","text":"a constant string, the string is duplicated."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/dupString(length:)","kind":"symbol","type":"topic","url":"\/documentation\/glib\/variantprotocol\/dupstring(length:)"},"doc://GLib/documentation/GLib/VariantProtocol/hash()":{"role":"symbol","title":"hash()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"hash"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"}],"abstract":[{"type":"text","text":"Generates a hash value for a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Variant"},{"type":"text","text":" instance."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/hash()","kind":"symbol","type":"topic","url":"\/documentation\/glib\/variantprotocol\/hash()"},"doc://GLib/documentation/GLib/VariantType":{"role":"symbol","title":"VariantType","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"VariantType"}],"abstract":[{"type":"text","text":"A type in the [type"},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Variant"},{"type":"text","text":"] type system."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantType","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"VariantType"}],"url":"\/documentation\/glib\/varianttype"},"doc://GLib/documentation/GLib/VariantProtocol/int64":{"role":"symbol","title":"int64","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"int64"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"gint64","preciseIdentifier":"c:@T@gint64"}],"abstract":[{"type":"text","text":"Returns the 64-bit signed integer value of "},{"type":"codeVoice","code":"value"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/int64","kind":"symbol","type":"topic","url":"\/documentation\/glib\/variantprotocol\/int64"},"doc://GLib/documentation/GLib/VariantProtocol/getTypeString()":{"role":"symbol","title":"getTypeString()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"getTypeString"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":"!"}],"abstract":[{"type":"text","text":"Returns the type string of "},{"type":"codeVoice","code":"value"},{"type":"text","text":".  Unlike the result of calling"},{"type":"text","text":" "},{"type":"codeVoice","code":"g_variant_type_peek_string()"},{"type":"text","text":", this string is nul-terminated.  This"},{"type":"text","text":" "},{"type":"text","text":"string belongs to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Variant"},{"type":"text","text":" and must not be freed."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/getTypeString()","kind":"symbol","type":"topic","url":"\/documentation\/glib\/variantprotocol\/gettypestring()"},"doc://GLib/documentation/GLib/VariantProtocol/print(typeAnnotate:)":{"role":"symbol","title":"print(typeAnnotate:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"print"},{"kind":"text","text":"("},{"kind":"externalParam","text":"typeAnnotate"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":"!"}],"abstract":[{"type":"text","text":"Pretty-prints "},{"type":"codeVoice","code":"value"},{"type":"text","text":" in the format understood by "},{"type":"codeVoice","code":"g_variant_parse()"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/print(typeAnnotate:)","kind":"symbol","type":"topic","url":"\/documentation\/glib\/variantprotocol\/print(typeannotate:)"},"doc://GLib/documentation/GLib/VariantProtocol/size":{"role":"symbol","title":"size","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"size"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"}],"abstract":[{"type":"text","text":"Determines the number of bytes that would be required to store "},{"type":"codeVoice","code":"value"},{"type":"text","text":" "},{"type":"text","text":"with "},{"type":"codeVoice","code":"g_variant_store()"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/size","kind":"symbol","type":"topic","url":"\/documentation\/glib\/variantprotocol\/size"},"doc://GLib/documentation/GLib/VariantProtocol/dupBytestring(length:)":{"role":"symbol","title":"dupBytestring(length:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"dupBytestring"},{"kind":"text","text":"("},{"kind":"externalParam","text":"length"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"gsize","preciseIdentifier":"c:@T@gsize"},{"kind":"text","text":">!) -> "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":"!"}],"abstract":[{"type":"text","text":"Similar to "},{"type":"codeVoice","code":"g_variant_get_bytestring()"},{"type":"text","text":" except that instead of"},{"type":"text","text":" "},{"type":"text","text":"returning a constant string, the string is duplicated."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/dupBytestring(length:)","kind":"symbol","type":"topic","url":"\/documentation\/glib\/variantprotocol\/dupbytestring(length:)"},"doc://GLib/documentation/GLib/VariantProtocol/getByte()":{"role":"symbol","title":"getByte()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"getByte"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"guint8","preciseIdentifier":"c:@T@guint8"}],"abstract":[{"type":"text","text":"Returns the byte value of "},{"type":"codeVoice","code":"value"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/getByte()","kind":"symbol","type":"topic","url":"\/documentation\/glib\/variantprotocol\/getbyte()"},"doc://GLib/documentation/GLib/VariantProtocol/getVariant()":{"role":"symbol","title":"getVariant()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"getVariant"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"VariantRef","preciseIdentifier":"s:4GLib10VariantRefV"},{"kind":"text","text":"!"}],"abstract":[{"type":"text","text":"Unboxes "},{"type":"codeVoice","code":"value"},{"type":"text","text":".  The result is the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Variant"},{"type":"text","text":" instance that was"},{"type":"text","text":" "},{"type":"text","text":"contained in "},{"type":"codeVoice","code":"value"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/getVariant()","kind":"symbol","type":"topic","url":"\/documentation\/glib\/variantprotocol\/getvariant()"},"../gio/class.Settings.html":{"title":"GSettings","titleInlineContent":[{"type":"codeVoice","code":"GSettings"}],"type":"link","identifier":"..\/gio\/class.Settings.html","url":"..\/gio\/class.Settings.html"},"doc://GLib/documentation/GLib/VariantProtocol/check(formatString:copyOnly:)":{"role":"symbol","title":"check(formatString:copyOnly:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"check"},{"kind":"text","text":"("},{"kind":"externalParam","text":"formatString"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"gchar","preciseIdentifier":"c:@T@gchar"},{"kind":"text","text":">!, "},{"kind":"externalParam","text":"copyOnly"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"abstract":[{"type":"text","text":"Checks if calling "},{"type":"codeVoice","code":"g_variant_get()"},{"type":"text","text":" with "},{"type":"codeVoice","code":"formatString"},{"type":"text","text":" on "},{"type":"codeVoice","code":"value"},{"type":"text","text":" would"},{"type":"text","text":" "},{"type":"text","text":"be valid from a type-compatibility standpoint.  "},{"type":"codeVoice","code":"formatString"},{"type":"text","text":" is"},{"type":"text","text":" "},{"type":"text","text":"assumed to be a valid format string (from a syntactic standpoint)."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/check(formatString:copyOnly:)","kind":"symbol","type":"topic","url":"\/documentation\/glib\/variantprotocol\/check(formatstring:copyonly:)"},"doc://GLib/documentation/GLib/VariantProtocol/getInt64()":{"role":"symbol","title":"getInt64()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"getInt64"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"gint64","preciseIdentifier":"c:@T@gint64"}],"abstract":[{"type":"text","text":"Returns the 64-bit signed integer value of "},{"type":"codeVoice","code":"value"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/getInt64()","kind":"symbol","type":"topic","url":"\/documentation\/glib\/variantprotocol\/getint64()"},"doc://GLib/documentation/GLib/VariantProtocol/uint16":{"role":"symbol","title":"uint16","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"uint16"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"guint16","preciseIdentifier":"c:@T@guint16"}],"abstract":[{"type":"text","text":"Returns the 16-bit unsigned integer value of "},{"type":"codeVoice","code":"value"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/uint16","kind":"symbol","type":"topic","url":"\/documentation\/glib\/variantprotocol\/uint16"},"doc://GLib/documentation/GLib/VariantProtocol/uint64":{"role":"symbol","title":"uint64","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"uint64"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"guint64","preciseIdentifier":"c:@T@guint64"}],"abstract":[{"type":"text","text":"Returns the 64-bit unsigned integer value of "},{"type":"codeVoice","code":"value"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/uint64","kind":"symbol","type":"topic","url":"\/documentation\/glib\/variantprotocol\/uint64"},"doc://GLib/documentation/GLib/VariantProtocol/byteswap()":{"role":"symbol","title":"byteswap()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"byteswap"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"VariantRef","preciseIdentifier":"s:4GLib10VariantRefV"},{"kind":"text","text":"!"}],"abstract":[{"type":"text","text":"Performs a byteswapping operation on the contents of "},{"type":"codeVoice","code":"value"},{"type":"text","text":".  The"},{"type":"text","text":" "},{"type":"text","text":"result is that all multi-byte numeric data contained in "},{"type":"codeVoice","code":"value"},{"type":"text","text":" is"},{"type":"text","text":" "},{"type":"text","text":"byteswapped.  That includes 16, 32, and 64bit signed and unsigned"},{"type":"text","text":" "},{"type":"text","text":"integers as well as file handles and double precision floating point"},{"type":"text","text":" "},{"type":"text","text":"values."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/byteswap()","kind":"symbol","type":"topic","url":"\/documentation\/glib\/variantprotocol\/byteswap()"},"doc://GLib/documentation/GLib/VariantProtocol/handle":{"role":"symbol","title":"handle","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"handle"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"gint32","preciseIdentifier":"c:@T@gint32"}],"abstract":[{"type":"text","text":"Returns the 32-bit signed integer value of "},{"type":"codeVoice","code":"value"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/handle","kind":"symbol","type":"topic","url":"\/documentation\/glib\/variantprotocol\/handle"},"doc://GLib/documentation/GLib/VariantProtocol/isFloating":{"role":"symbol","title":"isFloating","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"isFloating"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"abstract":[{"type":"text","text":"Checks whether "},{"type":"codeVoice","code":"value"},{"type":"text","text":" has a floating reference count."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/isFloating","kind":"symbol","type":"topic","url":"\/documentation\/glib\/variantprotocol\/isfloating"},"doc://GLib/documentation/GLib/Variant":{"role":"symbol","title":"Variant","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Variant"}],"abstract":[{"type":"codeVoice","code":"GVariant"},{"type":"text","text":" is a variant datatype; it can contain one or more values"},{"type":"text","text":" "},{"type":"text","text":"along with information about the type of the values."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/Variant","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Variant"}],"url":"\/documentation\/glib\/variant"},"doc://GLib/documentation/GLib/VariantProtocol/dataAsBytes":{"role":"symbol","title":"dataAsBytes","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"dataAsBytes"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"BytesRef","preciseIdentifier":"s:4GLib8BytesRefV"},{"kind":"text","text":"!"}],"abstract":[{"type":"text","text":"Returns a pointer to the serialized form of a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Variant"},{"type":"text","text":" instance."},{"type":"text","text":" "},{"type":"text","text":"The semantics of this function are exactly the same as"},{"type":"text","text":" "},{"type":"codeVoice","code":"g_variant_get_data()"},{"type":"text","text":", except that the returned "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Bytes"},{"type":"text","text":" holds"},{"type":"text","text":" "},{"type":"text","text":"a reference to the variant data."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/dataAsBytes","kind":"symbol","type":"topic","url":"\/documentation\/glib\/variantprotocol\/dataasbytes"},"doc://GLib/documentation/GLib/VariantProtocol/uint32":{"role":"symbol","title":"uint32","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"uint32"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"guint32","preciseIdentifier":"c:@T@guint32"}],"abstract":[{"type":"text","text":"Returns the 32-bit unsigned integer value of "},{"type":"codeVoice","code":"value"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/uint32","kind":"symbol","type":"topic","url":"\/documentation\/glib\/variantprotocol\/uint32"},"doc://GLib/documentation/GLib/VariantProtocol/isOf(type:)":{"role":"symbol","title":"isOf(type:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"isOf"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"VariantTypeT"},{"kind":"text","text":">("},{"kind":"externalParam","text":"type"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"VariantTypeT"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"abstract":[{"type":"text","text":"Checks if a value has a type matching the provided type."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/isOf(type:)","kind":"symbol","type":"topic","url":"\/documentation\/glib\/variantprotocol\/isof(type:)"},"doc://GLib/documentation/GLib/VariantProtocol/getType()":{"role":"symbol","title":"getType()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"getType"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"VariantTypeRef","preciseIdentifier":"s:4GLib14VariantTypeRefV"},{"kind":"text","text":"!"}],"abstract":[{"type":"text","text":"Determines the type of "},{"type":"codeVoice","code":"value"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/getType()","kind":"symbol","type":"topic","url":"\/documentation\/glib\/variantprotocol\/gettype()"},"doc://GLib/documentation/GLib/VariantProtocol/getUint32()":{"role":"symbol","title":"getUint32()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"getUint32"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"guint32","preciseIdentifier":"c:@T@guint32"}],"abstract":[{"type":"text","text":"Returns the 32-bit unsigned integer value of "},{"type":"codeVoice","code":"value"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/getUint32()","kind":"symbol","type":"topic","url":"\/documentation\/glib\/variantprotocol\/getuint32()"},"doc://GLib/documentation/GLib/VariantProtocol/int32":{"role":"symbol","title":"int32","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"int32"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"gint32","preciseIdentifier":"c:@T@gint32"}],"abstract":[{"type":"text","text":"Returns the 32-bit signed integer value of "},{"type":"codeVoice","code":"value"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/int32","kind":"symbol","type":"topic","url":"\/documentation\/glib\/variantprotocol\/int32"},"doc://GLib/documentation/GLib/VariantProtocol/lookupValue(key:expectedType:)-43hhk":{"role":"symbol","title":"lookupValue(key:expectedType:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"lookupValue"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"VariantTypeT"},{"kind":"text","text":">("},{"kind":"externalParam","text":"key"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"gchar","preciseIdentifier":"c:@T@gchar"},{"kind":"text","text":">!, "},{"kind":"externalParam","text":"expectedType"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"VariantTypeT"},{"kind":"text","text":"?) -> "},{"kind":"typeIdentifier","text":"VariantRef","preciseIdentifier":"s:4GLib10VariantRefV"},{"kind":"text","text":"!"}],"abstract":[{"type":"text","text":"Looks up a value in a dictionary "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Variant"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/lookupValue(key:expectedType:)-43hhk","kind":"symbol","type":"topic","url":"\/documentation\/glib\/variantprotocol\/lookupvalue(key:expectedtype:)-43hhk"},"doc://GLib/documentation/GLib/VariantProtocol/variant":{"role":"symbol","title":"variant","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"variant"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"VariantRef","preciseIdentifier":"s:4GLib10VariantRefV"},{"kind":"text","text":"!"}],"abstract":[{"type":"text","text":"Unboxes "},{"type":"codeVoice","code":"value"},{"type":"text","text":".  The result is the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Variant"},{"type":"text","text":" instance that was"},{"type":"text","text":" "},{"type":"text","text":"contained in "},{"type":"codeVoice","code":"value"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/variant","kind":"symbol","type":"topic","url":"\/documentation\/glib\/variantprotocol\/variant"},"doc://GLib/documentation/GLib/VariantProtocol/getNormalForm()":{"role":"symbol","title":"getNormalForm()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"getNormalForm"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"VariantRef","preciseIdentifier":"s:4GLib10VariantRefV"},{"kind":"text","text":"!"}],"abstract":[{"type":"text","text":"Gets a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Variant"},{"type":"text","text":" instance that has the same value as "},{"type":"codeVoice","code":"value"},{"type":"text","text":" and is"},{"type":"text","text":" "},{"type":"text","text":"trusted to be in normal form."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/getNormalForm()","kind":"symbol","type":"topic","url":"\/documentation\/glib\/variantprotocol\/getnormalform()"},"doc://GLib/documentation/GLib/VariantProtocol/dupBytestringArray(length:)":{"role":"symbol","title":"dupBytestringArray(length:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"dupBytestringArray"},{"kind":"text","text":"("},{"kind":"externalParam","text":"length"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"gsize","preciseIdentifier":"c:@T@gsize"},{"kind":"text","text":">!) -> "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"gchar","preciseIdentifier":"c:@T@gchar"},{"kind":"text","text":">?>!"}],"abstract":[{"type":"text","text":"Gets the contents of an array of array of bytes "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Variant"},{"type":"text","text":".  This call"},{"type":"text","text":" "},{"type":"text","text":"makes a deep copy; the return result should be released with"},{"type":"text","text":" "},{"type":"codeVoice","code":"g_strfreev()"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/dupBytestringArray(length:)","kind":"symbol","type":"topic","url":"\/documentation\/glib\/variantprotocol\/dupbytestringarray(length:)"},"doc://GLib/documentation/GLib/VariantProtocol/ref()":{"role":"symbol","title":"ref()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"ref"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"VariantRef","preciseIdentifier":"s:4GLib10VariantRefV"},{"kind":"text","text":"!"}],"abstract":[{"type":"text","text":"Increases the reference count of "},{"type":"codeVoice","code":"value"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/ref()","kind":"symbol","type":"topic","url":"\/documentation\/glib\/variantprotocol\/ref()"},"doc://GLib/documentation/GLib/VariantProtocol/getData()":{"role":"symbol","title":"getData()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"getData"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"gconstpointer","preciseIdentifier":"c:@T@gconstpointer"},{"kind":"text","text":"?"}],"abstract":[{"type":"text","text":"Returns a pointer to the serialized form of a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Variant"},{"type":"text","text":" instance."},{"type":"text","text":" "},{"type":"text","text":"The returned data may not be in fully-normalised form if read from an"},{"type":"text","text":" "},{"type":"text","text":"untrusted source.  The returned data must not be freed; it remains"},{"type":"text","text":" "},{"type":"text","text":"valid for as long as "},{"type":"codeVoice","code":"value"},{"type":"text","text":" exists."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/getData()","kind":"symbol","type":"topic","url":"\/documentation\/glib\/variantprotocol\/getdata()"},"doc://GLib/documentation/GLib/VariantProtocol/getDouble()":{"role":"symbol","title":"getDouble()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"getDouble"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"Double","preciseIdentifier":"s:Sd"}],"abstract":[{"type":"text","text":"Returns the double precision floating point value of "},{"type":"codeVoice","code":"value"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/getDouble()","kind":"symbol","type":"topic","url":"\/documentation\/glib\/variantprotocol\/getdouble()"},"doc://GLib/documentation/GLib/VariantProtocol/takeRef()":{"role":"symbol","title":"takeRef()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"takeRef"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"VariantRef","preciseIdentifier":"s:4GLib10VariantRefV"},{"kind":"text","text":"!"}],"abstract":[{"type":"text","text":"If "},{"type":"codeVoice","code":"value"},{"type":"text","text":" is floating, sink it.  Otherwise, do nothing."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/takeRef()","kind":"symbol","type":"topic","url":"\/documentation\/glib\/variantprotocol\/takeref()"},"doc://GLib/documentation/GLib/VariantProtocol/getFixedArray(nElements:elementSize:)":{"role":"symbol","title":"getFixedArray(nElements:elementSize:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"getFixedArray"},{"kind":"text","text":"("},{"kind":"externalParam","text":"nElements"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"gsize","preciseIdentifier":"c:@T@gsize"},{"kind":"text","text":">!, "},{"kind":"externalParam","text":"elementSize"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"gconstpointer","preciseIdentifier":"c:@T@gconstpointer"},{"kind":"text","text":"!"}],"abstract":[{"type":"text","text":"Provides access to the serialized data for an array of fixed-sized"},{"type":"text","text":" "},{"type":"text","text":"items."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/getFixedArray(nElements:elementSize:)","kind":"symbol","type":"topic","url":"\/documentation\/glib\/variantprotocol\/getfixedarray(nelements:elementsize:)"},"doc://GLib/documentation/GLib/VariantProtocol/boolean":{"role":"symbol","title":"boolean","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"boolean"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"abstract":[{"type":"text","text":"Returns the boolean value of "},{"type":"codeVoice","code":"value"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/boolean","kind":"symbol","type":"topic","url":"\/documentation\/glib\/variantprotocol\/boolean"},"doc://GLib/documentation/GLib/VariantProtocol/getUint64()":{"role":"symbol","title":"getUint64()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"getUint64"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"guint64","preciseIdentifier":"c:@T@guint64"}],"abstract":[{"type":"text","text":"Returns the 64-bit unsigned integer value of "},{"type":"codeVoice","code":"value"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/getUint64()","kind":"symbol","type":"topic","url":"\/documentation\/glib\/variantprotocol\/getuint64()"},"doc://GLib/documentation/GLib/VariantRef":{"role":"symbol","title":"VariantRef","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"VariantRef"}],"abstract":[{"type":"codeVoice","code":"GVariant"},{"type":"text","text":" is a variant datatype; it can contain one or more values"},{"type":"text","text":" "},{"type":"text","text":"along with information about the type of the values."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantRef","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"VariantRef"}],"url":"\/documentation\/glib\/variantref"},"doc://GLib/documentation/GLib/VariantProtocol/maybe":{"role":"symbol","title":"maybe","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"maybe"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"VariantRef","preciseIdentifier":"s:4GLib10VariantRefV"},{"kind":"text","text":"!"}],"abstract":[{"type":"text","text":"Given a maybe-typed "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Variant"},{"type":"text","text":" instance, extract its value.  If the"},{"type":"text","text":" "},{"type":"text","text":"value is Nothing, then this function returns "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/maybe","kind":"symbol","type":"topic","url":"\/documentation\/glib\/variantprotocol\/maybe"},"doc://GLib/documentation/GLib/VariantProtocol/byte":{"role":"symbol","title":"byte","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"byte"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"guint8","preciseIdentifier":"c:@T@guint8"}],"abstract":[{"type":"text","text":"Returns the byte value of "},{"type":"codeVoice","code":"value"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/byte","kind":"symbol","type":"topic","url":"\/documentation\/glib\/variantprotocol\/byte"},"doc://GLib/documentation/GLib/VariantProtocol/getBoolean()":{"role":"symbol","title":"getBoolean()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"getBoolean"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"abstract":[{"type":"text","text":"Returns the boolean value of "},{"type":"codeVoice","code":"value"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/getBoolean()","kind":"symbol","type":"topic","url":"\/documentation\/glib\/variantprotocol\/getboolean()"},"doc://GLib/documentation/GLib/VariantProtocol/dupStrv(length:)":{"role":"symbol","title":"dupStrv(length:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"dupStrv"},{"kind":"text","text":"("},{"kind":"externalParam","text":"length"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"gsize","preciseIdentifier":"c:@T@gsize"},{"kind":"text","text":">!) -> "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"gchar","preciseIdentifier":"c:@T@gchar"},{"kind":"text","text":">?>!"}],"abstract":[{"type":"text","text":"Gets the contents of an array of strings "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Variant"},{"type":"text","text":".  This call"},{"type":"text","text":" "},{"type":"text","text":"makes a deep copy; the return result should be released with"},{"type":"text","text":" "},{"type":"codeVoice","code":"g_strfreev()"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/dupStrv(length:)","kind":"symbol","type":"topic","url":"\/documentation\/glib\/variantprotocol\/dupstrv(length:)"},"doc://GLib/documentation/GLib/VariantProtocol/lookupValue(key:expectedType:)-4oqal":{"role":"symbol","title":"lookupValue(key:expectedType:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"lookupValue"},{"kind":"text","text":"("},{"kind":"externalParam","text":"key"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"gchar","preciseIdentifier":"c:@T@gchar"},{"kind":"text","text":">!, "},{"kind":"externalParam","text":"expectedType"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"VariantTypeRef","preciseIdentifier":"s:4GLib14VariantTypeRefV"},{"kind":"text","text":"?) -> "},{"kind":"typeIdentifier","text":"VariantRef","preciseIdentifier":"s:4GLib10VariantRefV"},{"kind":"text","text":"!"}],"abstract":[{"type":"text","text":"Looks up a value in a dictionary "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Variant"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/lookupValue(key:expectedType:)-4oqal","kind":"symbol","type":"topic","url":"\/documentation\/glib\/variantprotocol\/lookupvalue(key:expectedtype:)-4oqal"},"doc://GLib/documentation/GLib/VariantProtocol/print(string:typeAnnotate:)-5hbbk":{"role":"symbol","title":"print(string:typeAnnotate:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"print"},{"kind":"text","text":"("},{"kind":"externalParam","text":"string"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StringRef","preciseIdentifier":"s:4GLib9StringRefV"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"typeAnnotate"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"StringRef","preciseIdentifier":"s:4GLib9StringRefV"},{"kind":"text","text":"!"}],"abstract":[{"type":"text","text":"Behaves as "},{"type":"codeVoice","code":"g_variant_print()"},{"type":"text","text":", but operates on a "},{"type":"codeVoice","code":"String"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/print(string:typeAnnotate:)-5hbbk","kind":"symbol","type":"topic","url":"\/documentation\/glib\/variantprotocol\/print(string:typeannotate:)-5hbbk"},"doc://GLib/documentation/GLib/VariantProtocol/logVariant(logDomain:logLevel:)":{"role":"symbol","title":"logVariant(logDomain:logLevel:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"logVariant"},{"kind":"text","text":"("},{"kind":"externalParam","text":"logDomain"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"gchar","preciseIdentifier":"c:@T@gchar"},{"kind":"text","text":">?, "},{"kind":"externalParam","text":"logLevel"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"LogLevelFlags","preciseIdentifier":"s:4GLib13LogLevelFlagsV"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Log a message with structured data, accepting the data within a [type"},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Variant"},{"type":"text","text":"]."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/logVariant(logDomain:logLevel:)","kind":"symbol","type":"topic","url":"\/documentation\/glib\/variantprotocol\/logvariant(logdomain:loglevel:)"},"doc://GLib/documentation/GLib/VariantProtocol/isContainer":{"role":"symbol","title":"isContainer","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"isContainer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"abstract":[{"type":"text","text":"Checks if "},{"type":"codeVoice","code":"value"},{"type":"text","text":" is a container."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/isContainer","kind":"symbol","type":"topic","url":"\/documentation\/glib\/variantprotocol\/iscontainer"},"doc://GLib/documentation/GLib":{"role":"collection","title":"GLib","abstract":[],"identifier":"doc:\/\/GLib\/documentation\/GLib","kind":"symbol","type":"topic","url":"\/documentation\/glib"},"doc://GLib/documentation/GLib/VariantProtocol/store(data:)":{"role":"symbol","title":"store(data:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"store"},{"kind":"text","text":"("},{"kind":"externalParam","text":"data"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"gpointer","preciseIdentifier":"c:@T@gpointer"},{"kind":"text","text":"!)"}],"abstract":[{"type":"text","text":"Stores the serialized form of "},{"type":"codeVoice","code":"value"},{"type":"text","text":" at "},{"type":"codeVoice","code":"data"},{"type":"text","text":".  "},{"type":"codeVoice","code":"data"},{"type":"text","text":" should be"},{"type":"text","text":" "},{"type":"text","text":"large enough.  See "},{"type":"codeVoice","code":"g_variant_get_size()"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/store(data:)","kind":"symbol","type":"topic","url":"\/documentation\/glib\/variantprotocol\/store(data:)"},"doc://GLib/documentation/GLib/VariantProtocol/isNormalForm":{"role":"symbol","title":"isNormalForm","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"isNormalForm"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"abstract":[{"type":"text","text":"Checks if "},{"type":"codeVoice","code":"value"},{"type":"text","text":" is in normal form."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/isNormalForm","kind":"symbol","type":"topic","url":"\/documentation\/glib\/variantprotocol\/isnormalform"},"doc://GLib/documentation/GLib/VariantProtocol/variant_ptr-4tjcr":{"defaultImplementations":1,"role":"symbol","title":"variant_ptr","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"variant_ptr"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GVariant"},{"kind":"text","text":">!"}],"abstract":[{"type":"text","text":"Typed pointer to the underlying "},{"type":"codeVoice","code":"GVariant"},{"type":"text","text":" instance."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/variant_ptr-4tjcr","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/glib\/variantprotocol\/variant_ptr-4tjcr"},"doc://GLib/documentation/GLib/VariantProtocol/equal(two:)":{"role":"symbol","title":"equal(two:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"equal"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"VariantT"},{"kind":"text","text":">("},{"kind":"externalParam","text":"two"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"VariantT"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"abstract":[{"type":"text","text":"Checks if "},{"type":"codeVoice","code":"one"},{"type":"text","text":" and "},{"type":"codeVoice","code":"two"},{"type":"text","text":" have the same type and value."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/equal(two:)","kind":"symbol","type":"topic","url":"\/documentation\/glib\/variantprotocol\/equal(two:)"},"doc://GLib/documentation/GLib/VariantProtocol":{"role":"symbol","title":"VariantProtocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"VariantProtocol"}],"abstract":[{"type":"codeVoice","code":"GVariant"},{"type":"text","text":" is a variant datatype; it can contain one or more values"},{"type":"text","text":" "},{"type":"text","text":"along with information about the type of the values."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantProtocol","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"VariantProtocol"}],"url":"\/documentation\/glib\/variantprotocol"},"doc://GLib/documentation/GLib/VariantProtocol/getInt32()":{"role":"symbol","title":"getInt32()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"getInt32"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"gint32","preciseIdentifier":"c:@T@gint32"}],"abstract":[{"type":"text","text":"Returns the 32-bit signed integer value of "},{"type":"codeVoice","code":"value"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/getInt32()","kind":"symbol","type":"topic","url":"\/documentation\/glib\/variantprotocol\/getint32()"},"doc://GLib/documentation/GLib/VariantProtocol/nChildren()":{"role":"symbol","title":"nChildren()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"nChildren"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"}],"abstract":[{"type":"text","text":"Determines the number of children in a container "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Variant"},{"type":"text","text":" instance."},{"type":"text","text":" "},{"type":"text","text":"This includes variants, maybes, arrays, tuples and dictionary"},{"type":"text","text":" "},{"type":"text","text":"entries.  It is an error to call this function on any other type of"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Variant"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/nChildren()","kind":"symbol","type":"topic","url":"\/documentation\/glib\/variantprotocol\/nchildren()"},"doc://GLib/documentation/GLib/VariantProtocol/getHandle()":{"role":"symbol","title":"getHandle()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"getHandle"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"gint32","preciseIdentifier":"c:@T@gint32"}],"abstract":[{"type":"text","text":"Returns the 32-bit signed integer value of "},{"type":"codeVoice","code":"value"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/getHandle()","kind":"symbol","type":"topic","url":"\/documentation\/glib\/variantprotocol\/gethandle()"},"doc://GLib/documentation/GLib/VariantIter":{"role":"symbol","title":"VariantIter","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"VariantIter"}],"abstract":[{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantIter"},{"type":"text","text":" is an opaque data structure and can only be accessed"},{"type":"text","text":" "},{"type":"text","text":"using the following functions."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantIter","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"VariantIter"}],"url":"\/documentation\/glib\/variantiter"},"doc://GLib/documentation/GLib/VariantProtocol/getBytestringArray(length:)":{"role":"symbol","title":"getBytestringArray(length:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"getBytestringArray"},{"kind":"text","text":"("},{"kind":"externalParam","text":"length"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"gsize","preciseIdentifier":"c:@T@gsize"},{"kind":"text","text":">!) -> "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"gchar","preciseIdentifier":"c:@T@gchar"},{"kind":"text","text":">?>!"}],"abstract":[{"type":"text","text":"Gets the contents of an array of array of bytes "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Variant"},{"type":"text","text":".  This call"},{"type":"text","text":" "},{"type":"text","text":"makes a shallow copy; the return result should be released with"},{"type":"text","text":" "},{"type":"codeVoice","code":"g_free()"},{"type":"text","text":", but the individual strings must not be modified."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/getBytestringArray(length:)","kind":"symbol","type":"topic","url":"\/documentation\/glib\/variantprotocol\/getbytestringarray(length:)"},"doc://GLib/documentation/GLib/VariantProtocol/getMaybe()":{"role":"symbol","title":"getMaybe()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"getMaybe"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"VariantRef","preciseIdentifier":"s:4GLib10VariantRefV"},{"kind":"text","text":"!"}],"abstract":[{"type":"text","text":"Given a maybe-typed "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Variant"},{"type":"text","text":" instance, extract its value.  If the"},{"type":"text","text":" "},{"type":"text","text":"value is Nothing, then this function returns "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/getMaybe()","kind":"symbol","type":"topic","url":"\/documentation\/glib\/variantprotocol\/getmaybe()"},"doc://GLib/documentation/GLib/VariantProtocol/classify()":{"role":"symbol","title":"classify()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"classify"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"GVariantClass","preciseIdentifier":"c:@EA@GVariantClass"}],"abstract":[{"type":"text","text":"Classifies "},{"type":"codeVoice","code":"value"},{"type":"text","text":" according to its top-level type."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/classify()","kind":"symbol","type":"topic","url":"\/documentation\/glib\/variantprotocol\/classify()"},"doc://GLib/documentation/GLib/VariantProtocol/double":{"role":"symbol","title":"double","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"double"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Double","preciseIdentifier":"s:Sd"}],"abstract":[{"type":"text","text":"Returns the double precision floating point value of "},{"type":"codeVoice","code":"value"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/double","kind":"symbol","type":"topic","url":"\/documentation\/glib\/variantprotocol\/double"},"../gio/class.DBusMessage.html":{"title":"GDBusMessage","titleInlineContent":[{"type":"text","text":"GDBusMessage"}],"type":"link","identifier":"..\/gio\/class.DBusMessage.html","url":"..\/gio\/class.DBusMessage.html"},"doc://GLib/documentation/GLib/VariantProtocol/getBytestring()":{"role":"symbol","title":"getBytestring()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"getBytestring"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":"!"}],"abstract":[{"type":"text","text":"Returns the string value of a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Variant"},{"type":"text","text":" instance with an"},{"type":"text","text":" "},{"type":"text","text":"array-of-bytes type.  The string has no particular encoding."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/getBytestring()","kind":"symbol","type":"topic","url":"\/documentation\/glib\/variantprotocol\/getbytestring()"},"doc://GLib/documentation/GLib/VariantProtocol/int16":{"role":"symbol","title":"int16","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"int16"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"gint16","preciseIdentifier":"c:@T@gint16"}],"abstract":[{"type":"text","text":"Returns the 16-bit signed integer value of "},{"type":"codeVoice","code":"value"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/int16","kind":"symbol","type":"topic","url":"\/documentation\/glib\/variantprotocol\/int16"},"doc://GLib/documentation/GLib/VariantProtocol/refSink()":{"role":"symbol","title":"refSink()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"refSink"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"VariantRef","preciseIdentifier":"s:4GLib10VariantRefV"},{"kind":"text","text":"!"}],"abstract":[{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Variant"},{"type":"text","text":" uses a floating reference count system.  All functions with"},{"type":"text","text":" "},{"type":"text","text":"names starting with "},{"type":"codeVoice","code":"g_variant_new_"},{"type":"text","text":" return floating"},{"type":"text","text":" "},{"type":"text","text":"references."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/refSink()","kind":"symbol","type":"topic","url":"\/documentation\/glib\/variantprotocol\/refsink()"},"doc://GLib/documentation/GLib/VariantProtocol/getDataAsBytes()":{"role":"symbol","title":"getDataAsBytes()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"getDataAsBytes"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"BytesRef","preciseIdentifier":"s:4GLib8BytesRefV"},{"kind":"text","text":"!"}],"abstract":[{"type":"text","text":"Returns a pointer to the serialized form of a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Variant"},{"type":"text","text":" instance."},{"type":"text","text":" "},{"type":"text","text":"The semantics of this function are exactly the same as"},{"type":"text","text":" "},{"type":"codeVoice","code":"g_variant_get_data()"},{"type":"text","text":", except that the returned "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Bytes"},{"type":"text","text":" holds"},{"type":"text","text":" "},{"type":"text","text":"a reference to the variant data."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/getDataAsBytes()","kind":"symbol","type":"topic","url":"\/documentation\/glib\/variantprotocol\/getdataasbytes()"},"doc://GLib/documentation/GLib/VariantProtocol/dupObjv(length:)":{"role":"symbol","title":"dupObjv(length:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"dupObjv"},{"kind":"text","text":"("},{"kind":"externalParam","text":"length"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"gsize","preciseIdentifier":"c:@T@gsize"},{"kind":"text","text":">!) -> "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"gchar","preciseIdentifier":"c:@T@gchar"},{"kind":"text","text":">?>!"}],"abstract":[{"type":"text","text":"Gets the contents of an array of object paths "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Variant"},{"type":"text","text":".  This call"},{"type":"text","text":" "},{"type":"text","text":"makes a deep copy; the return result should be released with"},{"type":"text","text":" "},{"type":"codeVoice","code":"g_strfreev()"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/dupObjv(length:)","kind":"symbol","type":"topic","url":"\/documentation\/glib\/variantprotocol\/dupobjv(length:)"},"doc://GLib/documentation/GLib/VariantProtocol/iterNew()":{"role":"symbol","title":"iterNew()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"iterNew"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"VariantIterRef","preciseIdentifier":"s:4GLib14VariantIterRefV"},{"kind":"text","text":"!"}],"abstract":[{"type":"text","text":"Creates a heap-allocated "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantIter"},{"type":"text","text":" for iterating over the items"},{"type":"text","text":" "},{"type":"text","text":"in "},{"type":"codeVoice","code":"value"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/iterNew()","kind":"symbol","type":"topic","url":"\/documentation\/glib\/variantprotocol\/iternew()"},"doc://GLib/documentation/GLib/VariantProtocol/getSize()":{"role":"symbol","title":"getSize()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"getSize"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"}],"abstract":[{"type":"text","text":"Determines the number of bytes that would be required to store "},{"type":"codeVoice","code":"value"},{"type":"text","text":" "},{"type":"text","text":"with "},{"type":"codeVoice","code":"g_variant_store()"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/getSize()","kind":"symbol","type":"topic","url":"\/documentation\/glib\/variantprotocol\/getsize()"},"doc://GLib/documentation/GLib/VariantProtocol/getObjv(length:)":{"role":"symbol","title":"getObjv(length:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"getObjv"},{"kind":"text","text":"("},{"kind":"externalParam","text":"length"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"gsize","preciseIdentifier":"c:@T@gsize"},{"kind":"text","text":">!) -> "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"gchar","preciseIdentifier":"c:@T@gchar"},{"kind":"text","text":">?>!"}],"abstract":[{"type":"text","text":"Gets the contents of an array of object paths "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Variant"},{"type":"text","text":".  This call"},{"type":"text","text":" "},{"type":"text","text":"makes a shallow copy; the return result should be released with"},{"type":"text","text":" "},{"type":"codeVoice","code":"g_free()"},{"type":"text","text":", but the individual strings must not be modified."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/getObjv(length:)","kind":"symbol","type":"topic","url":"\/documentation\/glib\/variantprotocol\/getobjv(length:)"},"doc://GLib/documentation/GLib/Bytes":{"role":"symbol","title":"Bytes","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Bytes"}],"abstract":[{"type":"text","text":"A simple refcounted data type representing an immutable sequence of zero or"},{"type":"text","text":" "},{"type":"text","text":"more bytes from an unspecified origin."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/Bytes","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Bytes"}],"url":"\/documentation\/glib\/bytes"},"doc://GLib/documentation/GLib/VariantProtocol/print(string:typeAnnotate:)-5w2vu":{"role":"symbol","title":"print(string:typeAnnotate:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"print"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"StringTypeT"},{"kind":"text","text":">("},{"kind":"externalParam","text":"string"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StringTypeT"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"typeAnnotate"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"StringRef","preciseIdentifier":"s:4GLib9StringRefV"},{"kind":"text","text":"!"}],"abstract":[{"type":"text","text":"Behaves as "},{"type":"codeVoice","code":"g_variant_print()"},{"type":"text","text":", but operates on a "},{"type":"codeVoice","code":"String"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/print(string:typeAnnotate:)-5w2vu","kind":"symbol","type":"topic","url":"\/documentation\/glib\/variantprotocol\/print(string:typeannotate:)-5w2vu"},"doc://GLib/documentation/GLib/VariantProtocol/data":{"role":"symbol","title":"data","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"data"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"gconstpointer","preciseIdentifier":"c:@T@gconstpointer"},{"kind":"text","text":"?"}],"abstract":[{"type":"text","text":"Returns a pointer to the serialized form of a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Variant"},{"type":"text","text":" instance."},{"type":"text","text":" "},{"type":"text","text":"The returned data may not be in fully-normalised form if read from an"},{"type":"text","text":" "},{"type":"text","text":"untrusted source.  The returned data must not be freed; it remains"},{"type":"text","text":" "},{"type":"text","text":"valid for as long as "},{"type":"codeVoice","code":"value"},{"type":"text","text":" exists."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/data","kind":"symbol","type":"topic","url":"\/documentation\/glib\/variantprotocol\/data"},"doc://GLib/documentation/GLib/VariantProtocol/getStrv(length:)":{"role":"symbol","title":"getStrv(length:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"getStrv"},{"kind":"text","text":"("},{"kind":"externalParam","text":"length"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"gsize","preciseIdentifier":"c:@T@gsize"},{"kind":"text","text":">!) -> "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"gchar","preciseIdentifier":"c:@T@gchar"},{"kind":"text","text":">?>!"}],"abstract":[{"type":"text","text":"Gets the contents of an array of strings "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Variant"},{"type":"text","text":".  This call"},{"type":"text","text":" "},{"type":"text","text":"makes a shallow copy; the return result should be released with"},{"type":"text","text":" "},{"type":"codeVoice","code":"g_free()"},{"type":"text","text":", but the individual strings must not be modified."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/getStrv(length:)","kind":"symbol","type":"topic","url":"\/documentation\/glib\/variantprotocol\/getstrv(length:)"},"doc://GLib/documentation/GLib/VariantProtocol/getUint16()":{"role":"symbol","title":"getUint16()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"getUint16"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"guint16","preciseIdentifier":"c:@T@guint16"}],"abstract":[{"type":"text","text":"Returns the 16-bit unsigned integer value of "},{"type":"codeVoice","code":"value"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/getUint16()","kind":"symbol","type":"topic","url":"\/documentation\/glib\/variantprotocol\/getuint16()"},"doc://GLib/documentation/GLib/VariantProtocol/getString(length:)":{"role":"symbol","title":"getString(length:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"getString"},{"kind":"text","text":"("},{"kind":"externalParam","text":"length"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"gsize","preciseIdentifier":"c:@T@gsize"},{"kind":"text","text":">!) -> "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":"!"}],"abstract":[{"type":"text","text":"Returns the string value of a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Variant"},{"type":"text","text":" instance with a string"},{"type":"text","text":" "},{"type":"text","text":"type.  This includes the types "},{"type":"codeVoice","code":"G_VARIANT_TYPE_STRING"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"G_VARIANT_TYPE_OBJECT_PATH"},{"type":"text","text":" and "},{"type":"codeVoice","code":"G_VARIANT_TYPE_SIGNATURE"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/getString(length:)","kind":"symbol","type":"topic","url":"\/documentation\/glib\/variantprotocol\/getstring(length:)"},"doc://GLib/documentation/GLib/MappedFile":{"role":"symbol","title":"MappedFile","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"MappedFile"}],"abstract":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/MappedFile"},{"type":"text","text":" represents a file mapping created with"},{"type":"text","text":" "},{"type":"codeVoice","code":"g_mapped_file_new()"},{"type":"text","text":". It has only private members and should"},{"type":"text","text":" "},{"type":"text","text":"not be accessed directly."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/MappedFile","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"MappedFile"}],"url":"\/documentation\/glib\/mappedfile"},"doc://GLib/documentation/GLib/VariantProtocol/getInt16()":{"role":"symbol","title":"getInt16()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"getInt16"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"gint16","preciseIdentifier":"c:@T@gint16"}],"abstract":[{"type":"text","text":"Returns the 16-bit signed integer value of "},{"type":"codeVoice","code":"value"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/getInt16()","kind":"symbol","type":"topic","url":"\/documentation\/glib\/variantprotocol\/getint16()"},"doc://GLib/documentation/GLib/VariantProtocol/typeString":{"role":"symbol","title":"typeString","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"typeString"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":"!"}],"abstract":[{"type":"text","text":"Returns the type string of "},{"type":"codeVoice","code":"value"},{"type":"text","text":".  Unlike the result of calling"},{"type":"text","text":" "},{"type":"codeVoice","code":"g_variant_type_peek_string()"},{"type":"text","text":", this string is nul-terminated.  This"},{"type":"text","text":" "},{"type":"text","text":"string belongs to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Variant"},{"type":"text","text":" and must not be freed."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/typeString","kind":"symbol","type":"topic","url":"\/documentation\/glib\/variantprotocol\/typestring"},"doc://GLib/documentation/GLib/VariantProtocol/normalForm":{"role":"symbol","title":"normalForm","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"normalForm"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"VariantRef","preciseIdentifier":"s:4GLib10VariantRefV"},{"kind":"text","text":"!"}],"abstract":[{"type":"text","text":"Gets a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Variant"},{"type":"text","text":" instance that has the same value as "},{"type":"codeVoice","code":"value"},{"type":"text","text":" and is"},{"type":"text","text":" "},{"type":"text","text":"trusted to be in normal form."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/normalForm","kind":"symbol","type":"topic","url":"\/documentation\/glib\/variantprotocol\/normalform"},"doc://GLib/documentation/GLib/HashTable":{"role":"symbol","title":"HashTable","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"HashTable"}],"abstract":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/HashTable"},{"type":"text","text":" struct is an opaque data structure to represent a"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"..\/Protocols\/HashTableProtocol.html"},{"type":"text","text":". It should only be accessed via the"},{"type":"text","text":" "},{"type":"text","text":"following functions."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/HashTable","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"HashTable"}],"url":"\/documentation\/glib\/hashtable"},"doc://GLib/documentation/GLib/VariantProtocol/unref()":{"role":"symbol","title":"unref()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"unref"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Decreases the reference count of "},{"type":"codeVoice","code":"value"},{"type":"text","text":".  When its reference count"},{"type":"text","text":" "},{"type":"text","text":"drops to 0, the memory used by the variant is freed."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/unref()","kind":"symbol","type":"topic","url":"\/documentation\/glib\/variantprotocol\/unref()"},"doc://GLib/documentation/GLib/PointerWrapper":{"role":"symbol","title":"PointerWrapper","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"PointerWrapper"}],"abstract":[{"type":"text","text":"Protocol for GLib types that wrap pointers."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/PointerWrapper","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"PointerWrapper"}],"url":"\/documentation\/glib\/pointerwrapper"},"../Protocols/HashTableProtocol.html":{"title":"Hash Table","titleInlineContent":[{"type":"text","text":"Hash Table"}],"type":"link","identifier":"..\/Protocols\/HashTableProtocol.html","url":"..\/Protocols\/HashTableProtocol.html"},"gvariant-format-strings.html#pointers":{"title":"GVariant format strings","titleInlineContent":[{"type":"codeVoice","code":"GVariant"},{"type":"text","text":" format strings"}],"type":"link","identifier":"gvariant-format-strings.html#pointers","url":"gvariant-format-strings.html#pointers"},"doc://GLib/documentation/GLib/VariantProtocol/bytestring":{"role":"symbol","title":"bytestring","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"bytestring"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":"!"}],"abstract":[{"type":"text","text":"Returns the string value of a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Variant"},{"type":"text","text":" instance with an"},{"type":"text","text":" "},{"type":"text","text":"array-of-bytes type.  The string has no particular encoding."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/bytestring","kind":"symbol","type":"topic","url":"\/documentation\/glib\/variantprotocol\/bytestring"},"doc://GLib/documentation/GLib/VariantProtocol/getChildValue(index:)":{"role":"symbol","title":"getChildValue(index:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"getChildValue"},{"kind":"text","text":"("},{"kind":"externalParam","text":"index"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"VariantRef","preciseIdentifier":"s:4GLib10VariantRefV"},{"kind":"text","text":"!"}],"abstract":[{"type":"text","text":"Reads a child item out of a container "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Variant"},{"type":"text","text":" instance.  This"},{"type":"text","text":" "},{"type":"text","text":"includes variants, maybes, arrays, tuples and dictionary"},{"type":"text","text":" "},{"type":"text","text":"entries.  It is an error to call this function on any other type of"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Variant"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/getChildValue(index:)","kind":"symbol","type":"topic","url":"\/documentation\/glib\/variantprotocol\/getchildvalue(index:)"},"doc://GLib/documentation/GLib/VariantProtocol/type":{"role":"symbol","title":"type","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"type"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"VariantTypeRef","preciseIdentifier":"s:4GLib14VariantTypeRefV"},{"kind":"text","text":"!"}],"abstract":[{"type":"text","text":"Determines the type of "},{"type":"codeVoice","code":"value"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/type","kind":"symbol","type":"topic","url":"\/documentation\/glib\/variantprotocol\/type"},"doc://GLib/documentation/GLib/VariantProtocol/compare(two:)":{"role":"symbol","title":"compare(two:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"compare"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"VariantT"},{"kind":"text","text":">("},{"kind":"externalParam","text":"two"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"VariantT"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"}],"abstract":[{"type":"text","text":"Compares "},{"type":"codeVoice","code":"one"},{"type":"text","text":" and "},{"type":"codeVoice","code":"two"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantProtocol\/compare(two:)","kind":"symbol","type":"topic","url":"\/documentation\/glib\/variantprotocol\/compare(two:)"}}}