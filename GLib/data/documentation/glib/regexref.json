{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"RegexRef"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"GRegex"},{"type":"text","text":" implements regular expression pattern matching using syntax and"},{"type":"text","text":" "},{"type":"text","text":"semantics similar to Perl regular expression. See the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"man:pcrepattern(3)"},{"type":"text","text":" for the syntax definition."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Some functions accept a "},{"type":"codeVoice","code":"start_position"},{"type":"text","text":" argument, setting it differs"},{"type":"text","text":" "},{"type":"text","text":"from just passing over a shortened string and setting "},{"type":"codeVoice","code":"notbol"},{"type":"text","text":" "},{"type":"text","text":"in the case of a pattern that begins with any kind of lookbehind assertion."},{"type":"text","text":" "},{"type":"text","text":"For example, consider the pattern “\\Biss\\B” which finds occurrences of “iss”"},{"type":"text","text":" "},{"type":"text","text":"in the middle of words. (”\\B” matches only if the current position in the"},{"type":"text","text":" "},{"type":"text","text":"subject is not a word boundary.) When applied to the string “Mississipi”"},{"type":"text","text":" "},{"type":"text","text":"from the fourth byte, namely “issipi”, it does not match, because “\\B” is"},{"type":"text","text":" "},{"type":"text","text":"always false at the start of the subject, which is deemed to be a word"},{"type":"text","text":" "},{"type":"text","text":"boundary. However, if the entire string is passed , but with"},{"type":"text","text":" "},{"type":"codeVoice","code":"start_position"},{"type":"text","text":" set to 4, it finds the second occurrence of “iss” because"},{"type":"text","text":" "},{"type":"text","text":"it is able to look behind the starting point to discover that it is"},{"type":"text","text":" "},{"type":"text","text":"preceded by a letter."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that, unless you set the "},{"type":"codeVoice","code":"raw"},{"type":"text","text":" flag, all the strings passed"},{"type":"text","text":" "},{"type":"text","text":"to these functions must be encoded in UTF-8. The lengths and the positions"},{"type":"text","text":" "},{"type":"text","text":"inside the strings are in bytes and not in characters, so, for instance,"},{"type":"text","text":" "},{"type":"text","text":"“\\xc3\\xa0” (i.e. “à”) is two bytes long but it is treated as a"},{"type":"text","text":" "},{"type":"text","text":"single character. If you set "},{"type":"codeVoice","code":"raw"},{"type":"text","text":" the strings can be non-valid"},{"type":"text","text":" "},{"type":"text","text":"UTF-8 strings and a byte is treated as a character, so “\\xc3\\xa0” is two"},{"type":"text","text":" "},{"type":"text","text":"bytes and two characters long."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When matching a pattern, “\\n” matches only against a “\\n” character in"},{"type":"text","text":" "},{"type":"text","text":"the string, and “\\r” matches only a “\\r” character. To match any newline"},{"type":"text","text":" "},{"type":"text","text":"sequence use “\\R”. This particular group matches either the two-character"},{"type":"text","text":" "},{"type":"text","text":"sequence CR + LF (”\\r\\n”), or one of the single characters LF (linefeed,"},{"type":"text","text":" "},{"type":"text","text":"U+000A, “\\n”), VT vertical tab, U+000B, “\\v”), FF (formfeed, U+000C, “\\f”),"},{"type":"text","text":" "},{"type":"text","text":"CR (carriage return, U+000D, “\\r”), NEL (next line, U+0085), LS (line"},{"type":"text","text":" "},{"type":"text","text":"separator, U+2028), or PS (paragraph separator, U+2029)."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The behaviour of the dot, circumflex, and dollar metacharacters are"},{"type":"text","text":" "},{"type":"text","text":"affected by newline characters, the default is to recognize any newline"},{"type":"text","text":" "},{"type":"text","text":"character (the same characters recognized by “\\R”). This can be changed"},{"type":"text","text":" "},{"type":"text","text":"with "},{"type":"codeVoice","code":"G_REGEX_NEWLINE_CR"},{"type":"text","text":", "},{"type":"codeVoice","code":"G_REGEX_NEWLINE_LF"},{"type":"text","text":" and "},{"type":"codeVoice","code":"G_REGEX_NEWLINE_CRLF"},{"type":"text","text":" "},{"type":"text","text":"compile options, and with "},{"type":"codeVoice","code":"G_REGEX_MATCH_NEWLINE_ANY"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"G_REGEX_MATCH_NEWLINE_CR"},{"type":"text","text":", "},{"type":"codeVoice","code":"G_REGEX_MATCH_NEWLINE_LF"},{"type":"text","text":" and"},{"type":"text","text":" "},{"type":"codeVoice","code":"G_REGEX_MATCH_NEWLINE_CRLF"},{"type":"text","text":" match options. These settings are also"},{"type":"text","text":" "},{"type":"text","text":"relevant when compiling a pattern if "},{"type":"codeVoice","code":"G_REGEX_EXTENDED"},{"type":"text","text":" is set, and an"},{"type":"text","text":" "},{"type":"text","text":"unescaped “#” outside a character class is encountered. This indicates"},{"type":"text","text":" "},{"type":"text","text":"a comment that lasts until after the next newline."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Creating and manipulating the same "},{"type":"codeVoice","code":"GRegex"},{"type":"text","text":" structure from different"},{"type":"text","text":" "},{"type":"text","text":"threads is not a problem as "},{"type":"codeVoice","code":"GRegex"},{"type":"text","text":" does not modify its internal"},{"type":"text","text":" "},{"type":"text","text":"state between creation and destruction, on the other hand "},{"type":"codeVoice","code":"GMatchInfo"},{"type":"text","text":" "},{"type":"text","text":"is not threadsafe."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The regular expressions low-level functionalities are obtained through"},{"type":"text","text":" "},{"type":"text","text":"the excellent "},{"type":"reference","isActive":true,"identifier":"http:\/\/www.pcre.org\/"},{"type":"text","text":" library written by Philip Hazel."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/RegexRef"},{"type":"text","text":" type acts as a lightweight Swift reference to an underlying "},{"type":"codeVoice","code":"GRegex"},{"type":"text","text":" instance."},{"type":"text","text":" "},{"type":"text","text":"It exposes methods that can operate on this data type through "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/RegexProtocol"},{"type":"text","text":" conformance."},{"type":"text","text":" "},{"type":"text","text":"Use "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/RegexRef"},{"type":"text","text":" only as an "},{"type":"codeVoice","code":"unowned"},{"type":"text","text":" reference to an existing "},{"type":"codeVoice","code":"GRegex"},{"type":"text","text":" instance."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Regex"},{"type":"text","text":" (instead of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/RegexRef"},{"type":"text","text":") if you want to use Automatic Reference Counting for memory management of the underlying "},{"type":"codeVoice","code":"GRegex"},{"type":"text","text":" instance."}]}],"type":"aside","name":"Note"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/glib\/regexref"],"traits":[{"interfaceLanguage":"swift"}]}],"relationshipsSections":[{"identifiers":["doc:\/\/GLib\/documentation\/GLib\/PointerWrapper","doc:\/\/GLib\/documentation\/GLib\/RegexProtocol"],"kind":"relationships","title":"Conforms To","type":"conformsTo"}],"identifier":{"url":"doc:\/\/GLib\/documentation\/GLib\/RegexRef","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"GRegex"},{"type":"text","text":" is the “compiled” form of a regular expression pattern."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"RegexRef"}],"title":"RegexRef","roleHeading":"Structure","role":"symbol","symbolKind":"struct","externalID":"s:4GLib8RegexRefV","modules":[{"name":"GLib"}],"navigatorTitle":[{"kind":"identifier","text":"RegexRef"}]},"hierarchy":{"paths":[["doc:\/\/GLib\/documentation\/GLib"]]},"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/GLib\/documentation\/GLib\/RegexRef\/init(_:)-1hgnb","doc:\/\/GLib\/documentation\/GLib\/RegexRef\/init(_:)-1vppv","doc:\/\/GLib\/documentation\/GLib\/RegexRef\/init(_:)-2yoe7","doc:\/\/GLib\/documentation\/GLib\/RegexRef\/init(_:)-51y4h","doc:\/\/GLib\/documentation\/GLib\/RegexRef\/init(_:)-7dujh","doc:\/\/GLib\/documentation\/GLib\/RegexRef\/init(cPointer:)","doc:\/\/GLib\/documentation\/GLib\/RegexRef\/init(constPointer:)","doc:\/\/GLib\/documentation\/GLib\/RegexRef\/init(gconstpointer:)","doc:\/\/GLib\/documentation\/GLib\/RegexRef\/init(gpointer:)","doc:\/\/GLib\/documentation\/GLib\/RegexRef\/init(mutating:)","doc:\/\/GLib\/documentation\/GLib\/RegexRef\/init(opaquePointer:)","doc:\/\/GLib\/documentation\/GLib\/RegexRef\/init(pattern:compileOptions:matchOptions:)"]},{"title":"Instance Properties","identifiers":["doc:\/\/GLib\/documentation\/GLib\/RegexRef\/ptr"]},{"title":"Default Implementations","identifiers":["doc:\/\/GLib\/documentation\/GLib\/RegexRef\/PointerWrapper-Implementations","doc:\/\/GLib\/documentation\/GLib\/RegexRef\/RegexProtocol-Implementations"],"generated":true}],"references":{"doc://GLib/documentation/GLib/RegexRef/RegexProtocol-Implementations":{"role":"collectionGroup","title":"RegexProtocol Implementations","abstract":[],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RegexRef\/RegexProtocol-Implementations","kind":"article","type":"topic","url":"\/documentation\/glib\/regexref\/regexprotocol-implementations"},"doc://GLib/documentation/GLib/RegexRef/PointerWrapper-Implementations":{"role":"collectionGroup","title":"PointerWrapper Implementations","abstract":[],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RegexRef\/PointerWrapper-Implementations","kind":"article","type":"topic","url":"\/documentation\/glib\/regexref\/pointerwrapper-implementations"},"doc://GLib/documentation/GLib/RegexRef/init(gconstpointer:)":{"role":"symbol","title":"init(gconstpointer:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"!("},{"kind":"externalParam","text":"gconstpointer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"gconstpointer","preciseIdentifier":"c:@T@gconstpointer"},{"kind":"text","text":"?)"}],"abstract":[{"type":"text","text":"Conditional initialiser from an optional, non-mutable "},{"type":"codeVoice","code":"gconstpointer"}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RegexRef\/init(gconstpointer:)","kind":"symbol","type":"topic","url":"\/documentation\/glib\/regexref\/init(gconstpointer:)"},"doc://GLib/documentation/GLib/RegexProtocol/regex_ptr-66oa5":{"defaultImplementations":1,"role":"symbol","title":"regex_ptr","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"regex_ptr"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GRegex"},{"kind":"text","text":">!"}],"abstract":[{"type":"text","text":"Typed pointer to the underlying "},{"type":"codeVoice","code":"GRegex"},{"type":"text","text":" instance."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RegexProtocol\/regex_ptr-66oa5","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/glib\/regexprotocol\/regex_ptr-66oa5"},"doc://GLib/documentation/GLib/RegexRef/init(_:)-51y4h":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"!("},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GRegex"},{"kind":"text","text":">?)"}],"abstract":[{"type":"text","text":"Conditional initialiser from an optional pointer to the underlying "},{"type":"codeVoice","code":"C"},{"type":"text","text":" data type"}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RegexRef\/init(_:)-51y4h","kind":"symbol","type":"topic","url":"\/documentation\/glib\/regexref\/init(_:)-51y4h"},"doc://GLib/documentation/GLib/RegexRef/init(_:)-1vppv":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Reference intialiser for a related type that implements "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/RegexProtocol"}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RegexRef\/init(_:)-1vppv","kind":"symbol","type":"topic","url":"\/documentation\/glib\/regexref\/init(_:)-1vppv"},"doc://GLib/documentation/GLib/RegexRef/init(_:)-1hgnb":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"!("},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GRegex"},{"kind":"text","text":">?)"}],"abstract":[{"type":"text","text":"Conditional initialiser from an optional, non-mutable pointer to the underlying "},{"type":"codeVoice","code":"C"},{"type":"text","text":" data type"}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RegexRef\/init(_:)-1hgnb","kind":"symbol","type":"topic","url":"\/documentation\/glib\/regexref\/init(_:)-1hgnb"},"man:pcrepattern(3)":{"title":"PCRE documentation","titleInlineContent":[{"type":"text","text":"PCRE documentation"}],"type":"link","identifier":"man:pcrepattern(3)","url":"man:pcrepattern(3)"},"doc://GLib/documentation/GLib/RegexRef/ptr":{"role":"symbol","title":"ptr","fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"ptr"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutableRawPointer","preciseIdentifier":"s:Sv"},{"kind":"text","text":"!"}],"abstract":[{"type":"text","text":"Untyped pointer to the underlying "},{"type":"codeVoice","code":"GRegex"},{"type":"text","text":" instance."},{"type":"text","text":" "},{"type":"text","text":"For type-safe access, use the generated, typed pointer "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/RegexProtocol\/regex_ptr-66oa5"},{"type":"text","text":" property instead."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RegexRef\/ptr","kind":"symbol","type":"topic","url":"\/documentation\/glib\/regexref\/ptr"},"doc://GLib/documentation/GLib/PointerWrapper":{"role":"symbol","title":"PointerWrapper","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"PointerWrapper"}],"abstract":[{"type":"text","text":"Protocol for GLib types that wrap pointers."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/PointerWrapper","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"PointerWrapper"}],"url":"\/documentation\/glib\/pointerwrapper"},"doc://GLib/documentation/GLib/RegexRef/init(_:)-7dujh":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GRegex"},{"kind":"text","text":">)"}],"abstract":[{"type":"text","text":"Designated initialiser from a constant pointer to the underlying "},{"type":"codeVoice","code":"C"},{"type":"text","text":" data type"}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RegexRef\/init(_:)-7dujh","kind":"symbol","type":"topic","url":"\/documentation\/glib\/regexref\/init(_:)-7dujh"},"doc://GLib/documentation/GLib/RegexRef/init(constPointer:)":{"role":"symbol","title":"init(constPointer:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"externalParam","text":"constPointer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">)"}],"abstract":[{"type":"text","text":"Unsafe typed initialiser."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Do not use unless you know the underlying data type the pointer points to conforms to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/RegexProtocol"},{"type":"text","text":"."}]}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RegexRef\/init(constPointer:)","kind":"symbol","type":"topic","url":"\/documentation\/glib\/regexref\/init(constpointer:)"},"doc://GLib/documentation/GLib/RegexRef/init(gpointer:)":{"role":"symbol","title":"init(gpointer:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"!("},{"kind":"externalParam","text":"gpointer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"gpointer","preciseIdentifier":"c:@T@gpointer"},{"kind":"text","text":"?)"}],"abstract":[{"type":"text","text":"Conditional initialiser from an optional "},{"type":"codeVoice","code":"gpointer"}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RegexRef\/init(gpointer:)","kind":"symbol","type":"topic","url":"\/documentation\/glib\/regexref\/init(gpointer:)"},"doc://GLib/documentation/GLib":{"role":"collection","title":"GLib","abstract":[],"identifier":"doc:\/\/GLib\/documentation\/GLib","kind":"symbol","type":"topic","url":"\/documentation\/glib"},"http://www.pcre.org/":{"title":"PCRE","titleInlineContent":[{"type":"text","text":"PCRE"}],"type":"link","identifier":"http:\/\/www.pcre.org\/","url":"http:\/\/www.pcre.org\/"},"doc://GLib/documentation/GLib/RegexRef/init(_:)-2yoe7":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GRegex"},{"kind":"text","text":">)"}],"abstract":[{"type":"text","text":"Designated initialiser from the underlying "},{"type":"codeVoice","code":"C"},{"type":"text","text":" data type"}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RegexRef\/init(_:)-2yoe7","kind":"symbol","type":"topic","url":"\/documentation\/glib\/regexref\/init(_:)-2yoe7"},"doc://GLib/documentation/GLib/RegexRef/init(opaquePointer:)":{"role":"symbol","title":"init(opaquePointer:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"opaquePointer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"OpaquePointer","preciseIdentifier":"s:s13OpaquePointerV"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Unsafe untyped initialiser."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Do not use unless you know the underlying data type the pointer points to conforms to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/RegexProtocol"},{"type":"text","text":"."}]}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RegexRef\/init(opaquePointer:)","kind":"symbol","type":"topic","url":"\/documentation\/glib\/regexref\/init(opaquepointer:)"},"doc://GLib/documentation/GLib/RegexRef/init(mutating:)":{"role":"symbol","title":"init(mutating:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"mutating"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeRawPointer","preciseIdentifier":"s:SV"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Unsafe untyped initialiser."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Do not use unless you know the underlying data type the pointer points to conforms to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/RegexProtocol"},{"type":"text","text":"."}]}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RegexRef\/init(mutating:)","kind":"symbol","type":"topic","url":"\/documentation\/glib\/regexref\/init(mutating:)"},"doc://GLib/documentation/GLib/RegexRef":{"role":"symbol","title":"RegexRef","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"RegexRef"}],"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"GRegex"},{"type":"text","text":" is the “compiled” form of a regular expression pattern."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RegexRef","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"RegexRef"}],"url":"\/documentation\/glib\/regexref"},"doc://GLib/documentation/GLib/RegexRef/init(cPointer:)":{"role":"symbol","title":"init(cPointer:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"externalParam","text":"cPointer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">)"}],"abstract":[{"type":"text","text":"Unsafe typed initialiser."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Do not use unless you know the underlying data type the pointer points to conforms to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/RegexProtocol"},{"type":"text","text":"."}]}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RegexRef\/init(cPointer:)","kind":"symbol","type":"topic","url":"\/documentation\/glib\/regexref\/init(cpointer:)"},"doc://GLib/documentation/GLib/RegexProtocol":{"role":"symbol","title":"RegexProtocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"RegexProtocol"}],"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"GRegex"},{"type":"text","text":" is the “compiled” form of a regular expression pattern."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RegexProtocol","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"RegexProtocol"}],"url":"\/documentation\/glib\/regexprotocol"},"doc://GLib/documentation/GLib/RegexRef/init(pattern:compileOptions:matchOptions:)":{"role":"symbol","title":"init(pattern:compileOptions:matchOptions:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"pattern"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"gchar","preciseIdentifier":"c:@T@gchar"},{"kind":"text","text":">!, "},{"kind":"externalParam","text":"compileOptions"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"RegexCompileFlags","preciseIdentifier":"s:4GLib17RegexCompileFlagsV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"matchOptions"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"RegexMatchFlags","preciseIdentifier":"s:4GLib15RegexMatchFlagsV"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"}],"abstract":[{"type":"text","text":"Compiles the regular expression to an internal form, and does"},{"type":"text","text":" "},{"type":"text","text":"the initial setup of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Regex"},{"type":"text","text":" structure."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RegexRef\/init(pattern:compileOptions:matchOptions:)","kind":"symbol","type":"topic","url":"\/documentation\/glib\/regexref\/init(pattern:compileoptions:matchoptions:)"},"doc://GLib/documentation/GLib/Regex":{"role":"symbol","title":"Regex","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Regex"}],"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"GRegex"},{"type":"text","text":" is the “compiled” form of a regular expression pattern."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/Regex","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Regex"}],"url":"\/documentation\/glib\/regex"}}}