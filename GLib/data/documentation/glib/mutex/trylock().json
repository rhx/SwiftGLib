{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"trylock"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Mutex"},{"type":"text","text":" is neither guaranteed to be recursive nor to be"},{"type":"text","text":" "},{"type":"text","text":"non-recursive.  As such, calling "},{"type":"codeVoice","code":"g_mutex_lock()"},{"type":"text","text":" on a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Mutex"},{"type":"text","text":" that has"},{"type":"text","text":" "},{"type":"text","text":"already been locked by the same thread results in undefined behaviour"},{"type":"text","text":" "},{"type":"text","text":"(including but not limited to deadlocks or arbitrary return values)."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/glib\/mutex\/trylock()"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/GLib\/documentation\/GLib\/Mutex\/trylock()","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Tries to lock "},{"type":"codeVoice","code":"mutex"},{"type":"text","text":". If "},{"type":"codeVoice","code":"mutex"},{"type":"text","text":" is already locked by another thread,"},{"type":"text","text":" "},{"type":"text","text":"it immediately returns "},{"type":"codeVoice","code":"false"},{"type":"text","text":". Otherwise it locks "},{"type":"codeVoice","code":"mutex"},{"type":"text","text":" and returns"},{"type":"text","text":" "},{"type":"codeVoice","code":"true"},{"type":"text","text":"."}],"kind":"symbol","metadata":{"role":"symbol","title":"trylock()","roleHeading":"Instance Method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"trylock"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"symbolKind":"method","externalID":"s:4GLib13MutexProtocolPAAE7trylockSbyF::SYNTHESIZED::s:4GLib5MutexC","extendedModule":"GLib","modules":[{"name":"GLib"}]},"hierarchy":{"paths":[["doc:\/\/GLib\/documentation\/GLib","doc:\/\/GLib\/documentation\/GLib\/Mutex","doc:\/\/GLib\/documentation\/GLib\/Mutex\/MutexProtocol-Implementations"]]},"references":{"doc://GLib/documentation/GLib/Mutex":{"role":"symbol","title":"Mutex","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Mutex"}],"abstract":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Mutex"},{"type":"text","text":" struct is an opaque data structure to represent a mutex"},{"type":"text","text":" "},{"type":"text","text":"(mutual exclusion). It can be used to protect data against shared"},{"type":"text","text":" "},{"type":"text","text":"access."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/Mutex","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Mutex"}],"url":"\/documentation\/glib\/mutex"},"doc://GLib/documentation/GLib":{"role":"collection","title":"GLib","abstract":[],"identifier":"doc:\/\/GLib\/documentation\/GLib","kind":"symbol","type":"topic","url":"\/documentation\/glib"},"doc://GLib/documentation/GLib/Mutex/MutexProtocol-Implementations":{"role":"collectionGroup","title":"MutexProtocol Implementations","abstract":[],"identifier":"doc:\/\/GLib\/documentation\/GLib\/Mutex\/MutexProtocol-Implementations","kind":"article","type":"topic","url":"\/documentation\/glib\/mutex\/mutexprotocol-implementations"},"doc://GLib/documentation/GLib/Mutex/trylock()":{"role":"symbol","title":"trylock()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"trylock"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"abstract":[{"type":"text","text":"Tries to lock "},{"type":"codeVoice","code":"mutex"},{"type":"text","text":". If "},{"type":"codeVoice","code":"mutex"},{"type":"text","text":" is already locked by another thread,"},{"type":"text","text":" "},{"type":"text","text":"it immediately returns "},{"type":"codeVoice","code":"false"},{"type":"text","text":". Otherwise it locks "},{"type":"codeVoice","code":"mutex"},{"type":"text","text":" and returns"},{"type":"text","text":" "},{"type":"codeVoice","code":"true"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/Mutex\/trylock()","kind":"symbol","type":"topic","url":"\/documentation\/glib\/mutex\/trylock()"}}}