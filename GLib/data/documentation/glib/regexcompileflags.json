{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"RegexCompileFlags"}],"languages":["swift"],"platforms":["macOS"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/glib\/regexcompileflags"],"traits":[{"interfaceLanguage":"swift"}]}],"relationshipsSections":[{"identifiers":["doc:\/\/GLib\/SQ","doc:\/\/GLib\/s25ExpressibleByArrayLiteralP","doc:\/\/GLib\/s9OptionSetP","doc:\/\/GLib\/SY","doc:\/\/GLib\/s10SetAlgebraP"],"kind":"relationships","title":"Conforms To","type":"conformsTo"}],"identifier":{"url":"doc:\/\/GLib\/documentation\/GLib\/RegexCompileFlags","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Flags specifying compile-time options."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"RegexCompileFlags"}],"title":"RegexCompileFlags","roleHeading":"Structure","role":"symbol","symbolKind":"struct","externalID":"s:4GLib17RegexCompileFlagsV","modules":[{"name":"GLib"}],"navigatorTitle":[{"kind":"identifier","text":"RegexCompileFlags"}]},"hierarchy":{"paths":[["doc:\/\/GLib\/documentation\/GLib"]]},"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/GLib\/documentation\/GLib\/RegexCompileFlags\/init(_:)-3bkk4","doc:\/\/GLib\/documentation\/GLib\/RegexCompileFlags\/init(_:)-iemw","doc:\/\/GLib\/documentation\/GLib\/RegexCompileFlags\/init(rawValue:)"]},{"title":"Instance Properties","identifiers":["doc:\/\/GLib\/documentation\/GLib\/RegexCompileFlags\/int","doc:\/\/GLib\/documentation\/GLib\/RegexCompileFlags\/intValue","doc:\/\/GLib\/documentation\/GLib\/RegexCompileFlags\/rawValue","doc:\/\/GLib\/documentation\/GLib\/RegexCompileFlags\/value"]},{"title":"Type Properties","identifiers":["doc:\/\/GLib\/documentation\/GLib\/RegexCompileFlags\/anchored","doc:\/\/GLib\/documentation\/GLib\/RegexCompileFlags\/bsrAnycrlf","doc:\/\/GLib\/documentation\/GLib\/RegexCompileFlags\/caseless","doc:\/\/GLib\/documentation\/GLib\/RegexCompileFlags\/default","doc:\/\/GLib\/documentation\/GLib\/RegexCompileFlags\/dollarEndonly","doc:\/\/GLib\/documentation\/GLib\/RegexCompileFlags\/dotall","doc:\/\/GLib\/documentation\/GLib\/RegexCompileFlags\/dupnames","doc:\/\/GLib\/documentation\/GLib\/RegexCompileFlags\/extended","doc:\/\/GLib\/documentation\/GLib\/RegexCompileFlags\/firstline","doc:\/\/GLib\/documentation\/GLib\/RegexCompileFlags\/javascriptCompat","doc:\/\/GLib\/documentation\/GLib\/RegexCompileFlags\/multiline","doc:\/\/GLib\/documentation\/GLib\/RegexCompileFlags\/newlineAnycrlf","doc:\/\/GLib\/documentation\/GLib\/RegexCompileFlags\/newlineCr","doc:\/\/GLib\/documentation\/GLib\/RegexCompileFlags\/newlineCrlf","doc:\/\/GLib\/documentation\/GLib\/RegexCompileFlags\/newlineLf","doc:\/\/GLib\/documentation\/GLib\/RegexCompileFlags\/noAutoCapture","doc:\/\/GLib\/documentation\/GLib\/RegexCompileFlags\/optimize","doc:\/\/GLib\/documentation\/GLib\/RegexCompileFlags\/raw","doc:\/\/GLib\/documentation\/GLib\/RegexCompileFlags\/ungreedy"]},{"title":"Default Implementations","identifiers":["doc:\/\/GLib\/documentation\/GLib\/RegexCompileFlags\/Equatable-Implementations","doc:\/\/GLib\/documentation\/GLib\/RegexCompileFlags\/OptionSet-Implementations","doc:\/\/GLib\/documentation\/GLib\/RegexCompileFlags\/SetAlgebra-Implementations"],"generated":true}],"references":{"doc://GLib/s10SetAlgebraP":{"type":"unresolvable","title":"Swift.SetAlgebra","identifier":"doc:\/\/GLib\/s10SetAlgebraP"},"doc://GLib/documentation/GLib/RegexCompileFlags/extended":{"role":"symbol","title":"extended","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"extended"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"RegexCompileFlags","preciseIdentifier":"s:4GLib17RegexCompileFlagsV"}],"abstract":[{"type":"text","text":"Whitespace data characters in the pattern are"},{"type":"text","text":" "},{"type":"text","text":"totally ignored except when escaped or inside a character class."},{"type":"text","text":" "},{"type":"text","text":"Whitespace does not include the VT character (code 11). In addition,"},{"type":"text","text":" "},{"type":"text","text":"characters between an unescaped “#” outside a character class and"},{"type":"text","text":" "},{"type":"text","text":"the next newline character, inclusive, are also ignored. This can"},{"type":"text","text":" "},{"type":"text","text":"be changed within a pattern by a “(?x)” option setting."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RegexCompileFlags\/extended","kind":"symbol","type":"topic","url":"\/documentation\/glib\/regexcompileflags\/extended"},"doc://GLib/documentation/GLib/RegexCompileFlags/newlineCr":{"role":"symbol","title":"newlineCr","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"newlineCr"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"RegexCompileFlags","preciseIdentifier":"s:4GLib17RegexCompileFlagsV"}],"abstract":[{"type":"text","text":"Usually any newline character or character sequence is"},{"type":"text","text":" "},{"type":"text","text":"recognized. If this option is set, the only recognized newline character"},{"type":"text","text":" "},{"type":"text","text":"is ‘\\r’."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RegexCompileFlags\/newlineCr","kind":"symbol","type":"topic","url":"\/documentation\/glib\/regexcompileflags\/newlinecr"},"doc://GLib/SY":{"type":"unresolvable","title":"Swift.RawRepresentable","identifier":"doc:\/\/GLib\/SY"},"doc://GLib/documentation/GLib/RegexCompileFlags/ungreedy":{"role":"symbol","title":"ungreedy","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"ungreedy"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"RegexCompileFlags","preciseIdentifier":"s:4GLib17RegexCompileFlagsV"}],"abstract":[{"type":"text","text":"Inverts the “greediness” of the quantifiers so that"},{"type":"text","text":" "},{"type":"text","text":"they are not greedy by default, but become greedy if followed by “?”."},{"type":"text","text":" "},{"type":"text","text":"It can also be set by a “(?U)” option setting within the pattern."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RegexCompileFlags\/ungreedy","kind":"symbol","type":"topic","url":"\/documentation\/glib\/regexcompileflags\/ungreedy"},"doc://GLib/documentation/GLib/RegexCompileFlags/raw":{"role":"symbol","title":"raw","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"raw"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"RegexCompileFlags","preciseIdentifier":"s:4GLib17RegexCompileFlagsV"}],"abstract":[{"type":"text","text":"Usually strings must be valid UTF-8 strings, using this"},{"type":"text","text":" "},{"type":"text","text":"flag they are considered as a raw sequence of bytes."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RegexCompileFlags\/raw","kind":"symbol","type":"topic","url":"\/documentation\/glib\/regexcompileflags\/raw"},"doc://GLib/SQ":{"type":"unresolvable","title":"Swift.Equatable","identifier":"doc:\/\/GLib\/SQ"},"doc://GLib/documentation/GLib/RegexCompileFlags/caseless":{"role":"symbol","title":"caseless","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"caseless"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"RegexCompileFlags","preciseIdentifier":"s:4GLib17RegexCompileFlagsV"}],"abstract":[{"type":"text","text":"Letters in the pattern match both upper- and"},{"type":"text","text":" "},{"type":"text","text":"lowercase letters. This option can be changed within a pattern"},{"type":"text","text":" "},{"type":"text","text":"by a “(?i)” option setting."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RegexCompileFlags\/caseless","kind":"symbol","type":"topic","url":"\/documentation\/glib\/regexcompileflags\/caseless"},"doc://GLib/documentation/GLib/RegexCompileFlags/bsrAnycrlf":{"role":"symbol","title":"bsrAnycrlf","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"bsrAnycrlf"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"RegexCompileFlags","preciseIdentifier":"s:4GLib17RegexCompileFlagsV"}],"abstract":[{"type":"text","text":"Usually any newline character or character sequence"},{"type":"text","text":" "},{"type":"text","text":"is recognised. If this option is set, then “\\R” only recognizes the newline"},{"type":"text","text":" "},{"type":"text","text":"characters ‘\\r’, ‘\\n’ and ‘\\r\\n’. Since: 2.34"}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RegexCompileFlags\/bsrAnycrlf","kind":"symbol","type":"topic","url":"\/documentation\/glib\/regexcompileflags\/bsranycrlf"},"doc://GLib/documentation/GLib/RegexCompileFlags/intValue":{"role":"symbol","title":"intValue","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"intValue"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"}],"abstract":[{"type":"text","text":"The equivalent raw Int value"}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RegexCompileFlags\/intValue","kind":"symbol","type":"topic","url":"\/documentation\/glib\/regexcompileflags\/intvalue"},"doc://GLib/documentation/GLib/RegexCompileFlags/rawValue":{"role":"symbol","title":"rawValue","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"rawValue"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt32","preciseIdentifier":"s:s6UInt32V"}],"abstract":[{"type":"text","text":"The corresponding value of the raw type"}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RegexCompileFlags\/rawValue","kind":"symbol","type":"topic","url":"\/documentation\/glib\/regexcompileflags\/rawvalue"},"doc://GLib/documentation/GLib/RegexCompileFlags/int":{"role":"symbol","title":"int","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"int"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"gint","preciseIdentifier":"c:@T@gint"}],"abstract":[{"type":"text","text":"The equivalent raw "},{"type":"codeVoice","code":"gint"},{"type":"text","text":" value"}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RegexCompileFlags\/int","kind":"symbol","type":"topic","url":"\/documentation\/glib\/regexcompileflags\/int"},"doc://GLib/s25ExpressibleByArrayLiteralP":{"type":"unresolvable","title":"Swift.ExpressibleByArrayLiteral","identifier":"doc:\/\/GLib\/s25ExpressibleByArrayLiteralP"},"doc://GLib/documentation/GLib/RegexCompileFlags/newlineAnycrlf":{"role":"symbol","title":"newlineAnycrlf","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"newlineAnycrlf"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"RegexCompileFlags","preciseIdentifier":"s:4GLib17RegexCompileFlagsV"}],"abstract":[{"type":"text","text":"Usually any newline character or character sequence"},{"type":"text","text":" "},{"type":"text","text":"is recognized. If this option is set, the only recognized newline character"},{"type":"text","text":" "},{"type":"text","text":"sequences are ‘\\r’, ‘\\n’, and ‘\\r\\n’. Since: 2.34"}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RegexCompileFlags\/newlineAnycrlf","kind":"symbol","type":"topic","url":"\/documentation\/glib\/regexcompileflags\/newlineanycrlf"},"doc://GLib/documentation/GLib/RegexCompileFlags/anchored":{"role":"symbol","title":"anchored","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"anchored"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"RegexCompileFlags","preciseIdentifier":"s:4GLib17RegexCompileFlagsV"}],"abstract":[{"type":"text","text":"The pattern is forced to be “anchored”, that is,"},{"type":"text","text":" "},{"type":"text","text":"it is constrained to match only at the first matching point in the"},{"type":"text","text":" "},{"type":"text","text":"string that is being searched. This effect can also be achieved by"},{"type":"text","text":" "},{"type":"text","text":"appropriate constructs in the pattern itself such as the “^”"},{"type":"text","text":" "},{"type":"text","text":"metacharacter."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RegexCompileFlags\/anchored","kind":"symbol","type":"topic","url":"\/documentation\/glib\/regexcompileflags\/anchored"},"doc://GLib/documentation/GLib/RegexCompileFlags/init(_:)-iemw":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"GRegexCompileFlags","preciseIdentifier":"c:@EA@GRegexCompileFlags"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Creates a new instance with the specified "},{"type":"codeVoice","code":"GRegexCompileFlags"},{"type":"text","text":" enum value"}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RegexCompileFlags\/init(_:)-iemw","kind":"symbol","type":"topic","url":"\/documentation\/glib\/regexcompileflags\/init(_:)-iemw"},"doc://GLib/documentation/GLib/RegexCompileFlags/optimize":{"role":"symbol","title":"optimize","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"optimize"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"RegexCompileFlags","preciseIdentifier":"s:4GLib17RegexCompileFlagsV"}],"abstract":[{"type":"text","text":"Since 2.74 and the port to pcre2, requests JIT"},{"type":"text","text":" "},{"type":"text","text":"compilation, which, if the just-in-time compiler is available, further"},{"type":"text","text":" "},{"type":"text","text":"processes a compiled pattern into machine code that executes much"},{"type":"text","text":" "},{"type":"text","text":"faster. However, it comes at the cost of extra processing before the"},{"type":"text","text":" "},{"type":"text","text":"match is performed, so it is most beneficial to use this when the same"},{"type":"text","text":" "},{"type":"text","text":"compiled pattern is used for matching many times. Before 2.74 this"},{"type":"text","text":" "},{"type":"text","text":"option used the built-in non-JIT optimizations in pcre1."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RegexCompileFlags\/optimize","kind":"symbol","type":"topic","url":"\/documentation\/glib\/regexcompileflags\/optimize"},"doc://GLib/documentation/GLib/RegexCompileFlags/SetAlgebra-Implementations":{"role":"collectionGroup","title":"SetAlgebra Implementations","abstract":[],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RegexCompileFlags\/SetAlgebra-Implementations","kind":"article","type":"topic","url":"\/documentation\/glib\/regexcompileflags\/setalgebra-implementations"},"doc://GLib/documentation/GLib/RegexCompileFlags/default":{"role":"symbol","title":"default","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"`default`"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"RegexCompileFlags","preciseIdentifier":"s:4GLib17RegexCompileFlagsV"}],"abstract":[{"type":"text","text":"No special options set. Since: 2.74"}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RegexCompileFlags\/default","kind":"symbol","type":"topic","url":"\/documentation\/glib\/regexcompileflags\/default"},"doc://GLib/documentation/GLib/RegexCompileFlags/newlineLf":{"role":"symbol","title":"newlineLf","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"newlineLf"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"RegexCompileFlags","preciseIdentifier":"s:4GLib17RegexCompileFlagsV"}],"abstract":[{"type":"text","text":"Usually any newline character or character sequence is"},{"type":"text","text":" "},{"type":"text","text":"recognized. If this option is set, the only recognized newline character"},{"type":"text","text":" "},{"type":"text","text":"is ‘\\n’."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RegexCompileFlags\/newlineLf","kind":"symbol","type":"topic","url":"\/documentation\/glib\/regexcompileflags\/newlinelf"},"doc://GLib/documentation/GLib":{"role":"collection","title":"GLib","abstract":[],"identifier":"doc:\/\/GLib\/documentation\/GLib","kind":"symbol","type":"topic","url":"\/documentation\/glib"},"doc://GLib/documentation/GLib/RegexCompileFlags/multiline":{"role":"symbol","title":"multiline","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"multiline"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"RegexCompileFlags","preciseIdentifier":"s:4GLib17RegexCompileFlagsV"}],"abstract":[{"type":"text","text":"By default, GRegex treats the strings as consisting"},{"type":"text","text":" "},{"type":"text","text":"of a single line of characters (even if it actually contains"},{"type":"text","text":" "},{"type":"text","text":"newlines). The “start of line” metacharacter (”^”) matches only"},{"type":"text","text":" "},{"type":"text","text":"at the start of the string, while the “end of line” metacharacter"},{"type":"text","text":" "},{"type":"text","text":"(”$”) matches only at the end of the string, or before a terminating"},{"type":"text","text":" "},{"type":"text","text":"newline (unless "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/RegexCompileFlags\/dollarEndonly"},{"type":"text","text":" is set). When"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/RegexCompileFlags\/multiline"},{"type":"text","text":" is set, the “start of line” and “end of line”"},{"type":"text","text":" "},{"type":"text","text":"constructs match immediately following or immediately before any"},{"type":"text","text":" "},{"type":"text","text":"newline in the string, respectively, as well as at the very start"},{"type":"text","text":" "},{"type":"text","text":"and end. This can be changed within a pattern by a “(?m)” option"},{"type":"text","text":" "},{"type":"text","text":"setting."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RegexCompileFlags\/multiline","kind":"symbol","type":"topic","url":"\/documentation\/glib\/regexcompileflags\/multiline"},"doc://GLib/documentation/GLib/RegexCompileFlags/OptionSet-Implementations":{"role":"collectionGroup","title":"OptionSet Implementations","abstract":[],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RegexCompileFlags\/OptionSet-Implementations","kind":"article","type":"topic","url":"\/documentation\/glib\/regexcompileflags\/optionset-implementations"},"doc://GLib/documentation/GLib/RegexCompileFlags/noAutoCapture":{"role":"symbol","title":"noAutoCapture","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"noAutoCapture"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"RegexCompileFlags","preciseIdentifier":"s:4GLib17RegexCompileFlagsV"}],"abstract":[{"type":"text","text":"Disables the use of numbered capturing"},{"type":"text","text":" "},{"type":"text","text":"parentheses in the pattern. Any opening parenthesis that is not"},{"type":"text","text":" "},{"type":"text","text":"followed by “?” behaves as if it were followed by “?:” but named"},{"type":"text","text":" "},{"type":"text","text":"parentheses can still be used for capturing (and they acquire numbers"},{"type":"text","text":" "},{"type":"text","text":"in the usual way)."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RegexCompileFlags\/noAutoCapture","kind":"symbol","type":"topic","url":"\/documentation\/glib\/regexcompileflags\/noautocapture"},"doc://GLib/documentation/GLib/RegexCompileFlags/value":{"role":"symbol","title":"value","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"value"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"GRegexCompileFlags","preciseIdentifier":"c:@EA@GRegexCompileFlags"}],"abstract":[{"type":"text","text":"The equivalent underlying "},{"type":"codeVoice","code":"GRegexCompileFlags"},{"type":"text","text":" enum value"}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RegexCompileFlags\/value","kind":"symbol","type":"topic","url":"\/documentation\/glib\/regexcompileflags\/value"},"doc://GLib/documentation/GLib/RegexCompileFlags/Equatable-Implementations":{"role":"collectionGroup","title":"Equatable Implementations","abstract":[],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RegexCompileFlags\/Equatable-Implementations","kind":"article","type":"topic","url":"\/documentation\/glib\/regexcompileflags\/equatable-implementations"},"doc://GLib/documentation/GLib/RegexCompileFlags/init(_:)-3bkk4":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"I"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"I"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Creates a new instance with the specified Int value"}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RegexCompileFlags\/init(_:)-3bkk4","kind":"symbol","type":"topic","url":"\/documentation\/glib\/regexcompileflags\/init(_:)-3bkk4"},"doc://GLib/documentation/GLib/RegexCompileFlags":{"role":"symbol","title":"RegexCompileFlags","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"RegexCompileFlags"}],"abstract":[{"type":"text","text":"Flags specifying compile-time options."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RegexCompileFlags","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"RegexCompileFlags"}],"url":"\/documentation\/glib\/regexcompileflags"},"doc://GLib/documentation/GLib/RegexCompileFlags/init(rawValue:)":{"role":"symbol","title":"init(rawValue:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"rawValue"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt32","preciseIdentifier":"s:s6UInt32V"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Creates a new instance with the specified raw value"}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RegexCompileFlags\/init(rawValue:)","kind":"symbol","type":"topic","url":"\/documentation\/glib\/regexcompileflags\/init(rawvalue:)"},"doc://GLib/s9OptionSetP":{"type":"unresolvable","title":"Swift.OptionSet","identifier":"doc:\/\/GLib\/s9OptionSetP"},"doc://GLib/documentation/GLib/RegexCompileFlags/dotall":{"role":"symbol","title":"dotall","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"dotall"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"RegexCompileFlags","preciseIdentifier":"s:4GLib17RegexCompileFlagsV"}],"abstract":[{"type":"text","text":"A dot metacharacter (”.”) in the pattern matches all"},{"type":"text","text":" "},{"type":"text","text":"characters, including newlines. Without it, newlines are excluded."},{"type":"text","text":" "},{"type":"text","text":"This option can be changed within a pattern by a (”?s”) option setting."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RegexCompileFlags\/dotall","kind":"symbol","type":"topic","url":"\/documentation\/glib\/regexcompileflags\/dotall"},"doc://GLib/documentation/GLib/RegexCompileFlags/firstline":{"role":"symbol","title":"firstline","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"firstline"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"RegexCompileFlags","preciseIdentifier":"s:4GLib17RegexCompileFlagsV"}],"abstract":[{"type":"text","text":"Limits an unanchored pattern to match before (or at) the"},{"type":"text","text":" "},{"type":"text","text":"first newline. Since: 2.34"}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RegexCompileFlags\/firstline","kind":"symbol","type":"topic","url":"\/documentation\/glib\/regexcompileflags\/firstline"},"doc://GLib/documentation/GLib/RegexCompileFlags/javascriptCompat":{"role":"symbol","title":"javascriptCompat","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"javascriptCompat"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"RegexCompileFlags","preciseIdentifier":"s:4GLib17RegexCompileFlagsV"}],"abstract":[{"type":"text","text":"Changes behaviour so that it is compatible with"},{"type":"text","text":" "},{"type":"text","text":"JavaScript rather than PCRE. Since GLib 2.74 this is no longer supported,"},{"type":"text","text":" "},{"type":"text","text":"as libpcre2 does not support it. Since: 2.34 Deprecated: 2.74"}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RegexCompileFlags\/javascriptCompat","kind":"symbol","type":"topic","url":"\/documentation\/glib\/regexcompileflags\/javascriptcompat"},"doc://GLib/documentation/GLib/RegexCompileFlags/newlineCrlf":{"role":"symbol","title":"newlineCrlf","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"newlineCrlf"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"RegexCompileFlags","preciseIdentifier":"s:4GLib17RegexCompileFlagsV"}],"abstract":[{"type":"text","text":"Usually any newline character or character sequence is"},{"type":"text","text":" "},{"type":"text","text":"recognized. If this option is set, the only recognized newline character"},{"type":"text","text":" "},{"type":"text","text":"sequence is ‘\\r\\n’."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RegexCompileFlags\/newlineCrlf","kind":"symbol","type":"topic","url":"\/documentation\/glib\/regexcompileflags\/newlinecrlf"},"doc://GLib/documentation/GLib/RegexCompileFlags/dollarEndonly":{"role":"symbol","title":"dollarEndonly","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"dollarEndonly"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"RegexCompileFlags","preciseIdentifier":"s:4GLib17RegexCompileFlagsV"}],"abstract":[{"type":"text","text":"A dollar metacharacter (”$”) in the pattern"},{"type":"text","text":" "},{"type":"text","text":"matches only at the end of the string. Without this option, a"},{"type":"text","text":" "},{"type":"text","text":"dollar also matches immediately before the final character if"},{"type":"text","text":" "},{"type":"text","text":"it is a newline (but not before any other newlines). This option"},{"type":"text","text":" "},{"type":"text","text":"is ignored if "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/RegexCompileFlags\/multiline"},{"type":"text","text":" is set."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RegexCompileFlags\/dollarEndonly","kind":"symbol","type":"topic","url":"\/documentation\/glib\/regexcompileflags\/dollarendonly"},"doc://GLib/documentation/GLib/RegexCompileFlags/dupnames":{"role":"symbol","title":"dupnames","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"dupnames"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"RegexCompileFlags","preciseIdentifier":"s:4GLib17RegexCompileFlagsV"}],"abstract":[{"type":"text","text":"Names used to identify capturing subpatterns need not"},{"type":"text","text":" "},{"type":"text","text":"be unique. This can be helpful for certain types of pattern when it"},{"type":"text","text":" "},{"type":"text","text":"is known that only one instance of the named subpattern can ever be"},{"type":"text","text":" "},{"type":"text","text":"matched."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RegexCompileFlags\/dupnames","kind":"symbol","type":"topic","url":"\/documentation\/glib\/regexcompileflags\/dupnames"}}}