{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"mainDepth"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function is useful in a situation like the following:"},{"type":"text","text":" "},{"type":"text","text":"Imagine an extremely simple “garbage collected” system."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"(C Language Example):"}]},{"type":"codeListing","syntax":"C","code":["static GList *free_list;","","gpointer","allocate_memory (gsize size)","{","  gpointer result = g_malloc (size);","  free_list = g_list_prepend (free_list, result);","  return result;","}","","void","free_allocated_memory (void)","{","  GList *l;","  for (l = free_list; l; l = l->next);","    g_free (l->data);","  g_list_free (free_list);","  free_list = NULL;"," }","","[...]","","while (TRUE);"," {","   g_main_context_iteration (NULL, TRUE);","   free_allocated_memory();","  }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This works from an application, however, if you want to do the same"},{"type":"text","text":" "},{"type":"text","text":"thing from a library, it gets more difficult, since you no longer"},{"type":"text","text":" "},{"type":"text","text":"control the main loop. You might think you can simply use an idle"},{"type":"text","text":" "},{"type":"text","text":"function to make the call to "},{"type":"codeVoice","code":"free_allocated_memory()"},{"type":"text","text":", but that"},{"type":"text","text":" "},{"type":"text","text":"doesn’t work, since the idle function could be called from a"},{"type":"text","text":" "},{"type":"text","text":"recursive callback. This can be fixed by using [func"},{"type":"codeVoice","code":"GLib.main_depth"},{"type":"text","text":"]"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"(C Language Example):"}]},{"type":"codeListing","syntax":"C","code":["gpointer","allocate_memory (gsize size)","{","  FreeListBlock *block = g_new (FreeListBlock, 1);","  block->mem = g_malloc (size);","  block->depth = g_main_depth ();","  free_list = g_list_prepend (free_list, block);","  return block->mem;","}","","void","free_allocated_memory (void)","{","  GList *l;","  ","  int depth = g_main_depth ();","  for (l = free_list; l; );","    {","      GList *next = l->next;","      FreeListBlock *block = l->data;","      if (block->depth > depth)","        {","          g_free (block->mem);","          g_free (block);","          free_list = g_list_delete_link (free_list, l);","        }","              ","      l = next;","    }","  }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"There is a temptation to use [func"},{"type":"codeVoice","code":"GLib.main_depth"},{"type":"text","text":"] to solve"},{"type":"text","text":" "},{"type":"text","text":"problems with reentrancy. For instance, while waiting for data"},{"type":"text","text":" "},{"type":"text","text":"to be received from the network in response to a menu item,"},{"type":"text","text":" "},{"type":"text","text":"the menu item might be selected again. It might seem that"},{"type":"text","text":" "},{"type":"text","text":"one could make the menu item’s callback return immediately"},{"type":"text","text":" "},{"type":"text","text":"and do nothing if [func"},{"type":"codeVoice","code":"GLib.main_depth"},{"type":"text","text":"] returns a value greater than 1."},{"type":"text","text":" "},{"type":"text","text":"However, this should be avoided since the user then sees selecting"},{"type":"text","text":" "},{"type":"text","text":"the menu item do nothing. Furthermore, you’ll find yourself adding"},{"type":"text","text":" "},{"type":"text","text":"these checks all over your code, since there are doubtless many,"},{"type":"text","text":" "},{"type":"text","text":"many things that the user could do. Instead, you can use the"},{"type":"text","text":" "},{"type":"text","text":"following techniques:"}]},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"type":"codeVoice","code":"gtk_widget_set_sensitive()"},{"type":"text","text":" or modal dialogs to prevent"},{"type":"text","text":" "},{"type":"text","text":"the user from interacting with elements while the main"},{"type":"text","text":" "},{"type":"text","text":"loop is recursing."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Avoid main loop recursion in situations where you can’t handle"},{"type":"text","text":" "},{"type":"text","text":"arbitrary  callbacks. Instead, structure your code so that you"},{"type":"text","text":" "},{"type":"text","text":"simply return to the main loop and then get called again when"},{"type":"text","text":" "},{"type":"text","text":"there is more work to do."}]}]}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/glib\/maindepth()"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/GLib\/documentation\/GLib\/mainDepth()","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Returns the depth of the stack of calls to"},{"type":"text","text":" "},{"type":"text","text":"[method"},{"type":"codeVoice","code":"GLib.MainContext.dispatch"},{"type":"text","text":"] on any "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/MainContext"},{"type":"text","text":" in the current thread."},{"type":"text","text":" "},{"type":"text","text":"That is, when called from the toplevel, it gives 0. When"},{"type":"text","text":" "},{"type":"text","text":"called from within a callback from [method"},{"type":"codeVoice","code":"GLib.MainContext.iteration"},{"type":"text","text":"]"},{"type":"text","text":" "},{"type":"text","text":"(or [method"},{"type":"codeVoice","code":"GLib.MainLoop.run"},{"type":"text","text":"], etc.) it returns 1. When called from within"},{"type":"text","text":" "},{"type":"text","text":"a callback to a recursive call to [method"},{"type":"codeVoice","code":"GLib.MainContext.iteration"},{"type":"text","text":"],"},{"type":"text","text":" "},{"type":"text","text":"it returns 2. And so forth."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"mainDepth"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"}],"title":"mainDepth()","roleHeading":"Function","role":"symbol","symbolKind":"func","externalID":"s:4GLib9mainDepthSiyF","modules":[{"name":"GLib"}]},"hierarchy":{"paths":[["doc:\/\/GLib\/documentation\/GLib"]]},"references":{"doc://GLib/documentation/GLib":{"role":"collection","title":"GLib","abstract":[],"identifier":"doc:\/\/GLib\/documentation\/GLib","kind":"symbol","type":"topic","url":"\/documentation\/glib"},"doc://GLib/documentation/GLib/MainContext":{"role":"symbol","title":"MainContext","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"MainContext"}],"abstract":[{"type":"text","text":"The "},{"type":"codeVoice","code":"GMainContext"},{"type":"text","text":" struct is an opaque data"},{"type":"text","text":" "},{"type":"text","text":"type representing a set of sources to be handled in a main loop."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/MainContext","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"MainContext"}],"url":"\/documentation\/glib\/maincontext"},"doc://GLib/documentation/GLib/mainDepth()":{"role":"symbol","title":"mainDepth()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"mainDepth"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"}],"abstract":[{"type":"text","text":"Returns the depth of the stack of calls to"},{"type":"text","text":" "},{"type":"text","text":"[method"},{"type":"codeVoice","code":"GLib.MainContext.dispatch"},{"type":"text","text":"] on any "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/MainContext"},{"type":"text","text":" in the current thread."},{"type":"text","text":" "},{"type":"text","text":"That is, when called from the toplevel, it gives 0. When"},{"type":"text","text":" "},{"type":"text","text":"called from within a callback from [method"},{"type":"codeVoice","code":"GLib.MainContext.iteration"},{"type":"text","text":"]"},{"type":"text","text":" "},{"type":"text","text":"(or [method"},{"type":"codeVoice","code":"GLib.MainLoop.run"},{"type":"text","text":"], etc.) it returns 1. When called from within"},{"type":"text","text":" "},{"type":"text","text":"a callback to a recursive call to [method"},{"type":"codeVoice","code":"GLib.MainContext.iteration"},{"type":"text","text":"],"},{"type":"text","text":" "},{"type":"text","text":"it returns 2. And so forth."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/mainDepth()","kind":"symbol","type":"topic","url":"\/documentation\/glib\/maindepth()"}}}