{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"RWLockProtocol"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","identifier":"doc:\/\/GLib\/documentation\/GLib\/PointerWrapper","preciseIdentifier":"s:4GLib14PointerWrapperP","text":"PointerWrapper"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The difference to a mutex is that a reader-writer lock discriminates"},{"type":"text","text":" "},{"type":"text","text":"between read-only (‘reader’) and full (‘writer’) access. While only"},{"type":"text","text":" "},{"type":"text","text":"one thread at a time is allowed write access (by holding the ‘writer’"},{"type":"text","text":" "},{"type":"text","text":"lock via "},{"type":"codeVoice","code":"g_rw_lock_writer_lock()"},{"type":"text","text":"), multiple threads can gain"},{"type":"text","text":" "},{"type":"text","text":"simultaneous read-only access (by holding the ‘reader’ lock via"},{"type":"text","text":" "},{"type":"codeVoice","code":"g_rw_lock_reader_lock()"},{"type":"text","text":")."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It is unspecified whether readers or writers have priority in acquiring the"},{"type":"text","text":" "},{"type":"text","text":"lock when a reader already holds the lock and a writer is queued to acquire"},{"type":"text","text":" "},{"type":"text","text":"it."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here is an example for an array with access functions:"},{"type":"text","text":" "},{"type":"text","text":"(C Language Example):"}]},{"type":"codeListing","syntax":"C","code":["  GRWLock lock;","  GPtrArray *array;","","  gpointer","  my_array_get (guint index)","  {","    gpointer retval = NULL;","","    if (!array)","      return NULL;","","    g_rw_lock_reader_lock (&lock);","    if (index < array->len)","      retval = g_ptr_array_index (array, index);","    g_rw_lock_reader_unlock (&lock);","","    return retval;","  }","","  void","  my_array_set (guint index, gpointer data)","  {","    g_rw_lock_writer_lock (&lock);","","    if (!array)","      array = g_ptr_array_new ();","","    if (index >= array->len)","      g_ptr_array_set_size (array, index+1);","    g_ptr_array_index (array, index) = data;","","    g_rw_lock_writer_unlock (&lock);","  }"," "]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This example shows an array which can be accessed by many readers"},{"type":"text","text":" "},{"type":"text","text":"(the "},{"type":"codeVoice","code":"my_array_get()"},{"type":"text","text":" function) simultaneously, whereas the writers"},{"type":"text","text":" "},{"type":"text","text":"(the "},{"type":"codeVoice","code":"my_array_set()"},{"type":"text","text":" function) will only be allowed one at a time"},{"type":"text","text":" "},{"type":"text","text":"and only if no readers currently access the array. This is because"},{"type":"text","text":" "},{"type":"text","text":"of the potentially dangerous resizing of the array. Using these"},{"type":"text","text":" "},{"type":"text","text":"functions is fully multi-thread safe now."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLock"},{"type":"text","text":" is allocated in static storage then it can be used"},{"type":"text","text":" "},{"type":"text","text":"without initialisation.  Otherwise, you should call"},{"type":"text","text":" "},{"type":"codeVoice","code":"g_rw_lock_init()"},{"type":"text","text":" on it and "},{"type":"codeVoice","code":"g_rw_lock_clear()"},{"type":"text","text":" when done."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A GRWLock should only be accessed with the g_rw_lock_ functions."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLockProtocol"},{"type":"text","text":" protocol exposes the methods and properties of an underlying "},{"type":"codeVoice","code":"GRWLock"},{"type":"text","text":" instance."},{"type":"text","text":" "},{"type":"text","text":"The default implementation of these can be found in the protocol extension below."},{"type":"text","text":" "},{"type":"text","text":"For a concrete class that implements these methods and properties, see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLock"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Alternatively, use "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLockRef"},{"type":"text","text":" as a lighweight, "},{"type":"codeVoice","code":"unowned"},{"type":"text","text":" reference if you already have an instance you just want to use."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/glib\/rwlockprotocol"],"traits":[{"interfaceLanguage":"swift"}]}],"relationshipsSections":[{"identifiers":["doc:\/\/GLib\/documentation\/GLib\/PointerWrapper"],"kind":"relationships","title":"Inherits From","type":"inheritsFrom"},{"identifiers":["doc:\/\/GLib\/documentation\/GLib\/RWLock","doc:\/\/GLib\/documentation\/GLib\/RWLockRef"],"kind":"relationships","title":"Conforming Types","type":"conformingTypes"}],"identifier":{"url":"doc:\/\/GLib\/documentation\/GLib\/RWLockProtocol","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"The GRWLock struct is an opaque data structure to represent a"},{"type":"text","text":" "},{"type":"text","text":"reader-writer lock. It is similar to a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Mutex"},{"type":"text","text":" in that it allows"},{"type":"text","text":" "},{"type":"text","text":"multiple threads to coordinate access to a shared resource."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"RWLockProtocol"}],"title":"RWLockProtocol","roleHeading":"Protocol","role":"symbol","symbolKind":"protocol","externalID":"s:4GLib14RWLockProtocolP","modules":[{"name":"GLib"}],"navigatorTitle":[{"kind":"identifier","text":"RWLockProtocol"}]},"hierarchy":{"paths":[["doc:\/\/GLib\/documentation\/GLib"]]},"topicSections":[{"title":"Instance Methods","identifiers":["doc:\/\/GLib\/documentation\/GLib\/RWLockProtocol\/clear()","doc:\/\/GLib\/documentation\/GLib\/RWLockProtocol\/init_()","doc:\/\/GLib\/documentation\/GLib\/RWLockProtocol\/readerLock()","doc:\/\/GLib\/documentation\/GLib\/RWLockProtocol\/readerTrylock()","doc:\/\/GLib\/documentation\/GLib\/RWLockProtocol\/readerUnlock()","doc:\/\/GLib\/documentation\/GLib\/RWLockProtocol\/writerLock()","doc:\/\/GLib\/documentation\/GLib\/RWLockProtocol\/writerTrylock()","doc:\/\/GLib\/documentation\/GLib\/RWLockProtocol\/writerUnlock()"]}],"references":{"doc://GLib/documentation/GLib":{"role":"collection","title":"GLib","abstract":[],"identifier":"doc:\/\/GLib\/documentation\/GLib","kind":"symbol","type":"topic","url":"\/documentation\/glib"},"doc://GLib/documentation/GLib/RWLockProtocol/clear()":{"role":"symbol","title":"clear()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"clear"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Frees the resources allocated to a lock with "},{"type":"codeVoice","code":"g_rw_lock_init()"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLockProtocol\/clear()","kind":"symbol","type":"topic","url":"\/documentation\/glib\/rwlockprotocol\/clear()"},"doc://GLib/documentation/GLib/RWLockProtocol/writerTrylock()":{"role":"symbol","title":"writerTrylock()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"writerTrylock"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"abstract":[{"type":"text","text":"Tries to obtain a write lock on "},{"type":"codeVoice","code":"rwLock"},{"type":"text","text":". If another thread"},{"type":"text","text":" "},{"type":"text","text":"currently holds a read or write lock on "},{"type":"codeVoice","code":"rwLock"},{"type":"text","text":", it immediately"},{"type":"text","text":" "},{"type":"text","text":"returns "},{"type":"codeVoice","code":"false"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Otherwise it locks "},{"type":"codeVoice","code":"rwLock"},{"type":"text","text":" and returns "},{"type":"codeVoice","code":"true"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLockProtocol\/writerTrylock()","kind":"symbol","type":"topic","url":"\/documentation\/glib\/rwlockprotocol\/writertrylock()"},"doc://GLib/documentation/GLib/RWLockRef":{"role":"symbol","title":"RWLockRef","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"RWLockRef"}],"abstract":[{"type":"text","text":"The GRWLock struct is an opaque data structure to represent a"},{"type":"text","text":" "},{"type":"text","text":"reader-writer lock. It is similar to a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Mutex"},{"type":"text","text":" in that it allows"},{"type":"text","text":" "},{"type":"text","text":"multiple threads to coordinate access to a shared resource."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLockRef","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"RWLockRef"}],"url":"\/documentation\/glib\/rwlockref"},"doc://GLib/documentation/GLib/RWLockProtocol/writerLock()":{"role":"symbol","title":"writerLock()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"writerLock"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Obtain a write lock on "},{"type":"codeVoice","code":"rwLock"},{"type":"text","text":". If another thread currently holds"},{"type":"text","text":" "},{"type":"text","text":"a read or write lock on "},{"type":"codeVoice","code":"rwLock"},{"type":"text","text":", the current thread will block"},{"type":"text","text":" "},{"type":"text","text":"until all other threads have dropped their locks on "},{"type":"codeVoice","code":"rwLock"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLockProtocol\/writerLock()","kind":"symbol","type":"topic","url":"\/documentation\/glib\/rwlockprotocol\/writerlock()"},"doc://GLib/documentation/GLib/PointerWrapper":{"role":"symbol","title":"PointerWrapper","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"PointerWrapper"}],"abstract":[{"type":"text","text":"Protocol for GLib types that wrap pointers."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/PointerWrapper","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"PointerWrapper"}],"url":"\/documentation\/glib\/pointerwrapper"},"doc://GLib/documentation/GLib/RWLock":{"role":"symbol","title":"RWLock","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"RWLock"}],"abstract":[{"type":"text","text":"The GRWLock struct is an opaque data structure to represent a"},{"type":"text","text":" "},{"type":"text","text":"reader-writer lock. It is similar to a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Mutex"},{"type":"text","text":" in that it allows"},{"type":"text","text":" "},{"type":"text","text":"multiple threads to coordinate access to a shared resource."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLock","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"RWLock"}],"url":"\/documentation\/glib\/rwlock"},"doc://GLib/documentation/GLib/RWLockProtocol":{"role":"symbol","title":"RWLockProtocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"RWLockProtocol"}],"abstract":[{"type":"text","text":"The GRWLock struct is an opaque data structure to represent a"},{"type":"text","text":" "},{"type":"text","text":"reader-writer lock. It is similar to a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Mutex"},{"type":"text","text":" in that it allows"},{"type":"text","text":" "},{"type":"text","text":"multiple threads to coordinate access to a shared resource."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLockProtocol","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"RWLockProtocol"}],"url":"\/documentation\/glib\/rwlockprotocol"},"doc://GLib/documentation/GLib/RWLockProtocol/readerTrylock()":{"role":"symbol","title":"readerTrylock()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"readerTrylock"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"abstract":[{"type":"text","text":"Tries to obtain a read lock on "},{"type":"codeVoice","code":"rwLock"},{"type":"text","text":" and returns "},{"type":"codeVoice","code":"true"},{"type":"text","text":" if"},{"type":"text","text":" "},{"type":"text","text":"the read lock was successfully obtained. Otherwise it"},{"type":"text","text":" "},{"type":"text","text":"returns "},{"type":"codeVoice","code":"false"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLockProtocol\/readerTrylock()","kind":"symbol","type":"topic","url":"\/documentation\/glib\/rwlockprotocol\/readertrylock()"},"doc://GLib/documentation/GLib/RWLockProtocol/writerUnlock()":{"role":"symbol","title":"writerUnlock()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"writerUnlock"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Release a write lock on "},{"type":"codeVoice","code":"rwLock"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLockProtocol\/writerUnlock()","kind":"symbol","type":"topic","url":"\/documentation\/glib\/rwlockprotocol\/writerunlock()"},"doc://GLib/documentation/GLib/RWLockProtocol/readerUnlock()":{"role":"symbol","title":"readerUnlock()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"readerUnlock"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Release a read lock on "},{"type":"codeVoice","code":"rwLock"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLockProtocol\/readerUnlock()","kind":"symbol","type":"topic","url":"\/documentation\/glib\/rwlockprotocol\/readerunlock()"},"doc://GLib/documentation/GLib/RWLockProtocol/init_()":{"role":"symbol","title":"init_()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"init_"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Initializes a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLock"},{"type":"text","text":" so that it can be used."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLockProtocol\/init_()","kind":"symbol","type":"topic","url":"\/documentation\/glib\/rwlockprotocol\/init_()"},"doc://GLib/documentation/GLib/RWLockProtocol/readerLock()":{"role":"symbol","title":"readerLock()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"readerLock"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Obtain a read lock on "},{"type":"codeVoice","code":"rwLock"},{"type":"text","text":". If another thread currently holds"},{"type":"text","text":" "},{"type":"text","text":"the write lock on "},{"type":"codeVoice","code":"rwLock"},{"type":"text","text":", the current thread will block until the"},{"type":"text","text":" "},{"type":"text","text":"write lock was (held and) released. If another thread does not hold"},{"type":"text","text":" "},{"type":"text","text":"the write lock, but is waiting for it, it is implementation defined"},{"type":"text","text":" "},{"type":"text","text":"whether the reader or writer will block. Read locks can be taken"},{"type":"text","text":" "},{"type":"text","text":"recursively."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLockProtocol\/readerLock()","kind":"symbol","type":"topic","url":"\/documentation\/glib\/rwlockprotocol\/readerlock()"},"doc://GLib/documentation/GLib/Mutex":{"role":"symbol","title":"Mutex","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Mutex"}],"abstract":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Mutex"},{"type":"text","text":" struct is an opaque data structure to represent a mutex"},{"type":"text","text":" "},{"type":"text","text":"(mutual exclusion). It can be used to protect data against shared"},{"type":"text","text":" "},{"type":"text","text":"access."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/Mutex","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Mutex"}],"url":"\/documentation\/glib\/mutex"}}}