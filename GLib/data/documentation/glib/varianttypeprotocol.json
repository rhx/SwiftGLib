{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"VariantTypeProtocol"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","identifier":"doc:\/\/GLib\/documentation\/GLib\/PointerWrapper","preciseIdentifier":"s:4GLib14PointerWrapperP","text":"PointerWrapper"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This section introduces the [type"},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Variant"},{"type":"text","text":"] type system. It is based, in"},{"type":"text","text":" "},{"type":"text","text":"large part, on the D-Bus type system, with two major changes and"},{"type":"text","text":" "},{"type":"text","text":"some minor lifting of restrictions. The"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"http:\/\/dbus.freedesktop.org\/doc\/dbus-specification.html"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"therefore, provides a significant amount of"},{"type":"text","text":" "},{"type":"text","text":"information that is useful when working with [type"},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Variant"},{"type":"text","text":"]."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The first major change with respect to the D-Bus type system is the"},{"type":"text","text":" "},{"type":"text","text":"introduction of maybe (or ‘nullable’) types.  Any type in [type"},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Variant"},{"type":"text","text":"]"},{"type":"text","text":" "},{"type":"text","text":"can be converted to a maybe type, in which case, "},{"type":"codeVoice","code":"nothing"},{"type":"text","text":" (or "},{"type":"codeVoice","code":"null"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"becomes a valid value.  Maybe types have been added by introducing the"},{"type":"text","text":" "},{"type":"text","text":"character "},{"type":"codeVoice","code":"m"},{"type":"text","text":" to type strings."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The second major change is that the [type"},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Variant"},{"type":"text","text":"] type system supports"},{"type":"text","text":" "},{"type":"text","text":"the concept of ‘indefinite types’ — types that are less specific than"},{"type":"text","text":" "},{"type":"text","text":"the normal types found in D-Bus.  For example, it is possible to speak"},{"type":"text","text":" "},{"type":"text","text":"of ‘an array of any type’ in [type"},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Variant"},{"type":"text","text":"], where the D-Bus type system"},{"type":"text","text":" "},{"type":"text","text":"would require you to speak of ‘an array of integers’ or ‘an array of"},{"type":"text","text":" "},{"type":"text","text":"strings’.  Indefinite types have been added by introducing the"},{"type":"text","text":" "},{"type":"text","text":"characters "},{"type":"codeVoice","code":"*"},{"type":"text","text":", "},{"type":"codeVoice","code":"?"},{"type":"text","text":" and "},{"type":"codeVoice","code":"r"},{"type":"text","text":" to type strings."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Finally, all arbitrary restrictions relating to the complexity of"},{"type":"text","text":" "},{"type":"text","text":"types are lifted along with the restriction that dictionary entries"},{"type":"text","text":" "},{"type":"text","text":"may only appear nested inside of arrays."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Just as in D-Bus, [type"},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Variant"},{"type":"text","text":"] types are described with strings (‘type"},{"type":"text","text":" "},{"type":"text","text":"strings’).  Subject to the differences mentioned above, these strings"},{"type":"text","text":" "},{"type":"text","text":"are of the same form as those found in D-Bus.  Note, however: D-Bus"},{"type":"text","text":" "},{"type":"text","text":"always works in terms of messages and therefore individual type"},{"type":"text","text":" "},{"type":"text","text":"strings appear nowhere in its interface.  Instead, ‘signatures’"},{"type":"text","text":" "},{"type":"text","text":"are a concatenation of the strings of the type of each argument in a"},{"type":"text","text":" "},{"type":"text","text":"message.  [type"},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Variant"},{"type":"text","text":"] deals with single values directly so"},{"type":"text","text":" "},{"type":"text","text":"[type"},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Variant"},{"type":"text","text":"] type strings always describe the type of exactly one"},{"type":"text","text":" "},{"type":"text","text":"value.  This means that a D-Bus signature string is generally not a valid"},{"type":"text","text":" "},{"type":"text","text":"[type"},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Variant"},{"type":"text","text":"] type string — except in the case that it is the signature"},{"type":"text","text":" "},{"type":"text","text":"of a message containing exactly one argument."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"An indefinite type is similar in spirit to what may be called an"},{"type":"text","text":" "},{"type":"text","text":"abstract type in other type systems.  No value can exist that has an"},{"type":"text","text":" "},{"type":"text","text":"indefinite type as its type, but values can exist that have types"},{"type":"text","text":" "},{"type":"text","text":"that are subtypes of indefinite types.  That is to say,"},{"type":"text","text":" "},{"type":"text","text":"[method"},{"type":"codeVoice","code":"GLib.Variant.get_type"},{"type":"text","text":"] will never return an indefinite type, but"},{"type":"text","text":" "},{"type":"text","text":"calling [method"},{"type":"codeVoice","code":"GLib.Variant.is_of_type"},{"type":"text","text":"] with an indefinite type may return"},{"type":"text","text":" "},{"type":"text","text":"true.  For example, you cannot have a value that represents ‘an"},{"type":"text","text":" "},{"type":"text","text":"array of no particular type’, but you can have an ‘array of integers’"},{"type":"text","text":" "},{"type":"text","text":"which certainly matches the type of ‘an array of no particular type’,"},{"type":"text","text":" "},{"type":"text","text":"since ‘array of integers’ is a subtype of ‘array of no particular"},{"type":"text","text":" "},{"type":"text","text":"type’."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is similar to how instances of abstract classes may not"},{"type":"text","text":" "},{"type":"text","text":"directly exist in other type systems, but instances of their"},{"type":"text","text":" "},{"type":"text","text":"non-abstract subtypes may.  For example, in GTK, no object that has"},{"type":"text","text":" "},{"type":"text","text":"the type of "},{"type":"reference","isActive":true,"identifier":"https:\/\/docs.gtk.org\/gtk4\/class.Widget.html"},{"type":"text","text":" can"},{"type":"text","text":" "},{"type":"text","text":"exist (since "},{"type":"codeVoice","code":"GtkWidget"},{"type":"text","text":" is an abstract class), but a "},{"type":"reference","isActive":true,"identifier":"https:\/\/docs.gtk.org\/gtk4\/class.Window.html"},{"type":"text","text":" "},{"type":"text","text":"can certainly be instantiated, and you would say that a "},{"type":"codeVoice","code":"GtkWindow"},{"type":"text","text":" is a"},{"type":"text","text":" "},{"type":"codeVoice","code":"GtkWidget"},{"type":"text","text":" (since "},{"type":"codeVoice","code":"GtkWindow"},{"type":"text","text":" is a subclass of "},{"type":"codeVoice","code":"GtkWidget"},{"type":"text","text":")."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Two types may not be compared by value; use [method"},{"type":"codeVoice","code":"GLib.VariantType.equal"},{"type":"text","text":"]"},{"type":"text","text":" "},{"type":"text","text":"or [method"},{"type":"codeVoice","code":"GLib.VariantType.is_subtype_of"},{"type":"text","text":"]  May be copied using"},{"type":"text","text":" "},{"type":"text","text":"[method"},{"type":"codeVoice","code":"GLib.VariantType.copy"},{"type":"text","text":"] and freed using [method"},{"type":"codeVoice","code":"GLib.VariantType.free"},{"type":"text","text":"]."}]},{"anchor":"GVariant-Type-Strings","level":2,"type":"heading","text":"GVariant Type Strings"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A [type"},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Variant"},{"type":"text","text":"] type string can be any of the following:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"any basic type string (listed below)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"v"},{"type":"text","text":", "},{"type":"codeVoice","code":"r"},{"type":"text","text":" or "},{"type":"codeVoice","code":"*"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"one of the characters "},{"type":"codeVoice","code":"a"},{"type":"text","text":" or "},{"type":"codeVoice","code":"m"},{"type":"text","text":", followed by another type string"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"the character "},{"type":"codeVoice","code":"("},{"type":"text","text":", followed by a concatenation of zero or more other"},{"type":"text","text":" "},{"type":"text","text":"type strings, followed by the character "},{"type":"codeVoice","code":")"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"the character "},{"type":"codeVoice","code":"{"},{"type":"text","text":", followed by a basic type string (see below),"},{"type":"text","text":" "},{"type":"text","text":"followed by another type string, followed by the character "},{"type":"codeVoice","code":"}"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A basic type string describes a basic type (as per"},{"type":"text","text":" "},{"type":"text","text":"[method"},{"type":"codeVoice","code":"GLib.VariantType.is_basic"},{"type":"text","text":"]) and is always a single character in"},{"type":"text","text":" "},{"type":"text","text":"length. The valid basic type strings are "},{"type":"codeVoice","code":"b"},{"type":"text","text":", "},{"type":"codeVoice","code":"y"},{"type":"text","text":", "},{"type":"codeVoice","code":"n"},{"type":"text","text":", "},{"type":"codeVoice","code":"q"},{"type":"text","text":", "},{"type":"codeVoice","code":"i"},{"type":"text","text":", "},{"type":"codeVoice","code":"u"},{"type":"text","text":", "},{"type":"codeVoice","code":"x"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"t"},{"type":"text","text":", "},{"type":"codeVoice","code":"h"},{"type":"text","text":", "},{"type":"codeVoice","code":"d"},{"type":"text","text":", "},{"type":"codeVoice","code":"s"},{"type":"text","text":", "},{"type":"codeVoice","code":"o"},{"type":"text","text":", "},{"type":"codeVoice","code":"g"},{"type":"text","text":" and "},{"type":"codeVoice","code":"?"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The above definition is recursive to arbitrary depth. "},{"type":"codeVoice","code":"aaaaai"},{"type":"text","text":" and"},{"type":"text","text":" "},{"type":"codeVoice","code":"("},{"type":"text","text":"ui(nq((y)"},{"type":"codeVoice","code":"))s)"},{"type":"text","text":" are both valid type strings, as is"},{"type":"text","text":" "},{"type":"codeVoice","code":"a(aa(ui)`(qna{`ya(yd)`}))`. In order to not hit memory limits, [type"},{"type":"text","text":"Variant``] imposes a limit on recursion depth of 65 nested"},{"type":"text","text":" "},{"type":"text","text":"containers. This is the limit in the D-Bus specification (64) plus one to"},{"type":"text","text":" "},{"type":"text","text":"allow a "},{"type":"reference","isActive":true,"identifier":"..\/gio\/class.DBusMessage.html"},{"type":"text","text":" to be nested in"},{"type":"text","text":" "},{"type":"text","text":"a top-level tuple."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The meaning of each of the characters is as follows:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"b"},{"type":"text","text":": the type string of "},{"type":"codeVoice","code":"G_VARIANT_TYPE_BOOLEAN"},{"type":"text","text":"; a boolean value."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"y"},{"type":"text","text":": the type string of "},{"type":"codeVoice","code":"G_VARIANT_TYPE_BYTE"},{"type":"text","text":"; a byte."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"n"},{"type":"text","text":": the type string of "},{"type":"codeVoice","code":"G_VARIANT_TYPE_INT16"},{"type":"text","text":"; a signed 16 bit integer."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"q"},{"type":"text","text":": the type string of "},{"type":"codeVoice","code":"G_VARIANT_TYPE_UINT16"},{"type":"text","text":"; an unsigned 16 bit integer."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"i"},{"type":"text","text":": the type string of "},{"type":"codeVoice","code":"G_VARIANT_TYPE_INT32"},{"type":"text","text":"; a signed 32 bit integer."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"u"},{"type":"text","text":": the type string of "},{"type":"codeVoice","code":"G_VARIANT_TYPE_UINT32"},{"type":"text","text":"; an unsigned 32 bit integer."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"x"},{"type":"text","text":": the type string of "},{"type":"codeVoice","code":"G_VARIANT_TYPE_INT64"},{"type":"text","text":"; a signed 64 bit integer."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"t"},{"type":"text","text":": the type string of "},{"type":"codeVoice","code":"G_VARIANT_TYPE_UINT64"},{"type":"text","text":"; an unsigned 64 bit integer."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"h"},{"type":"text","text":": the type string of "},{"type":"codeVoice","code":"G_VARIANT_TYPE_HANDLE"},{"type":"text","text":"; a signed 32 bit value"},{"type":"text","text":" "},{"type":"text","text":"that, by convention, is used as an index into an array of file"},{"type":"text","text":" "},{"type":"text","text":"descriptors that are sent alongside a D-Bus message."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"d"},{"type":"text","text":": the type string of "},{"type":"codeVoice","code":"G_VARIANT_TYPE_DOUBLE"},{"type":"text","text":"; a double precision"},{"type":"text","text":" "},{"type":"text","text":"floating point value."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"s"},{"type":"text","text":": the type string of "},{"type":"codeVoice","code":"G_VARIANT_TYPE_STRING"},{"type":"text","text":"; a string."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"o"},{"type":"text","text":": the type string of "},{"type":"codeVoice","code":"G_VARIANT_TYPE_OBJECT_PATH"},{"type":"text","text":"; a string in the form"},{"type":"text","text":" "},{"type":"text","text":"of a D-Bus object path."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"g"},{"type":"text","text":": the type string of "},{"type":"codeVoice","code":"G_VARIANT_TYPE_SIGNATURE"},{"type":"text","text":"; a string in the form of"},{"type":"text","text":" "},{"type":"text","text":"a D-Bus type signature."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"?"},{"type":"text","text":": the type string of "},{"type":"codeVoice","code":"G_VARIANT_TYPE_BASIC"},{"type":"text","text":"; an indefinite type that"},{"type":"text","text":" "},{"type":"text","text":"is a supertype of any of the basic types."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"v"},{"type":"text","text":": the type string of "},{"type":"codeVoice","code":"G_VARIANT_TYPE_VARIANT"},{"type":"text","text":"; a container type that"},{"type":"text","text":" "},{"type":"text","text":"contain any other type of value."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"a"},{"type":"text","text":": used as a prefix on another type string to mean an array of that"},{"type":"text","text":" "},{"type":"text","text":"type; the type string "},{"type":"codeVoice","code":"ai"},{"type":"text","text":", for example, is the type of an array of"},{"type":"text","text":" "},{"type":"text","text":"signed 32-bit integers."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"m"},{"type":"text","text":": used as a prefix on another type string to mean a ‘maybe’, or"},{"type":"text","text":" "},{"type":"text","text":"‘nullable’, version of that type; the type string "},{"type":"codeVoice","code":"ms"},{"type":"text","text":", for example,"},{"type":"text","text":" "},{"type":"text","text":"is the type of a value that maybe contains a string, or maybe contains"},{"type":"text","text":" "},{"type":"text","text":"nothing."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"()"},{"type":"text","text":": used to enclose zero or more other concatenated type strings to"},{"type":"text","text":" "},{"type":"text","text":"create a tuple type; the type string "},{"type":"codeVoice","code":"(is)"},{"type":"text","text":", for example, is the type of"},{"type":"text","text":" "},{"type":"text","text":"a pair of an integer and a string."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"r"},{"type":"text","text":": the type string of "},{"type":"codeVoice","code":"G_VARIANT_TYPE_TUPLE"},{"type":"text","text":"; an indefinite type that is"},{"type":"text","text":" "},{"type":"text","text":"a supertype of any tuple type, regardless of the number of items."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"{}"},{"type":"text","text":": used to enclose a basic type string concatenated with another type"},{"type":"text","text":" "},{"type":"text","text":"string to create a dictionary entry type, which usually appears inside of"},{"type":"text","text":" "},{"type":"text","text":"an array to form a dictionary; the type string "},{"type":"codeVoice","code":"a{sd}"},{"type":"text","text":", for example, is"},{"type":"text","text":" "},{"type":"text","text":"the type of a dictionary that maps strings to double precision floating"},{"type":"text","text":" "},{"type":"text","text":"point values."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The first type (the basic type) is the key type and the second type is"},{"type":"text","text":" "},{"type":"text","text":"the value type. The reason that the first type is restricted to being a"},{"type":"text","text":" "},{"type":"text","text":"basic type is so that it can easily be hashed."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"*"},{"type":"text","text":": the type string of "},{"type":"codeVoice","code":"G_VARIANT_TYPE_ANY"},{"type":"text","text":"; the indefinite type that is"},{"type":"text","text":" "},{"type":"text","text":"a supertype of all types.  Note that, as with all type strings, this"},{"type":"text","text":" "},{"type":"text","text":"character represents exactly one type. It cannot be used inside of tuples"},{"type":"text","text":" "},{"type":"text","text":"to mean ‘any number of items’."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Any type string of a container that contains an indefinite type is,"},{"type":"text","text":" "},{"type":"text","text":"itself, an indefinite type. For example, the type string "},{"type":"codeVoice","code":"a*"},{"type":"text","text":" "},{"type":"text","text":"(corresponding to "},{"type":"codeVoice","code":"G_VARIANT_TYPE_ARRAY"},{"type":"text","text":") is an indefinite type"},{"type":"text","text":" "},{"type":"text","text":"that is a supertype of every array type. "},{"type":"codeVoice","code":"(*s)"},{"type":"text","text":" is a supertype"},{"type":"text","text":" "},{"type":"text","text":"of all tuples that contain exactly two items where the second"},{"type":"text","text":" "},{"type":"text","text":"item is a string."}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"a{?*}"},{"type":"text","text":" is an indefinite type that is a supertype of all arrays"},{"type":"text","text":" "},{"type":"text","text":"containing dictionary entries where the key is any basic type and"},{"type":"text","text":" "},{"type":"text","text":"the value is any type at all.  This is, by definition, a dictionary,"},{"type":"text","text":" "},{"type":"text","text":"so this type string corresponds to "},{"type":"codeVoice","code":"G_VARIANT_TYPE_DICTIONARY"},{"type":"text","text":". Note"},{"type":"text","text":" "},{"type":"text","text":"that, due to the restriction that the key of a dictionary entry must"},{"type":"text","text":" "},{"type":"text","text":"be a basic type, "},{"type":"codeVoice","code":"{**}"},{"type":"text","text":" is not a valid type string."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantTypeProtocol"},{"type":"text","text":" protocol exposes the methods and properties of an underlying "},{"type":"codeVoice","code":"GVariantType"},{"type":"text","text":" instance."},{"type":"text","text":" "},{"type":"text","text":"The default implementation of these can be found in the protocol extension below."},{"type":"text","text":" "},{"type":"text","text":"For a concrete class that implements these methods and properties, see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantType"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Alternatively, use "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantTypeRef"},{"type":"text","text":" as a lighweight, "},{"type":"codeVoice","code":"unowned"},{"type":"text","text":" reference if you already have an instance you just want to use."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/glib\/varianttypeprotocol"],"traits":[{"interfaceLanguage":"swift"}]}],"relationshipsSections":[{"identifiers":["doc:\/\/GLib\/documentation\/GLib\/PointerWrapper"],"kind":"relationships","title":"Inherits From","type":"inheritsFrom"},{"identifiers":["doc:\/\/GLib\/documentation\/GLib\/VariantType","doc:\/\/GLib\/documentation\/GLib\/VariantTypeRef"],"kind":"relationships","title":"Conforming Types","type":"conformingTypes"}],"identifier":{"url":"doc:\/\/GLib\/documentation\/GLib\/VariantTypeProtocol","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"A type in the [type"},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Variant"},{"type":"text","text":"] type system."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"VariantTypeProtocol"}],"title":"VariantTypeProtocol","roleHeading":"Protocol","role":"symbol","symbolKind":"protocol","externalID":"s:4GLib19VariantTypeProtocolP","modules":[{"name":"GLib"}],"navigatorTitle":[{"kind":"identifier","text":"VariantTypeProtocol"}]},"hierarchy":{"paths":[["doc:\/\/GLib\/documentation\/GLib"]]},"topicSections":[{"title":"Instance Properties","identifiers":["doc:\/\/GLib\/documentation\/GLib\/VariantTypeProtocol\/isArray","doc:\/\/GLib\/documentation\/GLib\/VariantTypeProtocol\/isBasic","doc:\/\/GLib\/documentation\/GLib\/VariantTypeProtocol\/isContainer","doc:\/\/GLib\/documentation\/GLib\/VariantTypeProtocol\/isDefinite","doc:\/\/GLib\/documentation\/GLib\/VariantTypeProtocol\/isDictEntry","doc:\/\/GLib\/documentation\/GLib\/VariantTypeProtocol\/isMaybe","doc:\/\/GLib\/documentation\/GLib\/VariantTypeProtocol\/isTuple","doc:\/\/GLib\/documentation\/GLib\/VariantTypeProtocol\/isVariant","doc:\/\/GLib\/documentation\/GLib\/VariantTypeProtocol\/stringLength","doc:\/\/GLib\/documentation\/GLib\/VariantTypeProtocol\/variant_type_ptr-3wsc4"]},{"title":"Instance Methods","identifiers":["doc:\/\/GLib\/documentation\/GLib\/VariantTypeProtocol\/copy()","doc:\/\/GLib\/documentation\/GLib\/VariantTypeProtocol\/dupString()","doc:\/\/GLib\/documentation\/GLib\/VariantTypeProtocol\/element()","doc:\/\/GLib\/documentation\/GLib\/VariantTypeProtocol\/equal(type2:)","doc:\/\/GLib\/documentation\/GLib\/VariantTypeProtocol\/first()","doc:\/\/GLib\/documentation\/GLib\/VariantTypeProtocol\/free()","doc:\/\/GLib\/documentation\/GLib\/VariantTypeProtocol\/getStringLength()","doc:\/\/GLib\/documentation\/GLib\/VariantTypeProtocol\/hash()","doc:\/\/GLib\/documentation\/GLib\/VariantTypeProtocol\/isSubtypeOf(supertype:)","doc:\/\/GLib\/documentation\/GLib\/VariantTypeProtocol\/key()","doc:\/\/GLib\/documentation\/GLib\/VariantTypeProtocol\/nItems()","doc:\/\/GLib\/documentation\/GLib\/VariantTypeProtocol\/next()","doc:\/\/GLib\/documentation\/GLib\/VariantTypeProtocol\/peekString()","doc:\/\/GLib\/documentation\/GLib\/VariantTypeProtocol\/value()","doc:\/\/GLib\/documentation\/GLib\/VariantTypeProtocol\/variantParse(text:limit:endptr:)"]}],"references":{"doc://GLib/documentation/GLib/VariantTypeProtocol/isArray":{"role":"symbol","title":"isArray","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"isArray"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"abstract":[{"type":"text","text":"Determines if the given "},{"type":"codeVoice","code":"type"},{"type":"text","text":" is an array type.  This is true if the"},{"type":"text","text":" "},{"type":"text","text":"type string for "},{"type":"codeVoice","code":"type"},{"type":"text","text":" starts with an ‘a’."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantTypeProtocol\/isArray","kind":"symbol","type":"topic","url":"\/documentation\/glib\/varianttypeprotocol\/isarray"},"doc://GLib/documentation/GLib/VariantTypeProtocol/isDefinite":{"role":"symbol","title":"isDefinite","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"isDefinite"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"abstract":[{"type":"text","text":"Determines if the given "},{"type":"codeVoice","code":"type"},{"type":"text","text":" is definite (ie: not indefinite)."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantTypeProtocol\/isDefinite","kind":"symbol","type":"topic","url":"\/documentation\/glib\/varianttypeprotocol\/isdefinite"},"doc://GLib/documentation/GLib/VariantTypeProtocol/element()":{"role":"symbol","title":"element()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"element"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"VariantTypeRef","preciseIdentifier":"s:4GLib14VariantTypeRefV"},{"kind":"text","text":"!"}],"abstract":[{"type":"text","text":"Determines the element type of an array or maybe type."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantTypeProtocol\/element()","kind":"symbol","type":"topic","url":"\/documentation\/glib\/varianttypeprotocol\/element()"},"doc://GLib/documentation/GLib/VariantTypeProtocol/stringLength":{"role":"symbol","title":"stringLength","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"stringLength"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"}],"abstract":[{"type":"text","text":"Returns the length of the type string corresponding to the given"},{"type":"text","text":" "},{"type":"codeVoice","code":"type"},{"type":"text","text":".  This function must be used to determine the valid extent of"},{"type":"text","text":" "},{"type":"text","text":"the memory region returned by "},{"type":"codeVoice","code":"g_variant_type_peek_string()"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantTypeProtocol\/stringLength","kind":"symbol","type":"topic","url":"\/documentation\/glib\/varianttypeprotocol\/stringlength"},"doc://GLib/documentation/GLib/VariantTypeProtocol/variantParse(text:limit:endptr:)":{"role":"symbol","title":"variantParse(text:limit:endptr:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"variantParse"},{"kind":"text","text":"("},{"kind":"externalParam","text":"text"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"gchar","preciseIdentifier":"c:@T@gchar"},{"kind":"text","text":">!, "},{"kind":"externalParam","text":"limit"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"gchar","preciseIdentifier":"c:@T@gchar"},{"kind":"text","text":">?, "},{"kind":"externalParam","text":"endptr"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"gchar","preciseIdentifier":"c:@T@gchar"},{"kind":"text","text":">?>?) "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"VariantRef","preciseIdentifier":"s:4GLib10VariantRefV"},{"kind":"text","text":"!"}],"abstract":[{"type":"text","text":"Parses a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Variant"},{"type":"text","text":" from a text representation."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantTypeProtocol\/variantParse(text:limit:endptr:)","kind":"symbol","type":"topic","url":"\/documentation\/glib\/varianttypeprotocol\/variantparse(text:limit:endptr:)"},"doc://GLib/documentation/GLib/VariantTypeProtocol":{"role":"symbol","title":"VariantTypeProtocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"VariantTypeProtocol"}],"abstract":[{"type":"text","text":"A type in the [type"},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Variant"},{"type":"text","text":"] type system."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantTypeProtocol","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"VariantTypeProtocol"}],"url":"\/documentation\/glib\/varianttypeprotocol"},"http://dbus.freedesktop.org/doc/dbus-specification.html":{"title":"D-Bus specification","titleInlineContent":[{"type":"text","text":"D-Bus specification"}],"type":"link","identifier":"http:\/\/dbus.freedesktop.org\/doc\/dbus-specification.html","url":"http:\/\/dbus.freedesktop.org\/doc\/dbus-specification.html"},"doc://GLib/documentation/GLib/VariantTypeProtocol/isSubtypeOf(supertype:)":{"role":"symbol","title":"isSubtypeOf(supertype:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"isSubtypeOf"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"VariantTypeT"},{"kind":"text","text":">("},{"kind":"externalParam","text":"supertype"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"VariantTypeT"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"abstract":[{"type":"text","text":"Checks if "},{"type":"codeVoice","code":"type"},{"type":"text","text":" is a subtype of "},{"type":"codeVoice","code":"supertype"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantTypeProtocol\/isSubtypeOf(supertype:)","kind":"symbol","type":"topic","url":"\/documentation\/glib\/varianttypeprotocol\/issubtypeof(supertype:)"},"doc://GLib/documentation/GLib/VariantTypeProtocol/isTuple":{"role":"symbol","title":"isTuple","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"isTuple"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"abstract":[{"type":"text","text":"Determines if the given "},{"type":"codeVoice","code":"type"},{"type":"text","text":" is a tuple type.  This is true if the"},{"type":"text","text":" "},{"type":"text","text":"type string for "},{"type":"codeVoice","code":"type"},{"type":"text","text":" starts with a ‘(’ or if "},{"type":"codeVoice","code":"type"},{"type":"text","text":" is"},{"type":"text","text":" "},{"type":"codeVoice","code":"G_VARIANT_TYPE_TUPLE"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantTypeProtocol\/isTuple","kind":"symbol","type":"topic","url":"\/documentation\/glib\/varianttypeprotocol\/istuple"},"doc://GLib/documentation/GLib/VariantTypeProtocol/nItems()":{"role":"symbol","title":"nItems()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"nItems"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"}],"abstract":[{"type":"text","text":"Determines the number of items contained in a tuple or"},{"type":"text","text":" "},{"type":"text","text":"dictionary entry type."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantTypeProtocol\/nItems()","kind":"symbol","type":"topic","url":"\/documentation\/glib\/varianttypeprotocol\/nitems()"},"https://docs.gtk.org/gtk4/class.Widget.html":{"title":"GtkWidget","titleInlineContent":[{"type":"codeVoice","code":"GtkWidget"}],"type":"link","identifier":"https:\/\/docs.gtk.org\/gtk4\/class.Widget.html","url":"https:\/\/docs.gtk.org\/gtk4\/class.Widget.html"},"doc://GLib/documentation/GLib/VariantTypeProtocol/free()":{"role":"symbol","title":"free()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"free"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Frees a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantType"},{"type":"text","text":" that was allocated with"},{"type":"text","text":" "},{"type":"codeVoice","code":"g_variant_type_copy()"},{"type":"text","text":", "},{"type":"codeVoice","code":"g_variant_type_new()"},{"type":"text","text":" or one of the container"},{"type":"text","text":" "},{"type":"text","text":"type constructor functions."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantTypeProtocol\/free()","kind":"symbol","type":"topic","url":"\/documentation\/glib\/varianttypeprotocol\/free()"},"doc://GLib/documentation/GLib/VariantTypeProtocol/hash()":{"role":"symbol","title":"hash()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"hash"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"}],"abstract":[{"type":"text","text":"Hashes "},{"type":"codeVoice","code":"type"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantTypeProtocol\/hash()","kind":"symbol","type":"topic","url":"\/documentation\/glib\/varianttypeprotocol\/hash()"},"doc://GLib/documentation/GLib/Variant":{"role":"symbol","title":"Variant","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Variant"}],"abstract":[{"type":"codeVoice","code":"GVariant"},{"type":"text","text":" is a variant datatype; it can contain one or more values"},{"type":"text","text":" "},{"type":"text","text":"along with information about the type of the values."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/Variant","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Variant"}],"url":"\/documentation\/glib\/variant"},"doc://GLib/documentation/GLib/PointerWrapper":{"role":"symbol","title":"PointerWrapper","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"PointerWrapper"}],"abstract":[{"type":"text","text":"Protocol for GLib types that wrap pointers."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/PointerWrapper","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"PointerWrapper"}],"url":"\/documentation\/glib\/pointerwrapper"},"doc://GLib/documentation/GLib/VariantTypeProtocol/value()":{"role":"symbol","title":"value()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"value"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"VariantTypeRef","preciseIdentifier":"s:4GLib14VariantTypeRefV"},{"kind":"text","text":"!"}],"abstract":[{"type":"text","text":"Determines the value type of a dictionary entry type."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantTypeProtocol\/value()","kind":"symbol","type":"topic","url":"\/documentation\/glib\/varianttypeprotocol\/value()"},"doc://GLib/documentation/GLib/VariantTypeProtocol/equal(type2:)":{"role":"symbol","title":"equal(type2:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"equal"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"VariantTypeT"},{"kind":"text","text":">("},{"kind":"externalParam","text":"type2"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"VariantTypeT"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"abstract":[{"type":"text","text":"Compares "},{"type":"codeVoice","code":"type1"},{"type":"text","text":" and "},{"type":"codeVoice","code":"type2"},{"type":"text","text":" for equality."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantTypeProtocol\/equal(type2:)","kind":"symbol","type":"topic","url":"\/documentation\/glib\/varianttypeprotocol\/equal(type2:)"},"doc://GLib/documentation/GLib/VariantTypeProtocol/key()":{"role":"symbol","title":"key()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"key"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"VariantTypeRef","preciseIdentifier":"s:4GLib14VariantTypeRefV"},{"kind":"text","text":"!"}],"abstract":[{"type":"text","text":"Determines the key type of a dictionary entry type."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantTypeProtocol\/key()","kind":"symbol","type":"topic","url":"\/documentation\/glib\/varianttypeprotocol\/key()"},"doc://GLib/documentation/GLib/VariantTypeProtocol/variant_type_ptr-3wsc4":{"defaultImplementations":1,"role":"symbol","title":"variant_type_ptr","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"variant_type_ptr"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GVariantType"},{"kind":"text","text":">!"}],"abstract":[{"type":"text","text":"Typed pointer to the underlying "},{"type":"codeVoice","code":"GVariantType"},{"type":"text","text":" instance."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantTypeProtocol\/variant_type_ptr-3wsc4","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/glib\/varianttypeprotocol\/variant_type_ptr-3wsc4"},"doc://GLib/documentation/GLib/VariantTypeProtocol/peekString()":{"role":"symbol","title":"peekString()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"peekString"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":"!"}],"abstract":[{"type":"text","text":"Returns the type string corresponding to the given "},{"type":"codeVoice","code":"type"},{"type":"text","text":".  The"},{"type":"text","text":" "},{"type":"text","text":"result is not nul-terminated; in order to determine its length you"},{"type":"text","text":" "},{"type":"text","text":"must call "},{"type":"codeVoice","code":"g_variant_type_get_string_length()"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantTypeProtocol\/peekString()","kind":"symbol","type":"topic","url":"\/documentation\/glib\/varianttypeprotocol\/peekstring()"},"doc://GLib/documentation/GLib/VariantTypeProtocol/isDictEntry":{"role":"symbol","title":"isDictEntry","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"isDictEntry"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"abstract":[{"type":"text","text":"Determines if the given "},{"type":"codeVoice","code":"type"},{"type":"text","text":" is a dictionary entry type.  This is"},{"type":"text","text":" "},{"type":"text","text":"true if the type string for "},{"type":"codeVoice","code":"type"},{"type":"text","text":" starts with a ‘{’."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantTypeProtocol\/isDictEntry","kind":"symbol","type":"topic","url":"\/documentation\/glib\/varianttypeprotocol\/isdictentry"},"doc://GLib/documentation/GLib":{"role":"collection","title":"GLib","abstract":[],"identifier":"doc:\/\/GLib\/documentation\/GLib","kind":"symbol","type":"topic","url":"\/documentation\/glib"},"doc://GLib/documentation/GLib/VariantTypeProtocol/isMaybe":{"role":"symbol","title":"isMaybe","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"isMaybe"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"abstract":[{"type":"text","text":"Determines if the given "},{"type":"codeVoice","code":"type"},{"type":"text","text":" is a maybe type.  This is true if the"},{"type":"text","text":" "},{"type":"text","text":"type string for "},{"type":"codeVoice","code":"type"},{"type":"text","text":" starts with an ‘m’."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantTypeProtocol\/isMaybe","kind":"symbol","type":"topic","url":"\/documentation\/glib\/varianttypeprotocol\/ismaybe"},"../gio/class.DBusMessage.html":{"title":"GDBusMessage","titleInlineContent":[{"type":"codeVoice","code":"GDBusMessage"}],"type":"link","identifier":"..\/gio\/class.DBusMessage.html","url":"..\/gio\/class.DBusMessage.html"},"doc://GLib/documentation/GLib/VariantTypeProtocol/dupString()":{"role":"symbol","title":"dupString()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"dupString"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":"!"}],"abstract":[{"type":"text","text":"Returns a newly-allocated copy of the type string corresponding to"},{"type":"text","text":" "},{"type":"codeVoice","code":"type"},{"type":"text","text":".  The returned string is nul-terminated.  It is appropriate to"},{"type":"text","text":" "},{"type":"text","text":"call "},{"type":"codeVoice","code":"g_free()"},{"type":"text","text":" on the return value."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantTypeProtocol\/dupString()","kind":"symbol","type":"topic","url":"\/documentation\/glib\/varianttypeprotocol\/dupstring()"},"doc://GLib/documentation/GLib/VariantType":{"role":"symbol","title":"VariantType","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"VariantType"}],"abstract":[{"type":"text","text":"A type in the [type"},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Variant"},{"type":"text","text":"] type system."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantType","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"VariantType"}],"url":"\/documentation\/glib\/varianttype"},"doc://GLib/documentation/GLib/VariantTypeProtocol/next()":{"role":"symbol","title":"next()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"next"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"VariantTypeRef","preciseIdentifier":"s:4GLib14VariantTypeRefV"},{"kind":"text","text":"!"}],"abstract":[{"type":"text","text":"Determines the next item type of a tuple or dictionary entry"},{"type":"text","text":" "},{"type":"text","text":"type."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantTypeProtocol\/next()","kind":"symbol","type":"topic","url":"\/documentation\/glib\/varianttypeprotocol\/next()"},"doc://GLib/documentation/GLib/VariantTypeProtocol/copy()":{"role":"symbol","title":"copy()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"copy"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"VariantTypeRef","preciseIdentifier":"s:4GLib14VariantTypeRefV"},{"kind":"text","text":"!"}],"abstract":[{"type":"text","text":"Makes a copy of a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantType"},{"type":"text","text":".  It is appropriate to call"},{"type":"text","text":" "},{"type":"codeVoice","code":"g_variant_type_free()"},{"type":"text","text":" on the return value.  "},{"type":"codeVoice","code":"type"},{"type":"text","text":" may not be "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantTypeProtocol\/copy()","kind":"symbol","type":"topic","url":"\/documentation\/glib\/varianttypeprotocol\/copy()"},"doc://GLib/documentation/GLib/VariantTypeRef":{"role":"symbol","title":"VariantTypeRef","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"VariantTypeRef"}],"abstract":[{"type":"text","text":"A type in the [type"},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Variant"},{"type":"text","text":"] type system."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantTypeRef","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"VariantTypeRef"}],"url":"\/documentation\/glib\/varianttyperef"},"https://docs.gtk.org/gtk4/class.Window.html":{"title":"GtkWindow","titleInlineContent":[{"type":"codeVoice","code":"GtkWindow"}],"type":"link","identifier":"https:\/\/docs.gtk.org\/gtk4\/class.Window.html","url":"https:\/\/docs.gtk.org\/gtk4\/class.Window.html"},"doc://GLib/documentation/GLib/VariantTypeProtocol/isBasic":{"role":"symbol","title":"isBasic","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"isBasic"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"abstract":[{"type":"text","text":"Determines if the given "},{"type":"codeVoice","code":"type"},{"type":"text","text":" is a basic type."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantTypeProtocol\/isBasic","kind":"symbol","type":"topic","url":"\/documentation\/glib\/varianttypeprotocol\/isbasic"},"doc://GLib/documentation/GLib/VariantTypeProtocol/first()":{"role":"symbol","title":"first()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"first"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"VariantTypeRef","preciseIdentifier":"s:4GLib14VariantTypeRefV"},{"kind":"text","text":"!"}],"abstract":[{"type":"text","text":"Determines the first item type of a tuple or dictionary entry"},{"type":"text","text":" "},{"type":"text","text":"type."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantTypeProtocol\/first()","kind":"symbol","type":"topic","url":"\/documentation\/glib\/varianttypeprotocol\/first()"},"doc://GLib/documentation/GLib/VariantTypeProtocol/isVariant":{"role":"symbol","title":"isVariant","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"isVariant"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"abstract":[{"type":"text","text":"Determines if the given "},{"type":"codeVoice","code":"type"},{"type":"text","text":" is the variant type."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantTypeProtocol\/isVariant","kind":"symbol","type":"topic","url":"\/documentation\/glib\/varianttypeprotocol\/isvariant"},"doc://GLib/documentation/GLib/VariantTypeProtocol/getStringLength()":{"role":"symbol","title":"getStringLength()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"getStringLength"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"}],"abstract":[{"type":"text","text":"Returns the length of the type string corresponding to the given"},{"type":"text","text":" "},{"type":"codeVoice","code":"type"},{"type":"text","text":".  This function must be used to determine the valid extent of"},{"type":"text","text":" "},{"type":"text","text":"the memory region returned by "},{"type":"codeVoice","code":"g_variant_type_peek_string()"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantTypeProtocol\/getStringLength()","kind":"symbol","type":"topic","url":"\/documentation\/glib\/varianttypeprotocol\/getstringlength()"},"doc://GLib/documentation/GLib/VariantTypeProtocol/isContainer":{"role":"symbol","title":"isContainer","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"isContainer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"abstract":[{"type":"text","text":"Determines if the given "},{"type":"codeVoice","code":"type"},{"type":"text","text":" is a container type."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantTypeProtocol\/isContainer","kind":"symbol","type":"topic","url":"\/documentation\/glib\/varianttypeprotocol\/iscontainer"}}}