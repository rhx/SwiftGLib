{"variants":[{"paths":["\/documentation\/glib\/rwlock\/rwlockprotocol-implementations"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"identifier":{"url":"doc:\/\/GLib\/documentation\/GLib\/RWLock\/RWLockProtocol-Implementations","interfaceLanguage":"swift"},"topicSections":[{"title":"Instance Methods","identifiers":["doc:\/\/GLib\/documentation\/GLib\/RWLock\/clear()","doc:\/\/GLib\/documentation\/GLib\/RWLock\/init_()","doc:\/\/GLib\/documentation\/GLib\/RWLock\/readerLock()","doc:\/\/GLib\/documentation\/GLib\/RWLock\/readerTrylock()","doc:\/\/GLib\/documentation\/GLib\/RWLock\/readerUnlock()","doc:\/\/GLib\/documentation\/GLib\/RWLock\/writerLock()","doc:\/\/GLib\/documentation\/GLib\/RWLock\/writerTrylock()","doc:\/\/GLib\/documentation\/GLib\/RWLock\/writerUnlock()"],"generated":true}],"kind":"article","metadata":{"modules":[{"name":"GLib"}],"role":"collectionGroup","title":"RWLockProtocol Implementations"},"hierarchy":{"paths":[["doc:\/\/GLib\/documentation\/GLib","doc:\/\/GLib\/documentation\/GLib\/RWLock"]]},"references":{"doc://GLib/documentation/GLib/RWLock/readerTrylock()":{"role":"symbol","title":"readerTrylock()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"readerTrylock"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"abstract":[{"type":"text","text":"Tries to obtain a read lock on "},{"type":"codeVoice","code":"rwLock"},{"type":"text","text":" and returns "},{"type":"codeVoice","code":"true"},{"type":"text","text":" if"},{"type":"text","text":" "},{"type":"text","text":"the read lock was successfully obtained. Otherwise it"},{"type":"text","text":" "},{"type":"text","text":"returns "},{"type":"codeVoice","code":"false"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLock\/readerTrylock()","kind":"symbol","type":"topic","url":"\/documentation\/glib\/rwlock\/readertrylock()"},"doc://GLib/documentation/GLib/RWLock/readerUnlock()":{"role":"symbol","title":"readerUnlock()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"readerUnlock"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Release a read lock on "},{"type":"codeVoice","code":"rwLock"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLock\/readerUnlock()","kind":"symbol","type":"topic","url":"\/documentation\/glib\/rwlock\/readerunlock()"},"doc://GLib/documentation/GLib/RWLock":{"role":"symbol","title":"RWLock","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"RWLock"}],"abstract":[{"type":"text","text":"The GRWLock struct is an opaque data structure to represent a"},{"type":"text","text":" "},{"type":"text","text":"reader-writer lock. It is similar to a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Mutex"},{"type":"text","text":" in that it allows"},{"type":"text","text":" "},{"type":"text","text":"multiple threads to coordinate access to a shared resource."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLock","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"RWLock"}],"url":"\/documentation\/glib\/rwlock"},"doc://GLib/documentation/GLib/RWLock/writerUnlock()":{"role":"symbol","title":"writerUnlock()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"writerUnlock"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Release a write lock on "},{"type":"codeVoice","code":"rwLock"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLock\/writerUnlock()","kind":"symbol","type":"topic","url":"\/documentation\/glib\/rwlock\/writerunlock()"},"doc://GLib/documentation/GLib":{"role":"collection","title":"GLib","abstract":[],"identifier":"doc:\/\/GLib\/documentation\/GLib","kind":"symbol","type":"topic","url":"\/documentation\/glib"},"doc://GLib/documentation/GLib/RWLock/readerLock()":{"role":"symbol","title":"readerLock()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"readerLock"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Obtain a read lock on "},{"type":"codeVoice","code":"rwLock"},{"type":"text","text":". If another thread currently holds"},{"type":"text","text":" "},{"type":"text","text":"the write lock on "},{"type":"codeVoice","code":"rwLock"},{"type":"text","text":", the current thread will block until the"},{"type":"text","text":" "},{"type":"text","text":"write lock was (held and) released. If another thread does not hold"},{"type":"text","text":" "},{"type":"text","text":"the write lock, but is waiting for it, it is implementation defined"},{"type":"text","text":" "},{"type":"text","text":"whether the reader or writer will block. Read locks can be taken"},{"type":"text","text":" "},{"type":"text","text":"recursively."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLock\/readerLock()","kind":"symbol","type":"topic","url":"\/documentation\/glib\/rwlock\/readerlock()"},"doc://GLib/documentation/GLib/RWLock/init_()":{"role":"symbol","title":"init_()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"init_"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Initializes a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLock"},{"type":"text","text":" so that it can be used."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLock\/init_()","kind":"symbol","type":"topic","url":"\/documentation\/glib\/rwlock\/init_()"},"doc://GLib/documentation/GLib/Mutex":{"role":"symbol","title":"Mutex","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Mutex"}],"abstract":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Mutex"},{"type":"text","text":" struct is an opaque data structure to represent a mutex"},{"type":"text","text":" "},{"type":"text","text":"(mutual exclusion). It can be used to protect data against shared"},{"type":"text","text":" "},{"type":"text","text":"access."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/Mutex","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Mutex"}],"url":"\/documentation\/glib\/mutex"},"doc://GLib/documentation/GLib/RWLock/writerTrylock()":{"role":"symbol","title":"writerTrylock()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"writerTrylock"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"abstract":[{"type":"text","text":"Tries to obtain a write lock on "},{"type":"codeVoice","code":"rwLock"},{"type":"text","text":". If another thread"},{"type":"text","text":" "},{"type":"text","text":"currently holds a read or write lock on "},{"type":"codeVoice","code":"rwLock"},{"type":"text","text":", it immediately"},{"type":"text","text":" "},{"type":"text","text":"returns "},{"type":"codeVoice","code":"false"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Otherwise it locks "},{"type":"codeVoice","code":"rwLock"},{"type":"text","text":" and returns "},{"type":"codeVoice","code":"true"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLock\/writerTrylock()","kind":"symbol","type":"topic","url":"\/documentation\/glib\/rwlock\/writertrylock()"},"doc://GLib/documentation/GLib/RWLock/clear()":{"role":"symbol","title":"clear()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"clear"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Frees the resources allocated to a lock with "},{"type":"codeVoice","code":"g_rw_lock_init()"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLock\/clear()","kind":"symbol","type":"topic","url":"\/documentation\/glib\/rwlock\/clear()"},"doc://GLib/documentation/GLib/RWLock/writerLock()":{"role":"symbol","title":"writerLock()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"writerLock"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Obtain a write lock on "},{"type":"codeVoice","code":"rwLock"},{"type":"text","text":". If another thread currently holds"},{"type":"text","text":" "},{"type":"text","text":"a read or write lock on "},{"type":"codeVoice","code":"rwLock"},{"type":"text","text":", the current thread will block"},{"type":"text","text":" "},{"type":"text","text":"until all other threads have dropped their locks on "},{"type":"codeVoice","code":"rwLock"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLock\/writerLock()","kind":"symbol","type":"topic","url":"\/documentation\/glib\/rwlock\/writerlock()"}}}