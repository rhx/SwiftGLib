{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"readerLock"},{"kind":"text","text":"()"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Calling "},{"type":"codeVoice","code":"g_rw_lock_reader_lock()"},{"type":"text","text":" while the current thread already"},{"type":"text","text":" "},{"type":"text","text":"owns a write lock leads to undefined behaviour. Read locks however"},{"type":"text","text":" "},{"type":"text","text":"can be taken recursively, in which case you need to make sure to"},{"type":"text","text":" "},{"type":"text","text":"call "},{"type":"codeVoice","code":"g_rw_lock_reader_unlock()"},{"type":"text","text":" the same amount of times."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It is implementation-defined how many read locks are allowed to be"},{"type":"text","text":" "},{"type":"text","text":"held on the same lock simultaneously. If the limit is hit,"},{"type":"text","text":" "},{"type":"text","text":"or if a deadlock is detected, a critical warning will be emitted."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/glib\/rwlock\/readerlock()"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/GLib\/documentation\/GLib\/RWLock\/readerLock()","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Obtain a read lock on "},{"type":"codeVoice","code":"rwLock"},{"type":"text","text":". If another thread currently holds"},{"type":"text","text":" "},{"type":"text","text":"the write lock on "},{"type":"codeVoice","code":"rwLock"},{"type":"text","text":", the current thread will block until the"},{"type":"text","text":" "},{"type":"text","text":"write lock was (held and) released. If another thread does not hold"},{"type":"text","text":" "},{"type":"text","text":"the write lock, but is waiting for it, it is implementation defined"},{"type":"text","text":" "},{"type":"text","text":"whether the reader or writer will block. Read locks can be taken"},{"type":"text","text":" "},{"type":"text","text":"recursively."}],"kind":"symbol","metadata":{"role":"symbol","title":"readerLock()","roleHeading":"Instance Method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"readerLock"},{"kind":"text","text":"()"}],"symbolKind":"method","externalID":"s:4GLib14RWLockProtocolPAAE10readerLockyyF::SYNTHESIZED::s:4GLib6RWLockC","extendedModule":"GLib","modules":[{"name":"GLib"}]},"hierarchy":{"paths":[["doc:\/\/GLib\/documentation\/GLib","doc:\/\/GLib\/documentation\/GLib\/RWLock","doc:\/\/GLib\/documentation\/GLib\/RWLock\/RWLockProtocol-Implementations"]]},"references":{"doc://GLib/documentation/GLib/RWLock/readerLock()":{"role":"symbol","title":"readerLock()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"readerLock"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Obtain a read lock on "},{"type":"codeVoice","code":"rwLock"},{"type":"text","text":". If another thread currently holds"},{"type":"text","text":" "},{"type":"text","text":"the write lock on "},{"type":"codeVoice","code":"rwLock"},{"type":"text","text":", the current thread will block until the"},{"type":"text","text":" "},{"type":"text","text":"write lock was (held and) released. If another thread does not hold"},{"type":"text","text":" "},{"type":"text","text":"the write lock, but is waiting for it, it is implementation defined"},{"type":"text","text":" "},{"type":"text","text":"whether the reader or writer will block. Read locks can be taken"},{"type":"text","text":" "},{"type":"text","text":"recursively."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLock\/readerLock()","kind":"symbol","type":"topic","url":"\/documentation\/glib\/rwlock\/readerlock()"},"doc://GLib/documentation/GLib/Mutex":{"role":"symbol","title":"Mutex","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Mutex"}],"abstract":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Mutex"},{"type":"text","text":" struct is an opaque data structure to represent a mutex"},{"type":"text","text":" "},{"type":"text","text":"(mutual exclusion). It can be used to protect data against shared"},{"type":"text","text":" "},{"type":"text","text":"access."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/Mutex","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Mutex"}],"url":"\/documentation\/glib\/mutex"},"doc://GLib/documentation/GLib":{"role":"collection","title":"GLib","abstract":[],"identifier":"doc:\/\/GLib\/documentation\/GLib","kind":"symbol","type":"topic","url":"\/documentation\/glib"},"doc://GLib/documentation/GLib/RWLock/RWLockProtocol-Implementations":{"role":"collectionGroup","title":"RWLockProtocol Implementations","abstract":[],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLock\/RWLockProtocol-Implementations","kind":"article","type":"topic","url":"\/documentation\/glib\/rwlock\/rwlockprotocol-implementations"},"doc://GLib/documentation/GLib/RWLock":{"role":"symbol","title":"RWLock","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"RWLock"}],"abstract":[{"type":"text","text":"The GRWLock struct is an opaque data structure to represent a"},{"type":"text","text":" "},{"type":"text","text":"reader-writer lock. It is similar to a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Mutex"},{"type":"text","text":" in that it allows"},{"type":"text","text":" "},{"type":"text","text":"multiple threads to coordinate access to a shared resource."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLock","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"RWLock"}],"url":"\/documentation\/glib\/rwlock"}}}