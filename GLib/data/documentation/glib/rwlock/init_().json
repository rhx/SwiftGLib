{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"init_"},{"kind":"text","text":"()"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function is useful to initialize a lock that has been"},{"type":"text","text":" "},{"type":"text","text":"allocated on the stack, or as part of a larger structure.  It is not"},{"type":"text","text":" "},{"type":"text","text":"necessary to initialise a reader-writer lock that has been statically"},{"type":"text","text":" "},{"type":"text","text":"allocated."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"(C Language Example):"}]},{"type":"codeListing","syntax":"C","code":["  typedef struct {","    GRWLock l;","    ...","  } Blob;","","Blob *b;","","b = g_new (Blob, 1);","g_rw_lock_init (&b->l);"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To undo the effect of "},{"type":"codeVoice","code":"g_rw_lock_init()"},{"type":"text","text":" when a lock is no longer"},{"type":"text","text":" "},{"type":"text","text":"needed, use "},{"type":"codeVoice","code":"g_rw_lock_clear()"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Calling "},{"type":"codeVoice","code":"g_rw_lock_init()"},{"type":"text","text":" on an already initialized "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLock"},{"type":"text","text":" leads"},{"type":"text","text":" "},{"type":"text","text":"to undefined behaviour."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/glib\/rwlock\/init_()"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/GLib\/documentation\/GLib\/RWLock\/init_()","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Initializes a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLock"},{"type":"text","text":" so that it can be used."}],"kind":"symbol","metadata":{"role":"symbol","title":"init_()","roleHeading":"Instance Method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"init_"},{"kind":"text","text":"()"}],"symbolKind":"method","externalID":"s:4GLib14RWLockProtocolPAAE5init_yyF::SYNTHESIZED::s:4GLib6RWLockC","extendedModule":"GLib","modules":[{"name":"GLib"}]},"hierarchy":{"paths":[["doc:\/\/GLib\/documentation\/GLib","doc:\/\/GLib\/documentation\/GLib\/RWLock","doc:\/\/GLib\/documentation\/GLib\/RWLock\/RWLockProtocol-Implementations"]]},"references":{"doc://GLib/documentation/GLib/RWLock/RWLockProtocol-Implementations":{"role":"collectionGroup","title":"RWLockProtocol Implementations","abstract":[],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLock\/RWLockProtocol-Implementations","kind":"article","type":"topic","url":"\/documentation\/glib\/rwlock\/rwlockprotocol-implementations"},"doc://GLib/documentation/GLib/RWLock/init_()":{"role":"symbol","title":"init_()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"init_"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Initializes a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLock"},{"type":"text","text":" so that it can be used."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLock\/init_()","kind":"symbol","type":"topic","url":"\/documentation\/glib\/rwlock\/init_()"},"doc://GLib/documentation/GLib":{"role":"collection","title":"GLib","abstract":[],"identifier":"doc:\/\/GLib\/documentation\/GLib","kind":"symbol","type":"topic","url":"\/documentation\/glib"},"doc://GLib/documentation/GLib/Mutex":{"role":"symbol","title":"Mutex","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Mutex"}],"abstract":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Mutex"},{"type":"text","text":" struct is an opaque data structure to represent a mutex"},{"type":"text","text":" "},{"type":"text","text":"(mutual exclusion). It can be used to protect data against shared"},{"type":"text","text":" "},{"type":"text","text":"access."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/Mutex","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Mutex"}],"url":"\/documentation\/glib\/mutex"},"doc://GLib/documentation/GLib/RWLock":{"role":"symbol","title":"RWLock","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"RWLock"}],"abstract":[{"type":"text","text":"The GRWLock struct is an opaque data structure to represent a"},{"type":"text","text":" "},{"type":"text","text":"reader-writer lock. It is similar to a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/Mutex"},{"type":"text","text":" in that it allows"},{"type":"text","text":" "},{"type":"text","text":"multiple threads to coordinate access to a shared resource."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/RWLock","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"RWLock"}],"url":"\/documentation\/glib\/rwlock"}}}